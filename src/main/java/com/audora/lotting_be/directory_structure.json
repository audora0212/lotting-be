{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null,
        "LottingBeApplication.java": "package com.audora.lotting_be;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class LottingBeApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(LottingBeApplication.class, args);\n\t}\n\n}\n"
    },
    "config": {
        "__files__": {
            "SecurityConfig.java": "// src/main/java/com/audora/lotting_be/config/SecurityConfig.java\n\npackage com.audora.lotting_be.config;\n\nimport com.audora.lotting_be.security.AuthTokenFilter;\nimport com.audora.lotting_be.security.UserDetailsServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableMethodSecurity(prePostEnabled = true) // 메서드 단위 보안 활성화\npublic class SecurityConfig {\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Autowired\n    private AuthTokenFilter authTokenFilter;\n\n    // AuthenticationManager 빈 정의\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n\n    // PasswordEncoder 빈 정의\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    // CORS 설정 정의\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n\n        // 허용할 출처(Origin) 설정\n        configuration.setAllowedOrigins(Arrays.asList(\"http://localhost:3000\",\"http://3.38.181.18:3000\"));\n\n        // 허용할 HTTP 메서드 설정\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n\n        // 허용할 헤더 설정 (charset 추가)\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\", \"charset\"));\n\n        // 인증 정보(쿠키 등)를 포함할지 여부\n        configuration.setAllowCredentials(true);\n\n        // 적용할 경로 설정\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n\n        return source;\n    }\n\n    // SecurityFilterChain 빈 정의\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .cors(cors -> cors.configurationSource(corsConfigurationSource()))\n                .csrf(csrf -> csrf.disable())\n                .authorizeHttpRequests(auth -> auth\n                        .anyRequest().permitAll() // 모든 요청에 대해 인증 없이 접근 허용\n                )\n                .sessionManagement(session -> session\n                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                );\n\n        // JWT 필터 추가 부분은 남겨두되, 현재는 인증을 요구하지 않으므로 실질적으로 효과가 없음\n        http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n}\n"
        }
    },
    "controller": {
        "__files__": {
            "AuthController.java": "// src/main/java/com/audora/lotting_be/controller/AuthController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.payload.request.LoginRequest;\nimport com.audora.lotting_be.payload.request.SignupRequest;\nimport com.audora.lotting_be.payload.response.JwtResponse;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport com.audora.lotting_be.security.JwtUtils;\nimport com.audora.lotting_be.security.UserDetailsImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.*;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    private final AuthenticationManager authenticationManager;\n    private final ManagerRepository managerRepository;\n    private final PasswordEncoder encoder;\n    private final JwtUtils jwtUtils;\n\n    @Autowired\n    public AuthController(AuthenticationManager authenticationManager,\n                          ManagerRepository managerRepository,\n                          PasswordEncoder encoder,\n                          JwtUtils jwtUtils) {\n        this.authenticationManager = authenticationManager;\n        this.managerRepository = managerRepository;\n        this.encoder = encoder;\n        this.jwtUtils = jwtUtils;\n    }\n\n    @PostMapping(\"/signin\")\n    public ResponseEntity<?> authenticateManager(@RequestBody LoginRequest loginRequest) {\n\n        Authentication authentication = authenticationManager.authenticate(\n                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\n\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        String jwt = jwtUtils.generateJwtToken((UserDetailsImpl) authentication.getPrincipal());\n\n        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\n        List<String> roles = userDetails.getAuthorities().stream()\n                .map(item -> item.getAuthority())\n                .collect(Collectors.toList());\n\n        return ResponseEntity.ok(new JwtResponse(jwt,\n                userDetails.getId(),\n                userDetails.getUsername(),\n                roles));\n    }\n\n    @PostMapping(\"/signup\")\n    public ResponseEntity<?> registerManager(@RequestBody SignupRequest signUpRequest) {\n        if (managerRepository.existsByUsername(signUpRequest.getUsername())) {\n            return ResponseEntity\n                    .badRequest()\n                    .body(new MessageResponse(\"Error: Username is already taken!\"));\n        }\n\n        // Create new manager's account\n        Manager manager = new Manager();\n        manager.setUsername(signUpRequest.getUsername());\n        manager.setPassword(encoder.encode(signUpRequest.getPassword()));\n        manager.setRoles(signUpRequest.getRoles());\n\n        managerRepository.save(manager);\n\n        return ResponseEntity.ok(new MessageResponse(\"Manager registered successfully!\"));\n    }\n}\n",
            "CustomerController.java": "// src/main/java/com/audora/lotting_be/controller/CustomerController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.minor.*;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport com.audora.lotting_be.service.RefundService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/customers\")\npublic class CustomerController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private PhaseService phaseService;\n\n    @Autowired\n    private RefundService refundService;\n\n    @GetMapping(\"/nextId\")\n    public ResponseEntity<Integer> getNextCustomerId() {\n        Integer nextId = customerService.getNextCustomerId();\n        return ResponseEntity.ok(nextId);\n    }\n\n    @PostMapping\n    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {\n        System.out.println(\"Received Customer Data: \" + customer);\n        if (customer.getDeposits() != null) {\n            System.out.println(\"Received Deposit Date: \" + customer.getDeposits().getDepositdate());\n        } else {\n            System.out.println(\"Deposits is null\");\n        }\n        Customer createdCustomer = customerService.createCustomer(customer, true);\n        return ResponseEntity.ok(createdCustomer);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Customer> getCustomerById(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer != null) {\n            return ResponseEntity.ok(customer);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/phases\")\n    public ResponseEntity<List<Phase>> getPhasesByCustomerId(@PathVariable Integer id) {\n        List<Phase> phases = phaseService.getPhasesByCustomerId(id);\n        if (!phases.isEmpty()) {\n            return ResponseEntity.ok(phases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/search\")\n    public ResponseEntity<List<Customer>> searchCustomers(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number\n    ) {\n        List<Customer> customers = customerService.searchCustomers(name, number);\n        return ResponseEntity.ok(customers);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteCustomer(@PathVariable Integer id) {\n        customerService.deleteCustomer(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping(\"/{customerId}/pending-phases\")\n    public ResponseEntity<List<Phase>> getPendingPhases(@PathVariable Integer customerId) {\n        List<Phase> pendingPhases = customerService.getPendingPhases(customerId);\n        if (pendingPhases != null) {\n            return ResponseEntity.ok(pendingPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{customerId}/completed-phases\")\n    public ResponseEntity<List<Phase>> getCompletedPhases(@PathVariable Integer customerId) {\n        List<Phase> completedPhases = customerService.getCompletedPhases(customerId);\n        if (completedPhases != null) {\n            return ResponseEntity.ok(completedPhases);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/{id}/loan\")\n    public ResponseEntity<?> getLoanByCustomerId(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        return ResponseEntity.ok(customer.getLoan());\n    }\n\n    /**\n     * [수정됨] 대출/자납 업데이트:\n     * 1) Loan 필드 업데이트\n     * 2) customerService.saveCustomer(...)\n     * 3) customerService.recalculateEverything(...)\n     */\n    @PutMapping(\"/{id}/loan\")\n    public ResponseEntity<Customer> updateLoanByCustomerId(@PathVariable Integer id, @RequestBody Loan updatedLoan) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        Loan loan = customer.getLoan();\n        if (loan == null) {\n            loan = new Loan();\n        }\n        loan.setLoandate(updatedLoan.getLoandate());\n        loan.setLoanbank(updatedLoan.getLoanbank());\n        loan.setLoanammount(updatedLoan.getLoanammount());\n        loan.setSelfdate(updatedLoan.getSelfdate());\n        loan.setSelfammount(updatedLoan.getSelfammount());\n        customer.setLoan(loan);\n\n        System.out.println(\"============================================\");\n\n        // 우선 저장\n        customerService.saveCustomer(customer);\n        // 전체 재계산\n        customerService.recalculateEverything(customer);\n\n        return ResponseEntity.ok(customer);\n    }\n\n    @PutMapping(\"/{id}/cancel\")\n    public ResponseEntity<?> cancelCustomer(@PathVariable Integer id) {\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(404)\n                    .body(new MessageResponse(\"Error: Customer not found.\"));\n        }\n        customer.setCustomertype(\"x\");\n        customerService.saveCustomer(customer);\n        return ResponseEntity.ok(new MessageResponse(\"Customer cancelled successfully.\"));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Customer> updateCustomer(@PathVariable Integer id, @RequestBody Customer updatedCustomer) {\n\n        Customer existingCustomer = customerService.getCustomerById(id);\n        if (existingCustomer == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        // 1. 최상위 필드 업데이트\n        existingCustomer.setCustomertype(updatedCustomer.getCustomertype());\n        existingCustomer.setType(updatedCustomer.getType());\n        existingCustomer.setGroupname(updatedCustomer.getGroupname());\n        existingCustomer.setTurn(updatedCustomer.getTurn());\n        existingCustomer.setBatch(updatedCustomer.getBatch());\n        existingCustomer.setRegisterdate(updatedCustomer.getRegisterdate());\n        existingCustomer.setRegisterprice(updatedCustomer.getRegisterprice());\n        existingCustomer.setAdditional(updatedCustomer.getAdditional());\n        existingCustomer.setRegisterpath(updatedCustomer.getRegisterpath());\n        existingCustomer.setSpecialnote(updatedCustomer.getSpecialnote());\n        existingCustomer.setPrizewinning(updatedCustomer.getPrizewinning());\n        existingCustomer.setVotemachine(updatedCustomer.getVotemachine());\n\n        // 2. CustomerData 업데이트 (기본 생성되어 있으므로 null이 아님)\n        existingCustomer.getCustomerData().setName(updatedCustomer.getCustomerData().getName());\n        existingCustomer.getCustomerData().setPhone(updatedCustomer.getCustomerData().getPhone());\n        existingCustomer.getCustomerData().setResnumfront(updatedCustomer.getCustomerData().getResnumfront());\n        existingCustomer.getCustomerData().setResnumback(updatedCustomer.getCustomerData().getResnumback());\n        existingCustomer.getCustomerData().setEmail(updatedCustomer.getCustomerData().getEmail());\n\n        // 3. LegalAddress 업데이트\n        existingCustomer.getLegalAddress().setPostnumber(updatedCustomer.getLegalAddress().getPostnumber());\n        existingCustomer.getLegalAddress().setPost(updatedCustomer.getLegalAddress().getPost());\n        existingCustomer.getLegalAddress().setDetailaddress(updatedCustomer.getLegalAddress().getDetailaddress());\n\n        // 4. Postreceive 업데이트\n        existingCustomer.getPostreceive().setPostnumberreceive(updatedCustomer.getPostreceive().getPostnumberreceive());\n        existingCustomer.getPostreceive().setPostreceive(updatedCustomer.getPostreceive().getPostreceive());\n        existingCustomer.getPostreceive().setDetailaddressreceive(updatedCustomer.getPostreceive().getDetailaddressreceive());\n\n        // 5. Financial 업데이트\n        existingCustomer.getFinancial().setBankname(updatedCustomer.getFinancial().getBankname());\n        existingCustomer.getFinancial().setAccountnum(updatedCustomer.getFinancial().getAccountnum());\n        existingCustomer.getFinancial().setAccountholder(updatedCustomer.getFinancial().getAccountholder());\n\n        // 6. Deposits 업데이트\n        existingCustomer.getDeposits().setDepositdate(updatedCustomer.getDeposits().getDepositdate());\n        existingCustomer.getDeposits().setDepositammount(updatedCustomer.getDeposits().getDepositammount());\n\n        // 7. Responsible 업데이트 (null 체크)\n        if (updatedCustomer.getResponsible() != null) {\n            if (existingCustomer.getResponsible() == null) {\n                existingCustomer.setResponsible(new Responsible());\n            }\n            existingCustomer.getResponsible().setGeneralmanagement(updatedCustomer.getResponsible().getGeneralmanagement());\n            existingCustomer.getResponsible().setDivision(updatedCustomer.getResponsible().getDivision());\n            existingCustomer.getResponsible().setTeam(updatedCustomer.getResponsible().getTeam());\n            existingCustomer.getResponsible().setManagername(updatedCustomer.getResponsible().getManagername());\n        }\n\n        // 8. Dahim 업데이트\n        if (updatedCustomer.getDahim() != null) {\n            if (existingCustomer.getDahim() == null) {\n                existingCustomer.setDahim(new Dahim());\n            }\n            existingCustomer.getDahim().setDahimsisang(updatedCustomer.getDahim().getDahimsisang());\n            existingCustomer.getDahim().setDahimdate(updatedCustomer.getDahim().getDahimdate());\n            existingCustomer.getDahim().setDahimprepaid(updatedCustomer.getDahim().getDahimprepaid());\n            existingCustomer.getDahim().setDahimfirst(updatedCustomer.getDahim().getDahimfirst());\n            existingCustomer.getDahim().setDahimfirstpay(updatedCustomer.getDahim().getDahimfirstpay());\n            existingCustomer.getDahim().setDahimdate2(updatedCustomer.getDahim().getDahimdate2());\n            existingCustomer.getDahim().setDahimsource(updatedCustomer.getDahim().getDahimsource());\n            existingCustomer.getDahim().setDahimsecond(updatedCustomer.getDahim().getDahimsecond());\n            existingCustomer.getDahim().setDahimsecondpay(updatedCustomer.getDahim().getDahimsecondpay());\n            existingCustomer.getDahim().setDahimdate3(updatedCustomer.getDahim().getDahimdate3());\n            existingCustomer.getDahim().setDahimsum(updatedCustomer.getDahim().getDahimsum());\n        }\n\n        // 9. MGM 업데이트\n        if (updatedCustomer.getMgm() != null) {\n            if (existingCustomer.getMgm() == null) {\n                existingCustomer.setMgm(new MGM());\n            }\n            existingCustomer.getMgm().setMgmcompanyname(updatedCustomer.getMgm().getMgmcompanyname());\n            existingCustomer.getMgm().setMgmname(updatedCustomer.getMgm().getMgmname());\n            existingCustomer.getMgm().setMgminstitution(updatedCustomer.getMgm().getMgminstitution());\n            existingCustomer.getMgm().setMgmaccount(updatedCustomer.getMgm().getMgmaccount());\n        }\n\n        // 10. Firstemp 업데이트\n        if (updatedCustomer.getFirstemp() != null) {\n            if (existingCustomer.getFirstemp() == null) {\n                existingCustomer.setFirstemp(new Firstemp());\n            }\n            existingCustomer.getFirstemp().setFirstemptimes(updatedCustomer.getFirstemp().getFirstemptimes());\n            existingCustomer.getFirstemp().setFirstempdate(updatedCustomer.getFirstemp().getFirstempdate());\n        }\n\n        // 11. Secondemp 업데이트\n        if (updatedCustomer.getSecondemp() != null) {\n            if (existingCustomer.getSecondemp() == null) {\n                existingCustomer.setSecondemp(new Secondemp());\n            }\n            existingCustomer.getSecondemp().setSecondemptimes(updatedCustomer.getSecondemp().getSecondemptimes());\n            existingCustomer.getSecondemp().setSecondempdate(updatedCustomer.getSecondemp().getSecondempdate());\n        }\n\n        // 12. Meetingattend 업데이트\n        if (updatedCustomer.getMeetingattend() != null) {\n            if (existingCustomer.getMeetingattend() == null) {\n                existingCustomer.setMeetingattend(new Meetingattend());\n            }\n            existingCustomer.getMeetingattend().setFtofattend(updatedCustomer.getMeetingattend().getFtofattend());\n            existingCustomer.getMeetingattend().setSelfattend(updatedCustomer.getMeetingattend().getSelfattend());\n            existingCustomer.getMeetingattend().setBehalfattend(updatedCustomer.getMeetingattend().getBehalfattend());\n        }\n\n        // 13. Agenda 업데이트\n        if (updatedCustomer.getAgenda() != null) {\n            if (existingCustomer.getAgenda() == null) {\n                existingCustomer.setAgenda(new Agenda());\n            }\n            existingCustomer.getAgenda().setAgenda1(updatedCustomer.getAgenda().getAgenda1());\n            existingCustomer.getAgenda().setAgenda2_1(updatedCustomer.getAgenda().getAgenda2_1());\n            existingCustomer.getAgenda().setAgenda2_2(updatedCustomer.getAgenda().getAgenda2_2());\n            existingCustomer.getAgenda().setAgenda2_3(updatedCustomer.getAgenda().getAgenda2_3());\n            existingCustomer.getAgenda().setAgenda2_4(updatedCustomer.getAgenda().getAgenda2_4());\n            existingCustomer.getAgenda().setAgenda3(updatedCustomer.getAgenda().getAgenda3());\n            existingCustomer.getAgenda().setAgenda4(updatedCustomer.getAgenda().getAgenda4());\n            existingCustomer.getAgenda().setAgenda5(updatedCustomer.getAgenda().getAgenda5());\n            existingCustomer.getAgenda().setAgenda6(updatedCustomer.getAgenda().getAgenda6());\n            existingCustomer.getAgenda().setAgenda7(updatedCustomer.getAgenda().getAgenda7());\n            existingCustomer.getAgenda().setAgenda8(updatedCustomer.getAgenda().getAgenda8());\n            existingCustomer.getAgenda().setAgenda9(updatedCustomer.getAgenda().getAgenda9());\n            existingCustomer.getAgenda().setAgenda10(updatedCustomer.getAgenda().getAgenda10());\n        }\n\n        // 14. Attachments 업데이트 (첨부파일, 체크박스, 사은품 관련 등)\n        existingCustomer.getAttachments().setIsuploaded(updatedCustomer.getAttachments().getIsuploaded());\n        existingCustomer.getAttachments().setSealcertificateprovided(updatedCustomer.getAttachments().getSealcertificateprovided());\n        existingCustomer.getAttachments().setSelfsignatureconfirmationprovided(updatedCustomer.getAttachments().getSelfsignatureconfirmationprovided());\n        existingCustomer.getAttachments().setCommitmentletterprovided(updatedCustomer.getAttachments().getCommitmentletterprovided());\n        existingCustomer.getAttachments().setIdcopyprovided(updatedCustomer.getAttachments().getIdcopyprovided());\n        existingCustomer.getAttachments().setFreeoption(updatedCustomer.getAttachments().getFreeoption());\n        existingCustomer.getAttachments().setForfounding(updatedCustomer.getAttachments().getForfounding());\n        existingCustomer.getAttachments().setAgreement(updatedCustomer.getAttachments().getAgreement());\n        existingCustomer.getAttachments().setPreferenceattachment(updatedCustomer.getAttachments().getPreferenceattachment());\n        existingCustomer.getAttachments().setPrizeattachment(updatedCustomer.getAttachments().getPrizeattachment());\n        existingCustomer.getAttachments().setExemption7(updatedCustomer.getAttachments().getExemption7());\n        existingCustomer.getAttachments().setInvestmentfile(updatedCustomer.getAttachments().getInvestmentfile());\n        existingCustomer.getAttachments().setContract(updatedCustomer.getAttachments().getContract());\n        existingCustomer.getAttachments().setFileinfo(updatedCustomer.getAttachments().getFileinfo());\n        existingCustomer.getAttachments().setPrizename(updatedCustomer.getAttachments().getPrizename());\n        existingCustomer.getAttachments().setPrizedate(updatedCustomer.getAttachments().getPrizedate());\n\n        // 15. Cancel 업데이트 (해지 정보)\n        if (updatedCustomer.getCancel() != null) {\n            if (existingCustomer.getCancel() == null) {\n                existingCustomer.setCancel(new Cancel());\n            }\n            existingCustomer.getCancel().setCanceldate(updatedCustomer.getCancel().getCanceldate());\n            existingCustomer.getCancel().setRefunddate(updatedCustomer.getCancel().getRefunddate());\n            existingCustomer.getCancel().setRefundamount(updatedCustomer.getCancel().getRefundamount());\n        }\n\n        // 고객 저장 및 전체 재계산\n        Customer saved = customerService.saveCustomer(existingCustomer);\n        customerService.recalculateEverything(saved);\n\n        // 16. 만약 고객 분류가 \"x\" (해지)라면, 프론트엔드에서 전달된 cancelInfo를 함께 전달합니다.\n        // Customer 엔티티에 transient cancelInfo 필드가 추가되어 있다고 가정합니다.\n        if (\"x\".equalsIgnoreCase(saved.getCustomertype())) {\n            refundService.createRefundRecord(saved, updatedCustomer.getCancelInfo());\n        }\n        return ResponseEntity.ok(existingCustomer);\n    }\n\n\n    @GetMapping(\"/count/contracted\")\n    public ResponseEntity<Long> countContractedCustomers() {\n        long count = customerService.countContractedCustomers();\n        return ResponseEntity.ok(count);\n    }\n\n    @GetMapping(\"/count/fullypaid\")\n    public ResponseEntity<Long> countFullyPaidCustomers() {\n        long count = customerService.countFullyPaidCustomers();\n        return ResponseEntity.ok(count);\n    }\n}\n",
            "DepositExcelController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.service.DepositExcelService;\nimport com.audora.lotting_be.service.DepositHistoryService;\nimport com.audora.lotting_be.util.FileCache;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.UrlResource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\nimport org.springframework.web.util.UriUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.StandardCopyOption;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\n\n@RestController\n@RequestMapping(\"/api/deposithistory/excel\")\npublic class DepositExcelController {\n\n    @Autowired\n    private DepositExcelService depositExcelService;\n    @Autowired\n    private DepositHistoryService depositHistoryService;\n    /**\n     * 엑셀 파일 업로드 엔드포인트\n     * 파일을 받으면 DepositExcelService를 호출하여 파싱 및 DB 저장을 진행하고,\n     * SSE를 통해 진행 상황을 클라이언트에 전달합니다.\n     *\n     * @param file 업로드된 엑셀 파일\n     * @return 진행 상황을 전달하는 SseEmitter\n     */\n    @PostMapping(value = \"/upload\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public SseEmitter uploadDepositHistoryExcel(@RequestParam(\"file\") MultipartFile file) {\n        SseEmitter emitter = new SseEmitter(3000000L); // 최대 3000초(50분) timeout\n        CompletableFuture.runAsync(() -> {\n            try {\n                depositExcelService.processDepositExcelFileWithProgress(file, emitter);\n            } catch (IOException e) {\n                try {\n                    emitter.send(SseEmitter.event().name(\"error\").data(e.getMessage()));\n                } catch (Exception ex) {\n                    // 추가 로깅 처리 가능\n                }\n                emitter.completeWithError(e);\n            }\n        });\n        return emitter;\n    }\n\n    /**\n     * [신규] 모든 DepositHistory 데이터를 depformat.xlsx 템플릿에 채워서 파일로 생성하고,\n     * 진행 상황을 SSE로 전달합니다.\n     *\n     * 프론트에서 GET /api/deposithistory/excel/download/progress 로 호출하면,\n     * 최종적으로 고유 fileId가 SSE 이벤트 complete로 전달됩니다.\n     */\n    @GetMapping(value = \"/download/progress\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public SseEmitter downloadDepositHistoryExcelProgress() {\n        SseEmitter emitter = new SseEmitter(3000000L); // 최대 3000초 timeout\n        CompletableFuture.runAsync(() -> {\n            File tempFile = null;\n            try {\n                // 모든 DepositHistory 조회\n                List<DepositHistory> depositHistories = depositHistoryService.getAllDepositHistories();\n                if (depositHistories == null || depositHistories.isEmpty()) {\n                    emitter.send(SseEmitter.event().name(\"error\").data(\"No deposit histories found.\"));\n                    emitter.complete();\n                    return;\n                }\n                // 템플릿 파일 로드 (excel_templates/depformat.xlsx)\n                ClassPathResource templateResource = new ClassPathResource(\"excel_templates/depformat.xlsx\");\n                if (!templateResource.exists()) {\n                    emitter.send(SseEmitter.event().name(\"error\").data(\"Template file not found.\"));\n                    emitter.complete();\n                    return;\n                }\n                // 임시 파일 복사\n                tempFile = Files.createTempFile(\"depformat-\", \".xlsx\").toFile();\n                try (InputStream is = templateResource.getInputStream()) {\n                    Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n                }\n                // 템플릿에 depositHistory 데이터를 기록\n                depositExcelService.fillDepFormat(tempFile, depositHistories);\n                // 파일 생성 완료 후 고유 식별자 생성 및 캐시에 저장\n                String fileId = UUID.randomUUID().toString();\n                FileCache.put(fileId, tempFile);\n                emitter.send(SseEmitter.event().name(\"complete\").data(fileId));\n                emitter.complete();\n            } catch (Exception e) {\n                try {\n                    emitter.send(SseEmitter.event().name(\"error\").data(e.getMessage()));\n                } catch (Exception ex) {\n                    // 추가 로깅 가능\n                }\n                emitter.completeWithError(e);\n                if (tempFile != null && tempFile.exists()) {\n                    tempFile.delete();\n                }\n            }\n        });\n        return emitter;\n    }\n\n    /**\n     * [신규] fileId를 이용하여 생성된 DepositHistory 엑셀 파일을 다운로드합니다.\n     */\n    @GetMapping(\"/download/file\")\n    public ResponseEntity<Resource> downloadDepositExcelFile(@RequestParam(\"fileId\") String fileId) {\n        try {\n            File tempFile = FileCache.get(fileId);\n            if (tempFile == null || !tempFile.exists()) {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n            }\n            Resource resource = new UrlResource(tempFile.toURI());\n            String encodedFilename = UriUtils.encode(\"deposit_histories.xlsx\", StandardCharsets.UTF_8);\n            MediaType mediaType = MediaType.parseMediaType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n            // 파일 다운로드 후 캐시에서 제거 (원하는 경우)\n            FileCache.remove(fileId);\n            return ResponseEntity.ok()\n                    .contentType(mediaType)\n                    .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                    .body(resource);\n        } catch (MalformedURLException e) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n        }\n    }\n}\n",
            "DepositHistoryController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.DepositHistoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.*;\n\n// 기존 @RestController, @RequestMapping(\"/deposit\") 그대로 유지\n@RestController\n@RequestMapping(\"/deposit\") // 입금내역 관련 엔드포인트\npublic class DepositHistoryController {\n\n    @Autowired\n    private DepositHistoryService depositHistoryService;\n\n    @Autowired\n    private CustomerService customerService;\n\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n\n    // [GET] 특정 고객의 입금내역 조회\n    // URL 예: GET /deposit/customer/123\n    @GetMapping(\"/customer/{userId}\")\n    public ResponseEntity<List<DepositHistory>> getDepositHistoriesByCustomerId(@PathVariable Integer userId) {\n        Customer customer = customerService.getCustomerById(userId);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        List<DepositHistory> depositHistories = customer.getDepositHistories();\n        return ResponseEntity.ok(depositHistories);\n    }\n\n    // [GET] 단일 입금내역 조회\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<DepositHistory> getDepositHistoryById(@PathVariable Long id) {\n        Optional<DepositHistory> depositHistoryOpt = depositHistoryRepository.findById(id);\n        return depositHistoryOpt.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    // [POST] 입금내역 생성\n    @PostMapping\n    public ResponseEntity<DepositHistory> createDepositHistory(@RequestBody DepositHistory depositHistory) {\n        DepositHistory saved = depositHistoryService.createDepositHistory(depositHistory);\n        return ResponseEntity.ok(saved);\n    }\n\n    // [PUT] 입금내역 수정\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<DepositHistory> updateDepositHistory(\n            @PathVariable Long id,\n            @RequestBody DepositHistory updatedDepositHistory) {\n        DepositHistory updated = depositHistoryService.updateDepositHistory(id, updatedDepositHistory);\n        return ResponseEntity.ok(updated);\n    }\n\n    // [DELETE] 입금내역 삭제\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteDepositHistory(@PathVariable Long id) {\n        depositHistoryService.deleteDepositHistory(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    // ─────────────────────────────────────────────────────\n    // 새로운 엔드포인트: 1차 ~ 10차의 총 입금액(charged)과 미납액(sum) 리턴\n    // ─────────────────────────────────────────────────────\n    @GetMapping(\"/phase-summary\")\n    public ResponseEntity<List<PhaseSummaryDTO>> getPhaseSummaries() {\n        List<Customer> customers = customerService.getAllCustomersWithPhases();\n\n        Map<Integer, PhaseSummaryDTO> summaryMap = new HashMap<>();\n        for (int phase = 1; phase <= 10; phase++) {\n            summaryMap.put(phase, new PhaseSummaryDTO(phase, 0L, 0L));\n        }\n\n        for (Customer customer : customers) {\n            if (customer.getPhases() != null) {\n                for (Phase phase : customer.getPhases()) {\n                    Integer phaseNo = phase.getPhaseNumber();\n                    if (phaseNo != null && phaseNo >= 1 && phaseNo <= 10) {\n                        PhaseSummaryDTO dto = summaryMap.get(phaseNo);\n                        dto.setTotalDeposited(dto.getTotalDeposited() + (phase.getCharged() != null ? phase.getCharged() : 0L));\n                        dto.setTotalUnpaid(dto.getTotalUnpaid() + (phase.getSum() != null ? phase.getSum() : 0L));\n                    }\n                }\n            }\n        }\n\n        List<PhaseSummaryDTO> summaries = new ArrayList<>(summaryMap.values());\n        summaries.sort(Comparator.comparingInt(PhaseSummaryDTO::getPhaseNumber));\n        return ResponseEntity.ok(summaries);\n    }\n\n    public static class PhaseSummaryDTO {\n        private int phaseNumber;\n        private Long totalDeposited;\n        private Long totalUnpaid;\n\n        public PhaseSummaryDTO() {\n        }\n\n        public PhaseSummaryDTO(int phaseNumber, Long totalDeposited, Long totalUnpaid) {\n            this.phaseNumber = phaseNumber;\n            this.totalDeposited = totalDeposited;\n            this.totalUnpaid = totalUnpaid;\n        }\n\n        public int getPhaseNumber() {\n            return phaseNumber;\n        }\n\n        public void setPhaseNumber(int phaseNumber) {\n            this.phaseNumber = phaseNumber;\n        }\n\n        public Long getTotalDeposited() {\n            return totalDeposited;\n        }\n\n        public void setTotalDeposited(Long totalDeposited) {\n            this.totalDeposited = totalDeposited;\n        }\n\n        public Long getTotalUnpaid() {\n            return totalUnpaid;\n        }\n\n        public void setTotalUnpaid(Long totalUnpaid) {\n            this.totalUnpaid = totalUnpaid;\n        }\n    }\n}\n",
            "DepositListController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.service.DepositHistoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/depositlist\") // 입금 여부 한눈에 보는 페이지 전용\npublic class DepositListController {\n\n    private final DepositHistoryService depositHistoryService;\n\n    @Autowired\n    public DepositListController(DepositHistoryService depositHistoryService) {\n        this.depositHistoryService = depositHistoryService;\n    }\n\n    /**\n     * 모든 DepositHistory를 반환\n     */\n    @GetMapping\n    public ResponseEntity<List<DepositHistory>> getAllDepositHistory() {\n        List<DepositHistory> depositHistories = depositHistoryService.getAllDepositHistories();\n        return ResponseEntity.ok(depositHistories);\n    }\n}\n",
            "FeeController.java": "// FeeController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.service.FeeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/fees\")\npublic class FeeController {\n\n    @Autowired\n    private FeeService feeService;\n\n    /**\n     * 새로운 Fee 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    @PostMapping\n    public ResponseEntity<Fee> createFee(@RequestBody Fee fee) {\n        Fee createdFee = feeService.createFee(fee);\n        return ResponseEntity.ok(createdFee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우)\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Fee> getFeeById(@PathVariable Long id) {\n        Fee fee = feeService.getFeeById(id);\n        if (fee != null) {\n            return ResponseEntity.ok(fee);\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    @GetMapping\n    public ResponseEntity<List<Fee>> getAllFees() {\n        List<Fee> fees = feeService.getAllFees();\n        return ResponseEntity.ok(fees);\n    }\n}\n",
            "FileController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.payload.response.MessageResponse;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.ExcelService;\nimport com.audora.lotting_be.util.FileCache;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.UrlResource;\nimport org.springframework.http.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\nimport org.springframework.web.util.UriUtils;\n\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.*;\nimport java.util.Base64;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\n\n@RestController\n@RequestMapping(\"/files\")\npublic class FileController {\n\n    @Value(\"${file.upload-dir}\")\n    private String uploadDir;\n\n    // CustomerService 주입\n    @Autowired\n    private CustomerService customerService;\n\n    // 새로 추가된 ExcelService 주입\n    @Autowired\n    private ExcelService excelService;\n\n    /**\n     * 파일 업로드 예시 메서드\n     */\n    @PostMapping(\"/upload\")\n    public ResponseEntity<?> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            String fileName = Paths.get(file.getOriginalFilename()).getFileName().toString();\n            Path path = Paths.get(uploadDir).resolve(fileName);\n            Files.createDirectories(path.getParent());\n            Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);\n            return ResponseEntity.ok(fileName); // 파일명 반환\n        } catch (IOException e) {\n            return ResponseEntity.status(500).body(\"Could not upload file: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * 파일 다운로드 예시 메서드\n     */\n    @GetMapping(\"/download\")\n    public ResponseEntity<Resource> downloadFile(@RequestParam(\"id\") Long id,\n                                                 @RequestParam(\"filename\") String filename) {\n        try {\n            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();\n            Resource resource = new org.springframework.core.io.UrlResource(filePath.toUri());\n            if (!resource.exists()) {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n            }\n\n            String contentType = Files.probeContentType(filePath);\n            if (contentType == null) {\n                // 확장자별 MIME 타입 지정\n                String extension = com.google.common.io.Files.getFileExtension(filePath.toString());\n                switch (extension.toLowerCase()) {\n                    case \"pdf\":\n                        contentType = \"application/pdf\";\n                        break;\n                    case \"jpg\":\n                    case \"jpeg\":\n                        contentType = \"image/jpeg\";\n                        break;\n                    case \"png\":\n                        contentType = \"image/png\";\n                        break;\n                    default:\n                        contentType = \"application/octet-stream\";\n                }\n            }\n\n            String encodedFileName = UriUtils.encode(resource.getFilename(), StandardCharsets.UTF_8);\n            return ResponseEntity.ok()\n                    .contentType(MediaType.parseMediaType(contentType))\n                    .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFileName)\n                    .body(resource);\n\n        } catch (MalformedURLException e) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n    }\n\n    /**\n     * 파일 삭제 예시 메서드\n     */\n    @DeleteMapping(\"/delete\")\n    public ResponseEntity<?> deleteFile(@RequestParam(\"filename\") String filename) {\n        try {\n            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();\n            if (Files.exists(filePath)) {\n                Files.delete(filePath);\n                return ResponseEntity.ok(\"파일이 성공적으로 삭제되었습니다.\");\n            } else {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"파일을 찾을 수 없습니다.\");\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"파일 삭제 중 오류가 발생했습니다: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * [신규] /format1/{id} 로 GET 요청이 들어올 때,\n     * - format1.xlsx 복사(TempFile)\n     * - {id}로 고객 정보 조회 & 엑셀 특정 셀들에 채워넣기 (ExcelService로 위임)\n     * - 완성본을 다운로드 응답 후, 복사본 파일은 삭제\n     * ------------------------------------------------------------------------\n     */\n    @GetMapping(\"/format1/{id}\")\n    public ResponseEntity<Resource> generateFormat1AndDownload(@PathVariable(\"id\") Integer id) {\n        // 1) 고객 조회\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n\n        // 2) 템플릿 파일을 ClassPathResource로 불러오기\n        ClassPathResource templateResource = new ClassPathResource(\"excel_templates/format1.xlsx\");\n        if (!templateResource.exists()) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 3) 임시 파일 복사\n        File tempFile;\n        try {\n            tempFile = Files.createTempFile(\"format1-\", \".xlsx\").toFile();\n            try (InputStream is = templateResource.getInputStream()) {\n                Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 4) ExcelService로 위임하여 엑셀에 데이터 기입\n        try {\n            excelService.fillFormat1(tempFile, customer);\n        } catch (IOException e) {\n            // 작업 실패 시 tempFile 삭제 후 에러 반환\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        // 5) tempFile -> 메모리에 올려 Resource로 변환, tempFile 삭제 후 반환\n        ByteArrayResource resource;\n        try {\n            byte[] fileBytes = Files.readAllBytes(tempFile.toPath());\n            resource = new ByteArrayResource(fileBytes);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        tempFile.delete();\n\n        String downloadFilename = \"일반 신청서.xlsx\";\n        String encodedFilename = UriUtils.encode(downloadFilename, StandardCharsets.UTF_8);\n\n        MediaType mediaType = MediaType.parseMediaType(\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n\n        return ResponseEntity.ok()\n                .contentType(mediaType)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                .body(resource);\n    }\n\n    @GetMapping(\"/format2/{id}\")\n    public ResponseEntity<Resource> generateFormat2AndDownload(@PathVariable(\"id\") Integer id) {\n        // 1) 고객 조회\n        Customer customer = customerService.getCustomerById(id);\n        if (customer == null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n\n        // 2) 템플릿 파일을 ClassPathResource로 불러오기\n        ClassPathResource templateResource = new ClassPathResource(\"excel_templates/format2.xlsx\");\n        if (!templateResource.exists()) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 3) 임시 파일 복사\n        File tempFile;\n        try {\n            tempFile = Files.createTempFile(\"format2-\", \".xlsx\").toFile();\n            try (InputStream is = templateResource.getInputStream()) {\n                Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n            }\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 4) ExcelService로 위임하여 엑셀에 데이터 기입\n        try {\n            excelService.fillFormat2(tempFile, customer);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        // 5) 메모리에 올려서 다운로드 응답\n        ByteArrayResource resource;\n        try {\n            byte[] fileBytes = Files.readAllBytes(tempFile.toPath());\n            resource = new ByteArrayResource(fileBytes);\n        } catch (IOException e) {\n            tempFile.delete();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);\n        }\n\n        // 임시 파일 삭제\n        tempFile.delete();\n\n        String downloadFilename = \"일반 부속 서류.xlsx\";\n        String encodedFilename = UriUtils.encode(downloadFilename, StandardCharsets.UTF_8);\n\n        MediaType mediaType = MediaType.parseMediaType(\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n\n        return ResponseEntity.ok()\n                .contentType(mediaType)\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                .body(resource);\n    }\n\n    @PostMapping(value = \"/uploadExcelWithProgress\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public SseEmitter uploadExcelWithProgress(@RequestParam(\"file\") MultipartFile file) {\n        SseEmitter emitter = new SseEmitter(3000000L);\n        CompletableFuture.runAsync(() -> {\n            try {\n                excelService.processExcelFileWithProgress(file, emitter);\n                emitter.send(SseEmitter.event().name(\"complete\").data(\"Parsing complete\"));\n                emitter.complete();\n            } catch (Exception e) {\n                try {\n                    emitter.send(SseEmitter.event().name(\"error\").data(e.getMessage()));\n                } catch (Exception ex) {\n                    // 로그 처리 등\n                }\n                emitter.completeWithError(e);\n            }\n        });\n        return emitter;\n    }\n\n    // (a) SSE 엔드포인트 : 파일 생성 및 진행 상황 전달\n    @GetMapping(value = \"/regfiledownload/progress\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public SseEmitter generateRegFile() {\n        SseEmitter emitter = new SseEmitter(3000000L);\n        CompletableFuture.runAsync(() -> {\n            File tempFile = null;\n            try {\n                // 고객 목록 조회 (phases 등 미리 초기화한 메서드 사용)\n                List<Customer> customers = customerService.getAllCustomersWithPhases();\n                if (customers == null || customers.isEmpty()) {\n                    emitter.send(SseEmitter.event().name(\"error\").data(\"No customers found.\"));\n                    emitter.complete();\n                    return;\n                }\n\n                // 템플릿 파일 로드\n                ClassPathResource templateResource = new ClassPathResource(\"excel_templates/regformat.xlsx\");\n                if (!templateResource.exists()) {\n                    emitter.send(SseEmitter.event().name(\"error\").data(\"Template file not found.\"));\n                    emitter.complete();\n                    return;\n                }\n\n                // 템플릿 파일을 임시 파일로 복사\n                tempFile = Files.createTempFile(\"regformat-\", \".xlsx\").toFile();\n                try (InputStream is = templateResource.getInputStream()) {\n                    Files.copy(is, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n                }\n\n                // 엑셀 템플릿에 고객 데이터 기록 (진행 상황 전달)\n                excelService.fillRegFormat(tempFile, customers, emitter);\n\n                // 파일 생성 완료 후 고유 식별자 생성 및 캐시에 저장\n                String fileId = UUID.randomUUID().toString();\n                FileCache.put(fileId, tempFile);\n\n                emitter.send(SseEmitter.event().name(\"complete\").data(fileId));\n                emitter.complete();\n            } catch (Exception e) {\n                try {\n                    emitter.send(SseEmitter.event().name(\"error\").data(e.getMessage()));\n                } catch (Exception ex) {\n                    // 무시\n                }\n                emitter.completeWithError(e);\n                if (tempFile != null && tempFile.exists()) {\n                    tempFile.delete();\n                }\n            }\n        });\n        return emitter;\n    }\n\n    // (b) 파일 다운로드 엔드포인트 : fileId를 이용하여 실제 파일 전달\n    @GetMapping(\"/regfiledownload/file\")\n    public ResponseEntity<Resource> downloadGeneratedRegFile(@RequestParam(\"fileId\") String fileId) {\n        try {\n            File tempFile = FileCache.get(fileId);\n            if (tempFile == null || !tempFile.exists()) {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n            }\n            Resource resource = new UrlResource(tempFile.toURI());\n            String encodedFilename = UriUtils.encode(\"regformat_download.xlsx\", StandardCharsets.UTF_8);\n            MediaType mediaType = MediaType.parseMediaType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n\n            // 파일 다운로드 후 캐시에서 제거 (원하는 경우)\n            FileCache.remove(fileId);\n\n            return ResponseEntity.ok()\n                    .contentType(mediaType)\n                    .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename*=UTF-8''\" + encodedFilename)\n                    .body(resource);\n        } catch (MalformedURLException e) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n        }\n    }\n\n}\n",
            "LateFeesController.java": "// src/main/java/com/audora/lotting_be/controller/LateFeesController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/latefees\")\npublic class LateFeesController {\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * GET /latefees\n     * 회원의 연체료 정보를 조회합니다.\n     *\n     * @param name   (선택 사항) 회원 이름\n     * @param number (선택 사항) 회원 번호\n     * @return LateFeeInfo 리스트\n     */\n    @GetMapping\n    public List<LateFeeInfo> getLateFees(\n            @RequestParam(required = false) String name,\n            @RequestParam(required = false) String number) {\n        return customerService.getLateFeeInfos(name, number);\n    }\n}\n",
            "PhaseController.java": "package com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.payload.request.PhaseModificationRequest;\nimport com.audora.lotting_be.service.CustomerService;\nimport com.audora.lotting_be.service.PhaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/phases\")\npublic class PhaseController {\n\n    @Autowired\n    private PhaseService phaseService;\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * Phase 업데이트 엔드포인트 (전체 필드 업데이트)\n     * PUT /phases/{id}\n     */\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Phase> updatePhase(@PathVariable Long id, @RequestBody Phase phaseDetails) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        if (!optionalPhase.isPresent()) {\n            return ResponseEntity.notFound().build();\n        }\n        Phase phase = optionalPhase.get();\n        phase.setPlanneddate(phaseDetails.getPlanneddate());\n        phase.setFullpaiddate(phaseDetails.getFullpaiddate());\n        phase.setCharge(phaseDetails.getCharge());\n        phase.setDiscount(phaseDetails.getDiscount());\n        phase.setExemption(phaseDetails.getExemption());\n        phase.setService(phaseDetails.getService());\n        phase.setMove(phaseDetails.getMove());\n        phase.setFeesum(phaseDetails.getFeesum());\n        phase.setCharged(phaseDetails.getCharged());\n        phase.setSum(phaseDetails.getSum());\n\n        Phase updatedPhase = phaseService.savePhase(phase);\n\n        // 변경된 Phase를 바탕으로 고객의 상태(Status) 업데이트\n        Customer customer = updatedPhase.getCustomer();\n        customerService.updateStatusFields(customer);\n        customerService.saveCustomer(customer);\n\n        return ResponseEntity.ok(updatedPhase);\n    }\n\n    /**\n     * Phase 조회 엔드포인트\n     * GET /phases/{id}\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Phase> getPhaseById(@PathVariable Long id) {\n        Optional<Phase> optionalPhase = phaseService.getPhaseById(id);\n        return optionalPhase.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    /**\n     * @param customerId  고객 id\n     * @param phaseNumber 수정할 phase 번호 (예: 1, 2, …)\n     * @param request     수정할 필드들을 담은 요청 DTO\n     * @return 수정된 Phase 객체\n     */\n    @PutMapping(\"/customer/{customerId}/phase/{phaseNumber}/modify\")\n    public ResponseEntity<Phase> modifyPhaseByCustomerAndPhaseNumber(@PathVariable Integer customerId,\n                                                                     @PathVariable Integer phaseNumber,\n                                                                     @RequestBody PhaseModificationRequest request) {\n        // 1. 고객 조회\n        Customer customer = customerService.getCustomerById(customerId);\n        if (customer == null) {\n            return ResponseEntity.notFound().build();\n        }\n        // 2. 해당 고객의 phase 목록 중 phaseNumber에 해당하는 phase 찾기\n        Phase phase = null;\n        if (customer.getPhases() != null) {\n            phase = customer.getPhases().stream()\n                    .filter(p -> p.getPhaseNumber() != null && p.getPhaseNumber().equals(phaseNumber))\n                    .findFirst().orElse(null);\n        }\n        if (phase == null) {\n            return ResponseEntity.notFound().build();\n        }\n        // 3. 수정 허용 필드 업데이트\n        phase.setCharge(request.getCharge());\n        phase.setService(request.getService());\n        phase.setDiscount(request.getDiscount());\n        phase.setExemption(request.getExemption());\n        phase.setMove(request.getMove());\n\n        // 4. 전체 재계산 실행하여 납입금액, 대출/자납 관련 금액 등을 다시 계산\n        customerService.recalculateEverything(customer);\n\n        // 5. 수정된 phase 반환\n        return ResponseEntity.ok(phase);\n    }\n}\n",
            "RefundController.java": "// src/main/java/com/audora/lotting_be/controller/RefundController.java\npackage com.audora.lotting_be.controller;\n\nimport com.audora.lotting_be.service.RefundService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\n@RestController\n@RequestMapping(\"/api/refunds\")\npublic class RefundController {\n\n    @Autowired\n    private RefundService refundService;\n\n    /**\n     * 엑셀 파일을 업로드 받아 환불정보를 DB에 저장하고 SSE로 진행상황을 반환합니다.\n     * URL: POST /api/refunds/excel/upload\n     * 요청 파라미터: file (MultipartFile)\n     */\n    @PostMapping(value = \"/excel/upload\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public SseEmitter uploadRefundExcel(@RequestParam(\"file\") MultipartFile file) {\n        return refundService.uploadRefundExcelFileWithProgress(file, new SseEmitter(3000000L));\n    }\n\n    // 필요시 추가: 환불정보 다운로드 등의 추가 엔드포인트 구현 가능\n}\n"
        }
    },
    "model": {
        "__files__": {
            "codes.py": null,
            "directory_structure.json": null
        },
        "customer": {
            "__files__": {
                "Attachments.java": "// Attachments.java\npackage com.audora.lotting_be.model.customer;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Attachments {\n    private Boolean isuploaded; // 파일 제출했는지 여부\n    private String fileinfo; // 파일 주소, 이름, 확장자\n\n    private Boolean exemption7; // 7차 면제\n    private Boolean investmentfile; //출자금\n    private Boolean contract; //지산 A동 계약서\n    private Boolean agreement; //총회동의서\n\n    private Boolean sealcertificateprovided; // 인감증명서 제출 여부\n    private Boolean selfsignatureconfirmationprovided; // 본인서명확인서 제출 여부\n    private Boolean idcopyprovided; // 신분증 사본 제출 여부\n    private Boolean commitmentletterprovided; // 확약서 제출 여부\n    private Boolean forfounding; //창준위용 제출여부\n    private Boolean freeoption; //무상옵션 제출여부\n    private Boolean preferenceattachment; //선호도조사 제출여부\n    private Boolean generalmeetingconsentformprovided; // 총회 동의서 제출 여부\n    private Boolean prizeattachment; // 사은품 제출 여부\n\n    private String prizename; //사은품명 *새로 추가한 항목\n    private LocalDate prizedate; //사은품지급일자 *새로 추가한 항목\n\n}\n",
                "Customer.java": "// src/main/java/com/audora/lotting_be/model/customer/Customer.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.audora.lotting_be.model.customer.minor.*;\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Map;\n\n@Entity\n@Data\n@EqualsAndHashCode(exclude = \"status\")\npublic class Customer {\n    @Id\n    private Integer id; // 관리번호\n\n    private String customertype; // 분류(회원)\n    private String type;         // 타입\n    private String groupname;    // 군\n    private String turn;         // 순번\n    private String temptype;     //임시동호\n    private String batch;        // 가입차순\n    private LocalDate registerdate; // 가입일자\n    private Long registerprice;     // 가입가\n    private String additional;      // 비고\n    private String registerpath;    // 가입경로\n    private String specialnote;     // 특이사항\n    private String prizewinning;    // 경품당첨\n    private String votemachine; //투표기기\n\n    @Embedded\n    private CustomerData customerData = new CustomerData(); // 가입자\n\n    @Embedded\n    private LegalAddress legalAddress = new LegalAddress();   // 법정주소\n\n    @Embedded\n    private Postreceive postreceive = new Postreceive();      // 우편물 수령주소\n\n    @Embedded\n    private Financial financial = new Financial();            // 금융기관\n\n    @Embedded\n    private Deposit deposits = new Deposit();                 // 예약금\n\n    @Embedded\n    private Attachments attachments = new Attachments();        // 부속서류\n\n    @Embedded\n    private Cancel cancel=new Cancel();                       //해약\n\n    // 기존 대출/자납 기록용 loan 필드\n    @Embedded\n    private Loan loan = new Loan();                           // 대출, 자납\n\n    @Embedded\n    private Responsible responsible = new Responsible();      // 담당\n\n    @Embedded\n    private Dahim dahim = new Dahim();                        // 다힘\n\n    @Embedded\n    private MGM mgm = new MGM();                              // MGM\n\n    @Embedded\n    private Firstemp firstemp = new Firstemp();               // 1차(직원)\n\n    @Embedded\n    private Secondemp secondemp = new Secondemp();            // 2차\n\n    @Embedded\n    private Meetingattend meetingattend = new Meetingattend();  // 총회참석여부\n\n    @Embedded\n    private Agenda agenda = new Agenda();        // 안건\n\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<Phase> phases; // n차\n\n    @OneToOne(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private Status status; // 현 상태\n\n    // 여러 입금내역\n    @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n    @JsonManagedReference(value = \"customer-depositHistories\")\n    private List<DepositHistory> depositHistories;\n\n    @Transient\n    private Map<String, Object> cancelInfo;\n\n    public Map<String, Object> getCancelInfo() {\n        return cancelInfo;\n    }\n\n    public void setCancelInfo(Map<String, Object> cancelInfo) {\n        this.cancelInfo = cancelInfo;\n    }\n}\n",
                "DepositHistory.java": "package com.audora.lotting_be.model.customer;\n\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Data\npublic class DepositHistory {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // 거래일시\n    private LocalDateTime transactionDateTime;\n\n    // 적요\n    private String description;\n\n    // 기재내용 (예: 고객명 + 상태)\n    private String details;\n\n    // 계약자 (고객명 등)\n    private String contractor;\n\n    // 찾으신금액 (예: 다시 뽑은 금액)\n    private Long withdrawnAmount;\n\n    // 맡기신금액 (입금액)\n    private Long depositAmount;\n\n    // 거래후 잔액 (계산된 잔액 등, 우선 단순 기재)\n    private Long balanceAfter;\n\n    // 취급점 (은행/지점)\n    private String branch;\n\n    // 계좌 (알파벳 단축어 등)\n    private String account;\n\n    // 1~10차 입금여부 (기존 depositPhaseN 필드들)\n    // \"1\": 이번 입금에서 해당 차수에 '처음' 돈이 들어감\n    // \"0\": 이번 입금에서 해당 차수에 '추가' 돈이 들어감\n    // null 또는 \"\" : 이번 입금에서 해당 차수에 분배되지 않음\n    private String depositPhase1;\n    private String depositPhase2;\n    private String depositPhase3;\n    private String depositPhase4;\n    private String depositPhase5;\n    private String depositPhase6;\n    private String depositPhase7;\n    private String depositPhase8;\n    private String depositPhase9;\n    private String depositPhase10;\n\n    // 대출/자납 여부: \"o\" = 대출/자납 입금, 아니면 일반 입금\n    private String loanStatus;\n\n    // 대출 일자\n    private LocalDate loanDate;\n\n    // 비고 (메모)\n    private String remarks;\n\n    // ★ [임베디드] 대출/자납 상세 정보\n    @Embedded\n    @AttributeOverrides({\n            @AttributeOverride(name = \"loandate\", column = @Column(name = \"loan_details_loandate\")),\n            @AttributeOverride(name = \"loanbank\", column = @Column(name = \"loan_details_loanbank\")),\n            @AttributeOverride(name = \"loanammount\", column = @Column(name = \"loan_details_loanammount\")),\n            @AttributeOverride(name = \"selfdate\", column = @Column(name = \"loan_details_selfdate\")),\n            @AttributeOverride(name = \"selfammount\", column = @Column(name = \"loan_details_selfammount\")),\n            @AttributeOverride(name = \"loanselfsum\", column = @Column(name = \"loan_details_loanselfsum\")),\n            @AttributeOverride(name = \"loanselfcurrent\", column = @Column(name = \"loan_details_loanselfcurrent\"))\n    })\n    private Loan loanDetails;\n\n    // ★ [신규] 어느 phase에 얼마를 분배할지 지정 (대출/자납용)\n    @ElementCollection\n    @CollectionTable(name = \"deposit_history_target_phases\",\n            joinColumns = @JoinColumn(name = \"deposit_history_id\"))\n    @Column(name = \"target_phase\")\n    private List<Integer> targetPhases;\n\n    // ★ [신규] 첫 번째 대출이면 \"1\", 두 번째 이상이면 \"0\"\n    private String loanRecord;\n\n    // ★ [신규] 첫 번째 자납이면 \"1\", 두 번째 이상이면 \"0\"\n    private String selfRecord;\n\n    // DepositHistory는 하나의 고객에 종속됨\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference(value = \"customer-depositHistories\")\n    private Customer customer;\n\n    private String allocationDetail; //기록용\n}\n",
                "Phase.java": "package com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class Phase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber;      // 차수\n    private LocalDate planneddate;      // 예정일자\n    private String planneddateString;   // 원래 예정일자 (문자열)\n    private LocalDate fullpaiddate;     // 완납일자\n    private Long charge;              // 부담금 (원금)\n    private Long discount;            // 할인액 (실제 납부액에서는 차감)\n    private Long exemption;           // 면제금액\n    private Long service;             // 업무대행비\n    private Long feesum;              // 총 부담금 = charge + service - exemption\n    private String move;//이동\n    private Long charged;           // 입금(Deposit)으로 지급된 금액 (할인액 반영)\n    private Long loanCharged;       // 대출/자납으로 지급된 금액 (할인액 무시; 인정금액)\n    private Long sum;               // 미납금 = (feesum - discount) - charged\n\n    @ManyToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                "Status.java": "// Status.java\npackage com.audora.lotting_be.model.customer;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n@Entity\n@Data\n@EqualsAndHashCode(exclude = \"customer\") // customer 필드 제외\npublic class Status {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Long exemptionsum; // 총면제금액\n    private Long unpaidammout; // 미납금액\n    private String unpaidphase; // 미납차순 (1,2,3,...)\n    private Long prepaidammount; // 기납부금액\n    private Long ammountsum; // 1~n차 납입총액\n    private Long percent40; // 40%\n\n    // 새로 추가된 필드들\n    private Long exceedamount;      // 초과된 예약금(입금) 금액\n    private Long loanExceedAmount;  // 초과된 대출/자납 금액\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n"
            },
            "minor": {
                "__files__": {
                    "Agenda.java": "package com.audora.lotting_be.model.customer.minor;\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Agenda {\n\n    private String agenda1;     // 제1호\n    private String agenda2_1;   // 제2-1호\n    private String agenda2_2;   // 제2-2호\n    private String agenda2_3;   // 제2-3호\n    private String agenda2_4;   // 제2-4호\n    private String agenda3;     // 제3호\n    private String agenda4;     // 제4호\n    private String agenda5;     // 제5호\n    private String agenda6;     // 제6호\n    private String agenda7;     // 제7호\n    private String agenda8;     // 제8호\n    private String agenda9;     // 제9호\n    private String agenda10;    // 제10호\n\n    @OneToOne\n    @JoinColumn(name = \"customer_id\")\n    @JsonBackReference\n    private Customer customer;\n}\n",
                    "Cancel.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Cancel {\n\n    private LocalDate canceldate; //해지일자\n    private LocalDate refunddate; //환급일자\n    private Integer refundamount; //환급금\n}",
                    "CustomerData.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class CustomerData {\n    private String name; //성명\n    private Integer resnumfront; //주민번호 앞자리\n    private Integer resnumback; //주민번호 뒷자리\n    private String phone; //휴대전화\n    private String email; // E-mail\n}",
                    "Dahim.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Dahim {\n    private String dahimsisang; //시상\n    private LocalDate dahimdate; //일자\n    private String dahimprepaid; //6/30선지금\n    private String dahimfirst; //1회차청구\n    private String dahimfirstpay; //(1회차?)금액\n    private LocalDate dahimdate2; //일자2\n    private String dahimsource; //출처\n    private String dahimsecond; //2회차청구\n    private String dahimsecondpay; //(2회차?)금액\n    private LocalDate dahimdate3; //일자3\n    private String dahimsum; //합계\n}",
                    "Deposit.java": "// src/main/java/com/audora/lotting_be/model/customer/Deposit.java\n\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Deposit {\n    private LocalDate depositdate; //납입일자\n    private Long depositammount; //금액\n\n}\n",
                    "Financial.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Financial {\n    private String bankname; //은행명\n    private String accountnum; //계좌번호\n    private String accountholder; //예금주\n    private String trustcompany; //신탁사\n    private LocalDate trustcompanydate; //신탁사제출일자\n}",
                    "Firstemp.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Firstemp {\n    private String firstemptimes; //차순\n    private LocalDate firstempdate; //지급일자\n}\n",
                    "LegalAddress.java": "// src/main/java/com/audora/lotting_be/model/customer/LegalAddress.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class LegalAddress {\n    private String postnumber; //우편번호\n    private String post; //주소\n    private String detailaddress; //상세주소\n}\n\n",
                    "Loan.java": "// Loan.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Loan {\n    private LocalDate loandate; //대출일자\n    private String loanbank; //은행\n    private Long loanammount; //대출액\n    private LocalDate selfdate; //자납일\n    private Long selfammount; //자납액\n    private Long loanselfsum; //합계\n    private Long loanselfcurrent; //잔액\n}\n",
                    "Meetingattend.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Meetingattend {\n    private String ftofattend;     // 서면\n    private String selfattend;     // 직접\n    private String behalfattend;   // 대리\n}\n",
                    "MGM.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class MGM {\n    private String mgmfee; //수수료\n    private String mgmcompanyname; //업체명\n    private String mgmname; //이름\n    private String mgminstitution; //기관\n    private String mgmaccount; //계좌\n}",
                    "Postreceive.java": "// src/main/java/com/audora/lotting_be/model/customer/Postreceive.java\npackage com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Postreceive {\n    private String postnumberreceive; //우편번호\n    private String postreceive; //주소\n    private String detailaddressreceive; //상세주소\n}\n",
                    "Responsible.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\n@Embeddable\n@Data\npublic class Responsible {\n    private String generalmanagement; //총괄\n    private String division; //본부\n    private String team; //팀\n    private String managername; //담당자 성명\n    private String feepaid; //수수료 지급\n}",
                    "Secondemp.java": "package com.audora.lotting_be.model.customer.minor;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.Data;\n\nimport java.time.LocalDate;\n\n@Embeddable\n@Data\npublic class Secondemp {\n    private String secondemptimes; //차순\n    private LocalDate secondempdate; //지급일자\n}\n"
                }
            }
        },
        "Fee": {
            "__files__": {
                "Fee.java": "// Fee.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonManagedReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.List;\n\n@Entity\n@Data\npublic class Fee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String groupname; //군\n    private String floor; //층\n    private String batch; //가입차순 (1차, 2차 등등)\n    private String type; //타입\n    private Double supplyarea; //공급면적\n    private Double priceperp; //평당가\n    private Long price; //금액\n    private Double paymentratio; //납입비율\n    private Long paysum; //합계\n\n    @OneToMany(mappedBy = \"fee\", cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private List<FeePerPhase> feePerPhases;\n}\n",
                "FeePerPhase.java": "// FeePerPhase.java\npackage com.audora.lotting_be.model.Fee;\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport jakarta.persistence.*;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class FeePerPhase {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private Integer phaseNumber; //n차\n    private Long phasefee; //금액\n    private String phasedate; //제출일\n\n    @ManyToOne\n    @JsonBackReference\n    @JoinColumn(name = \"fee_id\")\n    private Fee fee;\n}\n"
            }
        },
        "manager": {
            "__files__": {
                "Manager.java": "// src/main/java/com/audora/lotting_be/model/manager/Manager.java\npackage com.audora.lotting_be.model.manager;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.util.Set;\n\n@Entity\n@Data\n@Table(name = \"managers\")\npublic class Manager {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    @Column(nullable = false)\n    private String password;\n\n    // 역할을 확장할 수 있도록 Set으로 정의\n    @ElementCollection(fetch = FetchType.EAGER)\n    @CollectionTable(name = \"manager_roles\", joinColumns = @JoinColumn(name = \"manager_id\"))\n    @Column(name = \"role\")\n    private Set<String> roles;\n}\n"
            }
        },
        "refund": {
            "__files__": {
                "CancelledCustomerRefund.java": "// src/main/java/com/audora/lotting_be/model/refund/CancelledCustomerRefund.java\npackage com.audora.lotting_be.model.refund;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Entity\n@Data\npublic class CancelledCustomerRefund {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // 고객 기본 정보\n    private String name;                // 성명\n    private String residentNumber;      // 주민번호 (예: \"123456-1234567\")\n    private String source;              // 출처 (예: 가입경로 등)\n\n    // 납입 정보\n    private LocalDate paymentDate;      // 납입금일자\n    private Long paymentAmount;         // 납입금액\n\n    // 해지/환불 정보\n    private LocalDate cancelDate;       // 해지일자\n    private LocalDate refundDate;       // 환급일자\n    private Long refundAmount;          // 환급금\n\n    // 금융 정보\n    private String institution;         // 기관 (은행명)\n    private String accountNumber;       // 계좌번호\n\n    // 기타 정보\n    private String depositor;           // 입금자\n    private String managerGeneral;      // 담당자총괄\n    private String managerDivision;     // 담당본부\n    private String managerTeam;         // 담당팀\n    private String managerName;         // 담당성함\n    private String reason;              // 사유\n    private String remarks;             // 비고\n\n    // 어느 고객의 해지 기록인지 식별하기 위한 고객 ID\n    private Integer customerId;\n}\n"
            }
        }
    },
    "payload": {
        "request": {
            "__files__": {
                "LoginRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/LoginRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\n\n@Data\npublic class LoginRequest {\n    private String username;\n    private String password;\n}\n",
                "PhaseModificationRequest.java": "package com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\n\n@Data\npublic class PhaseModificationRequest {\n    // 수정 허용 필드\n    private Long charge;      // 부담금\n    private Long service;     // 업무대행비\n    private Long discount;    // 할인액\n    private Long exemption;   // 면제액\n    private String move;      // 이동\n}\n",
                "SignupRequest.java": "// src/main/java/com/audora/lotting_be/payload/request/SignupRequest.java\npackage com.audora.lotting_be.payload.request;\n\nimport lombok.Data;\nimport java.util.Set;\n\n@Data\npublic class SignupRequest {\n    private String username;\n    private String email; // 필요시 추가\n    private String password;\n    private Set<String> roles;\n}\n"
            }
        },
        "response": {
            "__files__": {
                "CustomerDepositDTO.java": "package com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\n@Data\npublic class CustomerDepositDTO {\n\n    // 회원번호\n    private Integer memberNumber;\n\n    // 마지막 거래 일시\n    private LocalDateTime lastTransactionDateTime;\n\n    // 적요 (임시)\n    private String remarks;\n\n    // 기재내용 (메모 역할)\n    private String memo;\n\n    // 계약자\n    private String contractor;\n\n    // 찾으신 금액 (환불받은 금액)\n    private Long withdrawnAmount;\n\n    // 맡기신 금액 (지금까지 입금한 금액)\n    private Long depositAmount;\n\n    // 취급점(은행/지점)\n    private String bankBranch;\n\n    // 계좌 (h, g, f, e 중 하나)\n    private String account;\n\n    // 예약 (의미 불명확, 임시)\n    private String reservation;\n\n    // 1차~10차 입금 상태\n    private String depositPhase1;\n    private String depositPhase2;\n    private String depositPhase3;\n    private String depositPhase4;\n    private String depositPhase5;\n    private String depositPhase6;\n    private String depositPhase7;\n    private String depositPhase8;\n    private String depositPhase9;\n    private String depositPhase10;\n\n    // 대출금액\n    private Long loanAmount;\n\n    // 대출일자\n    private LocalDate loanDate;\n\n    // 임시\n    private String temporary;\n\n    // 비고\n    private String note;\n}\n",
                "JwtResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/JwtResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.util.List;\n\n@Data\npublic class JwtResponse {\n    private String token;\n    private String type = \"Bearer\";\n    private Long id;\n    private String username;\n    private List<String> roles;\n\n    public JwtResponse(String accessToken, Long id, String username, List<String> roles) {\n        this.token = accessToken;\n        this.id = id;\n        this.username = username;\n        this.roles = roles;\n    }\n}\n",
                "LateFeeInfo.java": "// src/main/java/com/audora/lotting_be/payload/response/LateFeeInfo.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\nimport java.time.LocalDate;\n\n@Data\npublic class LateFeeInfo {\n    private Integer id; // 관리번호\n    private Integer lastUnpaidPhaseNumber; // 마지막 미납 차수\n    private String customertype; // 고객 유형\n    private String name; // 성명\n    private LocalDate registerdate; // 가입일자\n    private LocalDate lateBaseDate; // 연체기준일\n    private LocalDate recentPaymentDate; // 최근납부일자\n    private Long daysOverdue; // 일수\n    private Double lateRate; // 연체율 (%)\n    private Long overdueAmount; // 연체금액\n    private Long paidAmount; // 납입금액\n    private Double lateFee; // 연체료\n    private Long totalOwed; // 내야할 돈 합계\n}\n",
                "MessageResponse.java": "// src/main/java/com/audora/lotting_be/payload/response/MessageResponse.java\npackage com.audora.lotting_be.payload.response;\n\nimport lombok.Data;\n\n@Data\npublic class MessageResponse {\n    private String message;\n\n    public MessageResponse(String message) {\n        this.message = message;\n    }\n}\n"
            }
        }
    },
    "repository": {
        "__files__": {
            "CancelledCustomerRefundRepository.java": "// src/main/java/com/audora/lotting_be/repository/CancelledCustomerRefundRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.refund.CancelledCustomerRefund;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface CancelledCustomerRefundRepository extends JpaRepository<CancelledCustomerRefund, Long> {\n    // 이미 해당 고객의 해지환불 기록이 있는지 확인하기 위한 메서드\n    boolean existsByCustomerId(Integer customerId);\n}\n",
            "CustomerRepository.java": "// src/main/java/com/audora/lotting_be/repository/CustomerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface CustomerRepository extends JpaRepository<Customer, Integer> {\n    @Query(value = \"SELECT COALESCE(MAX(id), 0) + 1 FROM customer\", nativeQuery = true)\n    Integer getNextId();\n\n    List<Customer> findByCustomerDataNameContaining(String name);\n\n    List<Customer> findByCustomerDataNameAndId(String name, Integer id);\n\n    Optional<Customer> findByCustomerDataName(String name);\n\n    // 정계약한(customertype = 'c') 고객의 수를 세는 쿼리\n    long countByCustomertype(String customertype);\n\n    /**\n     * ID가 특정 부분 문자열을 포함하는 고객을 찾습니다.\n     *\n     * 주의: 사용하는 데이터베이스에 따라 CAST 함수의 문법을 조정해야 합니다.\n     * 예를 들어, PostgreSQL에서는 CAST(id AS TEXT)를 사용합니다.\n     */\n    @Query(value = \"SELECT * FROM customer WHERE CAST(id AS CHAR) LIKE %:idPart%\", nativeQuery = true)\n    List<Customer> findByIdContaining(@Param(\"idPart\") String idPart);\n\n    @Query(value = \"SELECT * FROM customer WHERE name LIKE CONCAT('%', :name, '%') AND CAST(id AS CHAR) LIKE CONCAT('%', :idPart, '%')\", nativeQuery = true)\n    List<Customer> findByNameContainingAndIdContaining(@Param(\"name\") String name, @Param(\"idPart\") String idPart);\n\n}\n",
            "DepositHistoryRepository.java": "// src/main/java/com/audora/lotting_be/repository/DepositHistoryRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface DepositHistoryRepository extends JpaRepository<DepositHistory, Long> {\n}\n",
            "FeeRepository.java": "// FeeRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FeeRepository extends JpaRepository<Fee, Long> {\n    Fee findByGroupnameAndBatch(String groupname, String batch);\n}\n",
            "ManagerRepository.java": "// src/main/java/com/audora/lotting_be/repository/ManagerRepository.java\npackage com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface ManagerRepository extends JpaRepository<Manager, Long> {\n    Optional<Manager> findByUsername(String username);\n    Boolean existsByUsername(String username);\n}\n",
            "PhaseRepository.java": "package com.audora.lotting_be.repository;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface PhaseRepository extends JpaRepository<Phase, Long> {\n    List<Phase> findByCustomerId(Integer customerId);\n}\n"
        }
    },
    "security": {
        "__files__": {
            "AuthTokenFilter.java": "// src/main/java/com/audora/lotting_be/security/AuthTokenFilter.java\npackage com.audora.lotting_be.security;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.security.authentication.*;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\npublic class AuthTokenFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtUtils jwtUtils;\n\n    @Autowired\n    private UserDetailsServiceImpl userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain filterChain)\n            throws ServletException, IOException {\n        try {\n            String jwt = parseJwt(request);\n            if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\n                String username = jwtUtils.getUserNameFromJwtToken(jwt);\n\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n                UsernamePasswordAuthenticationToken authentication =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails, null, userDetails.getAuthorities());\n\n                authentication.setDetails(\n                        new WebAuthenticationDetailsSource().buildDetails(request));\n\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Cannot set user authentication: \" + e);\n        }\n\n        filterChain.doFilter(request, response);\n    }\n\n    private String parseJwt(HttpServletRequest request) {\n        String headerAuth = request.getHeader(\"Authorization\");\n\n        if (StringUtils.hasText(headerAuth) &&\n                headerAuth.startsWith(\"Bearer \")) {\n            return headerAuth.substring(7);\n        }\n\n        return null;\n    }\n}\n",
            "JwtUtils.java": "// src/main/java/com/audora/lotting_be/security/JwtUtils.java\npackage com.audora.lotting_be.security;\n\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport java.nio.charset.StandardCharsets;\nimport java.security.Key;\nimport java.util.Date;\nimport jakarta.annotation.PostConstruct;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component\npublic class JwtUtils {\n\n    private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);\n\n    @Value(\"${jwt.secret}\")\n    private String jwtSecret;\n\n    @Value(\"${jwt.expirationMs}\")\n    private int jwtExpirationMs;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        if (jwtSecret == null || jwtSecret.length() < 32) {\n            throw new IllegalArgumentException(\"JWT Secret must be at least 32 characters long.\");\n        }\n        this.key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));\n        logger.info(\"JWT Key initialized successfully.\");\n    }\n\n    public String generateJwtToken(UserDetailsImpl userDetails) {\n        return Jwts.builder()\n                .setSubject(userDetails.getUsername())\n                .setIssuedAt(new Date())\n                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\n                .signWith(key, SignatureAlgorithm.HS512)\n                .compact();\n    }\n\n    public String getUserNameFromJwtToken(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token)\n                .getBody()\n                .getSubject();\n    }\n\n    public boolean validateJwtToken(String authToken) {\n        try {\n            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(authToken);\n            return true;\n        } catch (JwtException e) {\n            logger.error(\"JWT validation error: {}\", e.getMessage());\n        }\n        return false;\n    }\n}\n",
            "UserDetailsImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport java.util.Collection;\nimport java.util.stream.Collectors;\n\n@Data\npublic class UserDetailsImpl implements UserDetails {\n\n    private Long id;\n    private String username;\n\n    @JsonIgnore\n    private String password;\n\n    private Collection<? extends GrantedAuthority> authorities;\n\n    public UserDetailsImpl(Long id, String username, String password,\n                           Collection<? extends GrantedAuthority> authorities) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.authorities = authorities;\n    }\n\n    public static UserDetailsImpl build(Manager manager) {\n        Collection<GrantedAuthority> authorities = manager.getRoles().stream()\n                .map(role -> (GrantedAuthority) () -> \"ROLE_\" + role.toUpperCase())\n                .collect(Collectors.toList());\n\n        return new UserDetailsImpl(\n                manager.getId(),\n                manager.getUsername(),\n                manager.getPassword(),\n                authorities);\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    // 기타 메서드는 기본 구현을 따릅니다\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n",
            "UserDetailsServiceImpl.java": "// src/main/java/com/audora/lotting_be/security/UserDetailsServiceImpl.java\npackage com.audora.lotting_be.security;\n\nimport com.audora.lotting_be.model.manager.Manager;\nimport com.audora.lotting_be.repository.ManagerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.*;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    ManagerRepository managerRepository;\n\n    @Override\n    @Transactional\n    public UserDetails loadUserByUsername(String username)\n            throws UsernameNotFoundException {\n        Manager manager = managerRepository.findByUsername(username)\n                .orElseThrow(() ->\n                        new UsernameNotFoundException(\"Manager Not Found with username: \" + username));\n\n        return UserDetailsImpl.build(manager);\n    }\n}\n"
        }
    },
    "service": {
        "__files__": {
            "CustomerService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.model.customer.Status;\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.audora.lotting_be.payload.response.CustomerDepositDTO;\nimport com.audora.lotting_be.payload.response.LateFeeInfo;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport jakarta.transaction.Transactional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.stream.Collectors;\nimport java.util.Comparator;\n\n@Service\npublic class CustomerService {\n    private static final Logger logger = LoggerFactory.getLogger(CustomerService.class);\n\n    @Autowired\n    private CustomerRepository customerRepository;\n    @Autowired\n    private FeeRepository feeRepository;\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n\n    // ================================================\n    // 1) 고객 생성 및 초기 Phase 설정\n    // ================================================\n    @Transactional\n    public Customer createCustomer(Customer customer, boolean recalc) {\n\n        if (customerRepository.existsById(customer.getId())) {\n            throw new IllegalArgumentException(\"이미 존재하는 관리번호입니다.\");\n        }\n        // Fee 조회 (groupname = type+groupname, batch = 가입차순)\n        Fee fee = feeRepository.findByGroupnameAndBatch(\n                customer.getType() + customer.getGroupname(),\n                customer.getBatch()\n        );\n        // FeePerPhase 정보를 바탕으로 Phase 초기화\n        if (fee != null) {\n            List<FeePerPhase> feePerPhases = fee.getFeePerPhases();\n            List<Phase> phases = new ArrayList<>();\n            for (FeePerPhase fpp : feePerPhases) {\n                Phase phase = new Phase();\n                phase.setPhaseNumber(fpp.getPhaseNumber());\n                long charge = (fpp.getPhasefee() != null) ? fpp.getPhasefee() : 0L;\n                phase.setCharge(charge);\n                phase.setService(0L);\n                phase.setExemption(0L);\n                long feesum = charge; // (service=0, exemption=0이므로)\n                phase.setFeesum(feesum);\n                phase.setCharged(0L);\n                long discountVal = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n                phase.setSum(feesum - discountVal);\n                // 예정일자 문자열을 LocalDate로 변환\n                phase.setPlanneddateString(fpp.getPhasedate());\n                LocalDate plannedDate = calculatePlannedDate(customer.getRegisterdate(), fpp.getPhasedate());\n                phase.setPlanneddate(plannedDate);\n                phase.setFullpaiddate(null);\n                // 양방향 관계 설정\n                phase.setCustomer(customer);\n                phases.add(phase);\n            }\n            customer.setPhases(phases);\n        }\n        // Status가 없으면 새로 생성\n        if (customer.getStatus() == null) {\n            Status status = new Status();\n            status.setCustomer(customer);\n            customer.setStatus(status);\n        }\n        // 고객 저장 후 전체 재계산\n        customer = customerRepository.save(customer);\n        recalculateEverything(customer);\n        return customer;\n    }\n\n    // ================================================\n    // 2) 전체 재계산 (핵심 로직)\n    // ================================================\n    /**\n     * 전체 재계산:\n     * (1) 각 Phase의 charged, feesum, fullpaiddate 초기화\n     * (2) 모든 DepositHistory를 순차 처리하여 입금액을 Phase에 배분\n     *     단, 해당 DepositHistory의 depositPhase 필드에 예상치 못한 값이 있으면\n     *     해당 기록은 배분 계산에서 제외합니다.\n     * (3) 대출/자납 입금의 경우, 누적 금액(runningLoanPool)을 targetPhases에 배분하고,\n     *     동시에 해당 거래가 대출, 자납, 또는 둘 다인지를 loan_details 값을 통해 판단하여,\n     *     대출이면 loan_record, 자납이면 self_record를 첫 거래에 \"1\", 그 이후에 \"0\"으로 기록합니다.\n     * (4) 남은 일반 입금과 대출/자납 입금 잔액을 Status에 반영\n     * (5) Loan 필드를 업데이트하여, 대출과 자납 금액을 별도로 누적\n     * (6) 최종 저장\n     */\n// 기존 recalculateEverything 메서드의 수정 버전 (대출/자납 입금기록은 수동 Loan 값을 소진하는 로직)\n// CustomerService.java\n\n\n    public void recalculateEverything(Customer customer) {\n        // 1) 각 Phase 초기화 (일반 입금용)\n        if (customer.getPhases() != null) {\n            for (Phase phase : customer.getPhases()) {\n                phase.setCharged(0L);\n                phase.setFullpaiddate(null);\n                long charge = (phase.getCharge() != null) ? phase.getCharge() : 0L;\n                long service = (phase.getService() != null) ? phase.getService() : 0L;\n                long exemption = (phase.getExemption() != null) ? phase.getExemption() : 0L;\n                long feesum = charge + service - exemption;\n                phase.setFeesum(feesum);\n                long discountVal = (phase.getDiscount() != null) ? phase.getDiscount() : 0L;\n                phase.setSum(feesum - discountVal);\n            }\n        }\n\n        // 2) 일반 입금용 Phase별 누적 입금액 초기화\n        Map<Integer, Long> cumulativeDeposits = new HashMap<>();\n        if (customer.getPhases() != null) {\n            for (Phase p : customer.getPhases()) {\n                cumulativeDeposits.put(p.getPhaseNumber(), 0L);\n            }\n        }\n\n        long leftoverGeneral = 0L;\n        long loanConsumedSum = 0L; // 대출/자납 입금 기록에서 실제 배분된 금액 누적 변수\n        int countLoanRecords = 0;  // 지금까지 처리한 대출 입금 기록 수\n        int countSelfRecords = 0;  // 지금까지 처리한 자납 입금 기록 수\n\n        List<DepositHistory> histories = customer.getDepositHistories();\n        if (histories != null && !histories.isEmpty()) {\n            // 거래일시 순으로 정렬\n            histories.sort(Comparator.comparing(DepositHistory::getTransactionDateTime));\n            for (DepositHistory dh : histories) {\n                if (!\"o\".equalsIgnoreCase(dh.getLoanStatus())) {\n                    // 일반 입금 기록: 기존 분배 로직 사용\n                    long leftover = distributeDepositPaymentToPhases(customer, dh, cumulativeDeposits);\n                    leftoverGeneral += leftover;\n                    depositHistoryRepository.save(dh);\n                } else {\n                    // 대출/자납 입금 기록:\n                    long depositAmt = (dh.getDepositAmount() != null ? dh.getDepositAmount() : 0L);\n                    AtomicLong localLoanPool = new AtomicLong(depositAmt);\n                    List<Integer> targetList = dh.getTargetPhases();\n                    // 신규 메서드를 호출하여 각 phase별 배분액을 수집합니다.\n                    Map<Integer, Long> allocationForThisRecord = new HashMap<>();\n                    if (targetList != null && !targetList.isEmpty()) {\n                        allocationForThisRecord = distributeLoanDepositPaymentToPhasesAndCollectAllocation(customer, dh, cumulativeDeposits, localLoanPool);\n                    }\n\n                    // loan_record, self_record 설정\n                    boolean hasLoanValue = (dh.getLoanDetails() != null &&\n                            dh.getLoanDetails().getLoanammount() != null &&\n                            dh.getLoanDetails().getLoanammount() > 0);\n                    boolean hasSelfValue = (dh.getLoanDetails() != null &&\n                            dh.getLoanDetails().getSelfammount() != null &&\n                            dh.getLoanDetails().getSelfammount() > 0);\n                    if (hasLoanValue) {\n                        dh.setLoanRecord(countLoanRecords == 0 ? \"1\" : \"0\");\n                        countLoanRecords++;\n                    } else {\n                        dh.setLoanRecord(null);\n                    }\n                    if (hasSelfValue) {\n                        dh.setSelfRecord(countSelfRecords == 0 ? \"1\" : \"0\");\n                        countSelfRecords++;\n                    } else {\n                        dh.setSelfRecord(null);\n                    }\n                    depositHistoryRepository.save(dh);\n\n                    // 실제 사용된 금액 = depositAmt - localLoanPool.get()\n                    long usedAmount = depositAmt - localLoanPool.get();\n                    loanConsumedSum += usedAmount;\n\n                    // 신규: 배분된 결과를 JSON 형식으로 작성\n                    StringBuilder allocationDetailJson = new StringBuilder(\"{\");\n                    for (Integer phaseNo : allocationForThisRecord.keySet()) {\n                        Phase phase = findPhaseByNumber(customer.getPhases(), phaseNo);\n                        if (phase != null) {\n                            long allocated = allocationForThisRecord.get(phaseNo);\n                            long required = (phase.getFeesum() != null ? phase.getFeesum() : 0L)\n                                    - (phase.getDiscount() != null ? phase.getDiscount() : 0L);\n                            // remainingNeeded는 phase에 현재 누적된 charged값(재계산 후)에서 계산\n                            long remainingNeeded = required - (phase.getCharged() != null ? phase.getCharged() : 0L);\n                            if (remainingNeeded < 0) remainingNeeded = 0;\n                            allocationDetailJson.append(\"\\\"phase\").append(phaseNo).append(\"\\\":\")\n                                    .append(\"{\\\"allocated\\\":\").append(allocated)\n                                    .append(\",\\\"remainingNeeded\\\":\").append(remainingNeeded)\n                                    .append(\"},\");\n                        }\n                    }\n                    if (allocationDetailJson.charAt(allocationDetailJson.length() - 1) == ',') {\n                        allocationDetailJson.deleteCharAt(allocationDetailJson.length() - 1);\n                    }\n                    allocationDetailJson.append(\"}\");\n                    dh.setAllocationDetail(allocationDetailJson.toString());\n                }\n            }\n        }\n\n        // 4) Status 업데이트\n        Status st = customer.getStatus();\n        if (st == null) {\n            st = new Status();\n            st.setCustomer(customer);\n            customer.setStatus(st);\n        }\n        st.setExceedamount(leftoverGeneral);\n        // 대출/자납 잔액: 수동 입력된 Loan 값(대출액 + 자납액)에서 대출/자납 입금 중 실제 배분된 금액을 차감\n        long manualLoanTotal = 0L;\n        if (customer.getLoan() != null) {\n            manualLoanTotal = (customer.getLoan().getLoanammount() != null ? customer.getLoan().getLoanammount() : 0L)\n                    + (customer.getLoan().getSelfammount() != null ? customer.getLoan().getSelfammount() : 0L);\n        }\n        st.setLoanExceedAmount(Math.max(0, manualLoanTotal - loanConsumedSum));\n        updateStatusFields(customer);\n        updateLoanField(customer);\n        customerRepository.save(customer);\n    }\n\n    private Map<Integer, Long> distributeLoanDepositPaymentToPhasesAndCollectAllocation(Customer customer,\n                                                                                        DepositHistory dh,\n                                                                                        Map<Integer, Long> cumulativeDeposits,\n                                                                                        AtomicLong runningLoanPool) {\n        Map<Integer, Long> allocationMap = new HashMap<>();\n        List<Integer> targetList = dh.getTargetPhases();\n        List<Phase> phases = customer.getPhases();\n        if (phases != null) {\n            phases.sort(Comparator.comparingInt(Phase::getPhaseNumber));\n        }\n        if (targetList != null) {\n            for (Integer phaseNo : targetList) {\n                Phase phase = findPhaseByNumber(phases, phaseNo);\n                if (phase == null) continue;\n                long already = cumulativeDeposits.getOrDefault(phaseNo, 0L);\n                long feesum = (phase.getFeesum() != null) ? phase.getFeesum() : 0L;\n                // 할인액은 무시: required = feesum - already;\n                long required = feesum - already;\n                if (required <= 0) continue;\n                long allocation = Math.min(runningLoanPool.get(), required);\n                if (allocation > 0) {\n                    boolean wasZero = (already == 0L);\n                    already += allocation;\n                    runningLoanPool.set(runningLoanPool.get() - allocation);\n                    phase.setCharged(already);\n                    if (already >= feesum) {\n                        if (dh.getTransactionDateTime() != null) {\n                            phase.setFullpaiddate(dh.getTransactionDateTime().toLocalDate());\n                        }\n                    }\n                    phase.setSum(feesum - already);\n                    setDepositPhaseField(dh, phaseNo, wasZero ? \"1\" : \"0\");\n                    cumulativeDeposits.put(phaseNo, already);\n                    allocationMap.put(phaseNo, allocation);\n                }\n                if (runningLoanPool.get() <= 0) break;\n            }\n        }\n        return allocationMap;\n    }\n\n\n\n\n    // 기존 distributeLoanDepositPaymentToPhases 메서드 (변경 없이 사용)\n    public void distributeLoanDepositPaymentToPhases(Customer customer,\n                                                     DepositHistory dh,\n                                                     Map<Integer, Long> cumulativeDeposits,\n                                                     AtomicLong runningLoanPool) {\n        String dp1 = dh.getDepositPhase1();\n        if (dp1 != null && !dp1.trim().isEmpty() && !( \"0\".equals(dp1) || \"1\".equals(dp1) || \"2\".equals(dp1) )) {\n            return;\n        }\n        long remaining = runningLoanPool.get();\n        List<Phase> phases = customer.getPhases();\n        if (phases != null) {\n            phases.sort(Comparator.comparingInt(Phase::getPhaseNumber));\n        }\n        List<Integer> targetList = dh.getTargetPhases();\n        if (targetList != null && !targetList.isEmpty()) {\n            for (Integer phaseNo : targetList) {\n                Phase phase = findPhaseByNumber(phases, phaseNo);\n                if (phase == null) continue;\n                long already = cumulativeDeposits.getOrDefault(phaseNo, 0L);\n                long feesum = (phase.getFeesum() != null) ? phase.getFeesum() : 0L;\n                long required = feesum - already;\n                if (required <= 0) continue;\n                long allocation = Math.min(remaining, required);\n                if (allocation > 0) {\n                    boolean wasZero = (already == 0L);\n                    already += allocation;\n                    remaining -= allocation;\n                    phase.setCharged(already);\n                    if (already >= feesum) {\n                        phase.setFullpaiddate(dh.getTransactionDateTime() != null ? dh.getTransactionDateTime().toLocalDate() : null);\n                    }\n                    phase.setSum(feesum - already);\n                    setDepositPhaseField(dh, phaseNo, wasZero ? \"1\" : \"0\");\n                    cumulativeDeposits.put(phaseNo, already);\n                }\n                if (remaining <= 0) break;\n            }\n        }\n        runningLoanPool.set(remaining);\n    }\n\n    // updateLoanField 메서드는 중복 없이 하나만 존재하도록 함.\n    public void updateLoanField(Customer customer) {\n        if (customer.getLoan() == null) {\n            customer.setLoan(new Loan());\n        }\n        // 수동 입력 Loan 값은 재계산 없이 그대로 유지합니다.\n        customerRepository.save(customer);\n    }\n\n\n    // ================================================\n    // 3-1) 일반 입금 분배 로직\n    // ================================================\n    /**\n     * DepositHistory(일반 입금)의 입금액을 Phase별로 배분하고 남은 금액(leftover)을 반환합니다.\n     * 단, 해당 DepositHistory의 depositPhase1에 예상치 못한 값이 있으면,\n     * 배분을 전혀 수행하지 않고 depositAmount 전체를 남김으로 처리합니다.\n     */\n    public long distributeDepositPaymentToPhases(Customer customer, DepositHistory dh, Map<Integer, Long> cumulativeDeposits) {\n        // depositPhase1 값 전처리: 공백 제거, 소문자 변환\n        String dp1 = dh.getDepositPhase1();\n        if (dp1 != null) {\n            dp1 = dp1.trim().toLowerCase();\n        }\n        // depositPhase1이 \"\", \"0\", \"1\", \"2\"가 아니면(예: \"x\") 해당 입금액을 배분하지 않음\n        if (dp1 != null && !(dp1.isEmpty() || dp1.equals(\"0\") || dp1.equals(\"1\") || dp1.equals(\"2\"))) {\n            logger.info(\"depositPhase1 값이 '{}' 이므로 해당 입금은 phase 분배에 반영되지 않습니다.\", dp1);\n            // depositAmount 전체를 leftover로 반환하는 대신 0L 반환하여 아예 배분하지 않음\n            return 0L;\n        }\n\n        // 정상적인 배분 로직 진행\n        long depositAmt = (dh.getDepositAmount() != null ? dh.getDepositAmount() : 0L);\n        long remaining = depositAmt;\n        List<Phase> phases = customer.getPhases();\n        if (phases != null) {\n            phases.sort(Comparator.comparingInt(Phase::getPhaseNumber));\n        }\n        for (Phase phase : phases) {\n            int phaseNo = phase.getPhaseNumber();\n            long already = cumulativeDeposits.getOrDefault(phaseNo, 0L);\n            long feesum = (phase.getFeesum() != null ? phase.getFeesum() : 0L);\n            long discount = (phase.getDiscount() != null ? phase.getDiscount() : 0L);\n            long required = (feesum - discount) - already;\n            if (required <= 0) continue;\n            long allocation = Math.min(remaining, required);\n            if (allocation > 0) {\n                boolean wasZero = (already == 0L);\n                already += allocation;\n                remaining -= allocation;\n                phase.setCharged(already);\n                if (already >= (feesum - discount)) {\n                    if (dh.getTransactionDateTime() != null) {\n                        phase.setFullpaiddate(dh.getTransactionDateTime().toLocalDate());\n                    }\n                }\n                phase.setSum((feesum - discount) - already);\n                setDepositPhaseField(dh, phaseNo, wasZero ? \"1\" : \"0\");\n                cumulativeDeposits.put(phaseNo, already);\n            }\n            if (remaining <= 0) break;\n        }\n        return remaining;\n    }\n\n\n    // ================================================\n    // 3-2) 대출/자납 입금 분배 로직\n    // ================================================\n    /**\n     * 대출/자납 입금(loanStatus = 'o')의 경우,\n     * 누적 대출금 풀(runningLoanPool)의 금액을, DepositHistory의 targetPhases에 따라 배분합니다.\n     * 단, depositPhase1에 예상치 못한 값이 있으면 배분 계산을 전혀 수행하지 않습니다.\n     */\n\n\n    /**\n     * 특정 Phase 찾기 (phaseNumber 기준)\n     */\n    private Phase findPhaseByNumber(List<Phase> phases, int phaseNo) {\n        if (phases == null) return null;\n        for (Phase p : phases) {\n            if (p.getPhaseNumber() != null && p.getPhaseNumber() == phaseNo) {\n                return p;\n            }\n        }\n        return null;\n    }\n\n    // ================================================\n    // 3-3) depositPhase 필드 설정\n    // 만약 depositPhase 필드에 이미 값(예상치 못한 값)이 있다면, 이를 덮어쓰지 않고 그대로 유지합니다.\n    // ================================================\n    private void setDepositPhaseField(DepositHistory dh, int phaseNo, String computedValue) {\n        String currentValue = null;\n        switch (phaseNo) {\n            case 1: currentValue = dh.getDepositPhase1(); break;\n            case 2: currentValue = dh.getDepositPhase2(); break;\n            case 3: currentValue = dh.getDepositPhase3(); break;\n            case 4: currentValue = dh.getDepositPhase4(); break;\n            case 5: currentValue = dh.getDepositPhase5(); break;\n            case 6: currentValue = dh.getDepositPhase6(); break;\n            case 7: currentValue = dh.getDepositPhase7(); break;\n            case 8: currentValue = dh.getDepositPhase8(); break;\n            case 9: currentValue = dh.getDepositPhase9(); break;\n            case 10: currentValue = dh.getDepositPhase10(); break;\n            default:\n                break;\n        }\n        // 만약 현재 값이 이미 존재하고 허용된 값(\"0\", \"1\", \"2\")이 아니라면, 아무것도 변경하지 않습니다.\n        if (currentValue != null && !( \"0\".equals(currentValue) || \"1\".equals(currentValue) || \"2\".equals(currentValue) )) {\n            System.out.println(\"Phase \" + phaseNo + \" depositPhase already has a record value (\" + currentValue + \"); computed value (\" + computedValue + \") will not override it.\");\n            return;\n        }\n        // 그렇지 않으면 computedValue로 설정\n        switch (phaseNo) {\n            case 1: dh.setDepositPhase1(computedValue); break;\n            case 2: dh.setDepositPhase2(computedValue); break;\n            case 3: dh.setDepositPhase3(computedValue); break;\n            case 4: dh.setDepositPhase4(computedValue); break;\n            case 5: dh.setDepositPhase5(computedValue); break;\n            case 6: dh.setDepositPhase6(computedValue); break;\n            case 7: dh.setDepositPhase7(computedValue); break;\n            case 8: dh.setDepositPhase8(computedValue); break;\n            case 9: dh.setDepositPhase9(computedValue); break;\n            case 10: dh.setDepositPhase10(computedValue); break;\n            default:\n                break;\n        }\n    }\n\n    // ================================================\n    // 4) Status 업데이트\n    // ================================================\n    public void updateStatusFields(Customer customer) {\n        List<Phase> phases = customer.getPhases();\n        Status status = customer.getStatus();\n        if (status == null) {\n            status = new Status();\n            status.setCustomer(customer);\n            customer.setStatus(status);\n        }\n        if (phases != null && !phases.isEmpty()) {\n            long exemptionsum = phases.stream()\n                    .mapToLong(p -> (p.getExemption() != null) ? p.getExemption() : 0L)\n                    .sum();\n            status.setExemptionsum(exemptionsum);\n            long unpaidAmmout = phases.stream().mapToLong(p -> {\n                long feesum = (p.getFeesum() != null) ? p.getFeesum() : 0L;\n                long discount = (p.getDiscount() != null) ? p.getDiscount() : 0L;\n                long depositPaid = (p.getCharged() != null) ? p.getCharged() : 0L;\n                return ((feesum - discount) - depositPaid);\n            }).sum();\n            status.setUnpaidammout(unpaidAmmout);\n            LocalDate today = LocalDate.now();\n            List<Integer> unpaidPhases = phases.stream()\n                    .filter(p -> p.getPlanneddate() != null &&\n                            p.getPlanneddate().isBefore(today) &&\n                            p.getFullpaiddate() == null)\n                    .map(Phase::getPhaseNumber)\n                    .sorted()\n                    .collect(Collectors.toList());\n            String unpaidPhaseStr = unpaidPhases.stream()\n                    .map(String::valueOf)\n                    .collect(Collectors.joining(\",\"));\n            status.setUnpaidphase(unpaidPhaseStr);\n            long ammountsum = phases.stream()\n                    .mapToLong(p -> (p.getFeesum() != null) ? p.getFeesum() : 0L)\n                    .sum();\n            status.setAmmountsum(ammountsum);\n            status.setPercent40((long) (ammountsum * 0.4));\n        }\n    }\n\n    // ================================================\n    // 5) Loan 필드 업데이트 (대출과 자납 금액 분리)\n    // ================================================\n    /**\n     * DepositHistory 중 loanStatus가 'o'인 항목에 대해,\n     * 각 DepositHistory의 loanDetails에서 대출금액(loanammount)과 자납금액(selfammount)을 누적하여\n     * Loan 객체를 업데이트합니다.\n     */\n\n\n    // ================================================\n    // 6) 다음 고객번호 조회\n    // ================================================\n    public Integer getNextCustomerId() {\n        return customerRepository.getNextId();\n    }\n\n    // ================================================\n    // 7) 고객 조회/저장/삭제\n    // ================================================\n    public Customer getCustomerById(Integer id) {\n        Optional<Customer> optionalCustomer = customerRepository.findById(id);\n        return optionalCustomer.orElse(null);\n    }\n\n    public Customer saveCustomer(Customer customer) {\n        return customerRepository.save(customer);\n    }\n\n    public void deleteCustomer(Integer id) {\n        customerRepository.deleteById(id);\n    }\n\n    // ================================================\n    // 8) Phase 조회: 미납/완납\n    // ================================================\n    public List<Phase> getPendingPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            return phases.stream()\n                    .filter(phase -> phase.getSum() != null && phase.getSum() > 0)\n                    .collect(Collectors.toList());\n        }\n        return null;\n    }\n\n    public List<Phase> getCompletedPhases(Integer customerId) {\n        Optional<Customer> customerOptional = customerRepository.findById(customerId);\n        if (customerOptional.isPresent()) {\n            Customer customer = customerOptional.get();\n            List<Phase> phases = customer.getPhases();\n            return phases.stream()\n                    .filter(phase -> phase.getSum() == null || phase.getSum() == 0)\n                    .collect(Collectors.toList());\n        }\n        return null;\n    }\n\n    // ================================================\n    // 9) 통계: 정계약, 완납/미연체\n    // ================================================\n    public long countContractedCustomers() {\n        return customerRepository.count();\n    }\n\n    public long countFullyPaidCustomers() {\n        List<Customer> allCustomers = customerRepository.findAll();\n        return allCustomers.stream().filter(customer -> {\n            Status status = customer.getStatus();\n            return status != null\n                    && status.getAmmountsum() != null && status.getAmmountsum() != 0\n                    && status.getUnpaidammout() != null && status.getUnpaidammout() == 0;\n        }).count();\n    }\n\n    // ================================================\n    // 10) 연체료 정보\n    // ================================================\n    public List<LateFeeInfo> getLateFeeInfos(String name, String number) {\n        List<Customer> customers;\n        if (name != null && !name.isEmpty() && number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                customers = customerRepository.findByCustomerDataNameAndId(name, id);\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else if (name != null && !name.isEmpty()) {\n            customers = customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null && !number.isEmpty()) {\n            try {\n                Integer id = Integer.parseInt(number);\n                Optional<Customer> cOpt = customerRepository.findById(id);\n                customers = cOpt.map(Collections::singletonList).orElse(Collections.emptyList());\n            } catch (NumberFormatException e) {\n                customers = Collections.emptyList();\n            }\n        } else {\n            customers = customerRepository.findAll();\n        }\n        List<LateFeeInfo> lateFeeInfos = new ArrayList<>();\n        LocalDate today = LocalDate.now();\n        for (Customer c : customers) {\n            List<Phase> phases = c.getPhases();\n            if (phases == null || phases.isEmpty()) continue;\n            List<Phase> unpaidPhases = phases.stream().filter(p ->\n                    p.getPlanneddate() != null &&\n                            p.getPlanneddate().isBefore(today) &&\n                            p.getFullpaiddate() == null\n            ).collect(Collectors.toList());\n            LateFeeInfo info = new LateFeeInfo();\n            info.setId(c.getId());\n            info.setCustomertype(c.getCustomertype() != null ? c.getCustomertype() : \"N/A\");\n            info.setName((c.getCustomerData() != null && c.getCustomerData().getName() != null)\n                    ? c.getCustomerData().getName() : \"N/A\");\n            info.setRegisterdate(c.getRegisterdate());\n            if (unpaidPhases.isEmpty()) {\n                info.setLastUnpaidPhaseNumber(null);\n                info.setLateBaseDate(null);\n                info.setRecentPaymentDate(null);\n                info.setDaysOverdue(0L);\n                info.setLateRate(0.0);\n                info.setOverdueAmount(0L);\n                long paidAmount = phases.stream()\n                        .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                        .sum();\n                info.setPaidAmount(paidAmount);\n                info.setLateFee(0.0);\n                info.setTotalOwed(0L);\n            } else {\n                int lastUnpaid = unpaidPhases.stream()\n                        .mapToInt(Phase::getPhaseNumber)\n                        .max().orElse(0);\n                info.setLastUnpaidPhaseNumber(lastUnpaid);\n                LocalDate lateBaseDate = unpaidPhases.stream()\n                        .map(Phase::getPlanneddate)\n                        .min(LocalDate::compareTo)\n                        .orElse(null);\n                info.setLateBaseDate(lateBaseDate);\n                List<Phase> paidPhases = phases.stream()\n                        .filter(p -> p.getFullpaiddate() != null)\n                        .collect(Collectors.toList());\n                LocalDate recentPaymentDate = paidPhases.stream()\n                        .map(Phase::getFullpaiddate)\n                        .max(LocalDate::compareTo)\n                        .orElse(null);\n                info.setRecentPaymentDate(recentPaymentDate);\n                long daysOverdue = (lateBaseDate != null) ? ChronoUnit.DAYS.between(lateBaseDate, today) : 0;\n                if (daysOverdue < 0) daysOverdue = 0;\n                info.setDaysOverdue(daysOverdue);\n                double lateRate = 0.0005;\n                info.setLateRate(lateRate);\n                long overdueAmount = unpaidPhases.stream()\n                        .mapToLong(p -> (p.getFeesum() != null) ? p.getFeesum() : 0L)\n                        .sum();\n                info.setOverdueAmount(overdueAmount);\n                long paidAmount = phases.stream()\n                        .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                        .sum();\n                info.setPaidAmount(paidAmount);\n                double lateFee = overdueAmount * lateRate * daysOverdue;\n                info.setLateFee(lateFee);\n                long totalOwed = overdueAmount + Math.round(lateFee);\n                info.setTotalOwed(totalOwed);\n            }\n            lateFeeInfos.add(info);\n        }\n        return lateFeeInfos;\n    }\n\n    // ================================================\n    // 11) 검색\n    // ================================================\n    public List<Customer> searchCustomers(String name, String number) {\n        List<Customer> customers;\n        if (name != null && number != null) {\n            if (number.matches(\"\\\\d+\")) {\n                customers = customerRepository.findByNameContainingAndIdContaining(name, number);\n            } else {\n                customers = customerRepository.findByCustomerDataNameContaining(name);\n            }\n        } else if (name != null) {\n            customers = customerRepository.findByCustomerDataNameContaining(name);\n        } else if (number != null) {\n            if (number.matches(\"\\\\d+\")) {\n                customers = customerRepository.findByIdContaining(number);\n            } else {\n                customers = Collections.emptyList();\n            }\n        } else {\n            // 파라미터가 없으면 모든 고객을 반환\n            customers = customerRepository.findAll();\n        }\n        // id가 1인 더미 데이터는 필터링\n        return customers.stream()\n                .filter(customer -> !customer.getId().equals(1))\n                .collect(Collectors.toList());\n    }\n\n\n\n    // ================================================\n    // 12) DepositList DTO\n    // ================================================\n    public List<CustomerDepositDTO> getAllCustomerDepositDTOs() {\n        List<Customer> allCustomers = customerRepository.findAll();\n        return allCustomers.stream()\n                .map(this::mapToCustomerDepositDTO)\n                .collect(Collectors.toList());\n    }\n\n    private CustomerDepositDTO mapToCustomerDepositDTO(Customer customer) {\n        CustomerDepositDTO dto = new CustomerDepositDTO();\n        dto.setMemberNumber(customer.getId());\n        LocalDate lastPaidDate = customer.getPhases().stream()\n                .map(Phase::getFullpaiddate)\n                .filter(Objects::nonNull)\n                .max(LocalDate::compareTo)\n                .orElse(null);\n        dto.setLastTransactionDateTime(lastPaidDate != null ? lastPaidDate.atStartOfDay() : null);\n        dto.setRemarks(\"\");\n        dto.setMemo(\"\");\n        dto.setContractor(customer.getCustomerData() != null ? customer.getCustomerData().getName() : \"\");\n        dto.setWithdrawnAmount(null);\n        Long depositAmount = customer.getPhases().stream()\n                .mapToLong(p -> (p.getCharged() != null) ? p.getCharged() : 0L)\n                .sum();\n        dto.setDepositAmount(depositAmount);\n        dto.setBankBranch((customer.getFinancial() != null && customer.getFinancial().getBankname() != null)\n                ? customer.getFinancial().getBankname() : \"\");\n        dto.setAccount(\"h\");\n        dto.setReservation(\"\");\n        dto.setDepositPhase1(getPhaseStatus(customer, 1));\n        dto.setDepositPhase2(getPhaseStatus(customer, 2));\n        dto.setDepositPhase3(getPhaseStatus(customer, 3));\n        dto.setDepositPhase4(getPhaseStatus(customer, 4));\n        dto.setDepositPhase5(getPhaseStatus(customer, 5));\n        dto.setDepositPhase6(getPhaseStatus(customer, 6));\n        dto.setDepositPhase7(getPhaseStatus(customer, 7));\n        dto.setDepositPhase8(getPhaseStatus(customer, 8));\n        dto.setDepositPhase9(getPhaseStatus(customer, 9));\n        dto.setDepositPhase10(getPhaseStatus(customer, 10));\n        DepositHistory loanDeposit = null;\n        if (customer.getDepositHistories() != null) {\n            loanDeposit = customer.getDepositHistories().stream()\n                    .filter(dh -> \"o\".equalsIgnoreCase(dh.getLoanStatus()))\n                    .max(Comparator.comparing(DepositHistory::getTransactionDateTime))\n                    .orElse(null);\n        }\n        if (loanDeposit != null) {\n            dto.setLoanAmount(loanDeposit.getDepositAmount());\n            dto.setLoanDate(loanDeposit.getLoanDate());\n        } else {\n            dto.setLoanAmount(null);\n            dto.setLoanDate(null);\n        }\n        dto.setTemporary(\"\");\n        dto.setNote(\"\");\n        return dto;\n    }\n\n    /**\n     * 1~10차 입금 상태: charged > 0 ? \"o\" : \"x\"\n     */\n    private String getPhaseStatus(Customer customer, int phaseNumber) {\n        if (customer.getPhases() == null) return \"\";\n        Phase targetPhase = customer.getPhases().stream()\n                .filter(p -> p.getPhaseNumber() != null && p.getPhaseNumber() == phaseNumber)\n                .findFirst()\n                .orElse(null);\n        if (targetPhase == null) return \"\";\n        Long charged = targetPhase.getCharged();\n        return (charged != null && charged > 0) ? \"o\" : \"x\";\n    }\n\n    // ================================================\n    // 13) 도우미: plannedDate 계산\n    // ================================================\n    /**\n     * 예: \"3달\" -> registerDate.plusMonths(3), \"1년\" -> registerDate.plusYears(1)\n     */\n    private LocalDate calculatePlannedDate(LocalDate registerDate, String phasedate) {\n        if (registerDate == null) {\n            registerDate = LocalDate.now();\n        }\n        if (phasedate == null || phasedate.isEmpty()) {\n            return registerDate;\n        }\n        if (phasedate.endsWith(\"달\") || phasedate.endsWith(\"개월\")) {\n            int months = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusMonths(months);\n        } else if (phasedate.endsWith(\"년\")) {\n            int years = Integer.parseInt(phasedate.replaceAll(\"[^0-9]\", \"\"));\n            return registerDate.plusYears(years);\n        } else {\n            return registerDate.plusYears(100);\n        }\n    }\n    @Transactional\n    public List<Customer> getAllCustomersWithPhases() {\n        List<Customer> customers = customerRepository.findAll();\n        for (Customer customer : customers) {\n            // phases 컬렉션 강제 초기화\n            if (customer.getPhases() != null) {\n                customer.getPhases().size();\n            }\n        }\n        return customers;\n    }\n\n\n}\n",
            "DepositExcelService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport jakarta.transaction.Transactional;\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.*;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Service\npublic class DepositExcelService {\n\n    private static final Logger logger = LoggerFactory.getLogger(DepositExcelService.class);\n\n    private final DepositHistoryRepository depositHistoryRepository;\n    private final CustomerRepository customerRepository;\n    private final DepositHistoryService depositHistoryService;\n\n    public DepositExcelService(DepositHistoryRepository depositHistoryRepository,\n                               CustomerRepository customerRepository,\n                               DepositHistoryService depositHistoryService) {\n        this.depositHistoryRepository = depositHistoryRepository;\n        this.customerRepository = customerRepository;\n        this.depositHistoryService = depositHistoryService;\n    }\n\n    public void processDepositExcelFileWithProgress(MultipartFile file, SseEmitter emitter) throws IOException {\n        DataFormatter formatter = new DataFormatter(Locale.getDefault());\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n\n        try (InputStream is = file.getInputStream();\n             XSSFWorkbook workbook = new XSSFWorkbook(is)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n            int startRow = 1; // 첫 행은 헤더\n            int lastRow = sheet.getLastRowNum();\n            int totalRows = lastRow - startRow + 1;\n            logger.info(\"총 {}건의 행을 처리합니다.\", totalRows);\n\n            for (int i = startRow; i <= lastRow; i++) {\n                Row row = sheet.getRow(i);\n                if (row == null) {\n                    logger.warn(\"행 {}가 null입니다. 건너뜁니다.\", i);\n                    continue;\n                }\n\n                try {\n                    DepositHistory dh = new DepositHistory();\n\n                    // A: 거래 id (인덱스 0)\n//                    String idStr = formatter.formatCellValue(row.getCell(0));\n//                    if (!idStr.isEmpty()) {\n//                        try {\n//                            dh.setId(Long.parseLong(idStr.replaceAll(\"[^0-9]\", \"\")));\n//                        } catch (NumberFormatException e) {\n//                            logger.warn(\"행 {}: 거래 id 파싱 실패 - {}\", i, e.getMessage());\n//                        }\n//                    }\n\n// 거래일시 처리 (셀 인덱스 1)\n                    Cell cellB = row.getCell(1);\n                    LocalDateTime transactionDateTime = null;\n                    if (cellB != null) {\n                        String dateStr = formatter.formatCellValue(cellB);\n                        if (!dateStr.isEmpty()) {\n                            String cleaned = dateStr.replaceAll(\"[\\\\r\\\\n]+\", \" \").trim();\n                            String[] patterns = {\n                                    \"yyyy.MM.dd HH:mm:ss\",\n                                    \"yyyy-MM-dd HH:mm:ss\",\n                                    \"yyyy.MM.dd\"  // 시간 정보 없음\n                            };\n                            for (String pattern : patterns) {\n                                try {\n                                    DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern(pattern, Locale.ENGLISH);\n                                    if (pattern.equals(\"yyyy.MM.dd\")) {\n                                        LocalDate ld = LocalDate.parse(cleaned, dtf2);\n                                        transactionDateTime = ld.atStartOfDay();\n                                    } else {\n                                        transactionDateTime = LocalDateTime.parse(cleaned, dtf2);\n                                    }\n                                    break; // 성공하면 루프 탈출\n                                } catch (Exception ex) {\n                                    logger.warn(\"행 {}: 거래일시 '{}' 파싱 실패 with pattern {}: {}\", i, cleaned, pattern, ex.getMessage());\n                                }\n                            }\n                            if (transactionDateTime == null) {\n                                logger.warn(\"행 {}: 거래일시 '{}' 파싱 실패 (시도한 패턴: {})\", i, cleaned, String.join(\", \", patterns));\n                            }\n                        }\n                    }\n                    dh.setTransactionDateTime(transactionDateTime);\n\n                    // C: 적요 (인덱스 2)\n                    dh.setDescription(formatter.formatCellValue(row.getCell(2)));\n\n                    // D: 기재내용 (인덱스 3)\n                    dh.setDetails(formatter.formatCellValue(row.getCell(3)));\n\n// E: 계약자 (인덱스 4) → 고객 식별자로 활용\n                    String contractor = formatter.formatCellValue(row.getCell(4)).trim();\n                    dh.setContractor(contractor);\n                    if (!contractor.isEmpty()) {\n                        // 기존의 Optional<Customer> 대신, 해당 이름과 일치하는 고객들을 리스트로 조회\n                        List<Customer> matchingCustomers = customerRepository.findByCustomerDataNameContaining(contractor)\n                                .stream()\n                                // 이름이 정확히 일치하는 고객만 필터링 (공백 제거 등 필요한 전처리 후 비교)\n                                .filter(c -> contractor.equals(c.getCustomerData().getName()))\n                                .collect(Collectors.toList());\n\n                        if (!matchingCustomers.isEmpty()) {\n                            // 여러 고객이 검색될 경우, 고객번호(id)가 가장 높은 고객 선택\n                            Customer selectedCustomer = matchingCustomers.stream()\n                                    .max(Comparator.comparing(Customer::getId))\n                                    .get();\n                            dh.setCustomer(selectedCustomer);\n                        } else {\n                            // 고객 이름과 일치하는 결과가 없으면 기본 고객(id:1)에 할당\n                            Optional<Customer> defaultCustomerOpt = customerRepository.findById(1);\n                            if (defaultCustomerOpt.isPresent()) {\n                                dh.setCustomer(defaultCustomerOpt.get());\n                            } else {\n                                logger.warn(\"행 {}: 기본 고객(id:1)을 찾을 수 없습니다.\", i);\n                            }\n                        }\n                    }\n\n\n                    // F: 찾으신금액 (인덱스 5)\n                    String withdrawnStr = formatter.formatCellValue(row.getCell(5));\n                    if (!withdrawnStr.isEmpty()) {\n                        try {\n                            dh.setWithdrawnAmount(Long.parseLong(withdrawnStr.replaceAll(\"[^0-9]\", \"\")));\n                        } catch (Exception ex) {\n                            logger.warn(\"행 {}: 찾으신금액 파싱 실패 - {}\", i, ex.getMessage());\n                        }\n                    }\n\n                    // 맡기신금액 처리 (셀 인덱스 6)\n                    String depositAmtStr = formatter.formatCellValue(row.getCell(6));\n                    long depositAmt = 0L;\n                    if (!depositAmtStr.isEmpty()) {\n                        try {\n                            depositAmt = Long.parseLong(depositAmtStr.replaceAll(\"[^0-9]\", \"\"));\n                            dh.setDepositAmount(depositAmt);\n                        } catch (Exception ex) {\n                            logger.warn(\"행 {}: 맡기신금액 파싱 실패 - {}\", i, ex.getMessage());\n                        }\n                    }\n\n                    // H: 거래후잔액 (인덱스 7)\n                    String balanceStr = formatter.formatCellValue(row.getCell(7));\n                    if (!balanceStr.isEmpty()) {\n                        try {\n                            dh.setBalanceAfter(Long.parseLong(balanceStr.replaceAll(\"[^0-9]\", \"\")));\n                        } catch (Exception ex) {\n                            logger.warn(\"행 {}: 거래후잔액 파싱 실패 - {}\", i, ex.getMessage());\n                        }\n                    }\n\n                    // I: 취급점 (인덱스 8)\n                    dh.setBranch(formatter.formatCellValue(row.getCell(8)));\n\n                    // J: 계좌 (인덱스 9)\n                    dh.setAccount(formatter.formatCellValue(row.getCell(9)));\n\n\n                    // V: selfRecord (인덱스 21)\n                    String selfRecord = formatter.formatCellValue(row.getCell(21)).trim();\n                    // W: loanRecord (인덱스 22)\n                    String loanRecord = formatter.formatCellValue(row.getCell(22)).trim();\n\n\n                    // selfRecord 또는 loanRecord 값이 있다면 대출/자납 기록으로 처리\n                    if (!selfRecord.isEmpty() || !loanRecord.isEmpty()) {\n                        dh.setLoanStatus(\"o\");\n\n                        // 만약 loanRecord 값이 있다면 우선 loanammount에 depositAmt 저장\n                        if (!loanRecord.isEmpty()) {\n                            dh.setLoanRecord(loanRecord);\n                            // loan_details 객체가 없으면 새로 생성\n                            if (dh.getLoanDetails() == null) {\n                                dh.setLoanDetails(new Loan());\n                            }\n                            dh.getLoanDetails().setLoanammount(depositAmt);\n                        } else if (!selfRecord.isEmpty()) {\n                            // loanRecord가 없고 selfRecord만 있으면 selfammount에 depositAmt 저장\n                            dh.setSelfRecord(selfRecord);\n                            if (dh.getLoanDetails() == null) {\n                                dh.setLoanDetails(new Loan());\n                            }\n                            dh.getLoanDetails().setSelfammount(depositAmt);\n                        }\n                        // loanStatus가 \"o\"인 경우 loanselfsum에는 depositAmt를 저장\n                        if (dh.getLoanDetails() == null) {\n                            dh.setLoanDetails(new Loan());\n                        }\n                        dh.getLoanDetails().setLoanselfsum(depositAmt);\n                    } else {\n                        dh.setLoanStatus(\"\");\n                        dh.setSelfRecord(\"\");\n                        dh.setLoanRecord(\"\");\n                    }\n\n                    // loanStatus가 \"o\"라면, depositPhase1~10 중 값이 있는 항목의 Phase 번호를 targetPhases에 추가\n                    if (\"o\".equals(dh.getLoanStatus())) {\n                        ArrayList<Integer> targetPhases = new ArrayList<>();\n                        if (formatter.formatCellValue(row.getCell(11)) != null && !formatter.formatCellValue(row.getCell(11)).trim().isEmpty()) {\n                            targetPhases.add(1);\n                        }\n                        if (formatter.formatCellValue(row.getCell(12)) != null && !formatter.formatCellValue(row.getCell(12)).trim().isEmpty()) {\n                            targetPhases.add(2);\n                        }\n                        if (formatter.formatCellValue(row.getCell(13)) != null && !formatter.formatCellValue(row.getCell(13)).trim().isEmpty()) {\n                            targetPhases.add(3);\n                        }\n                        if (formatter.formatCellValue(row.getCell(14)) != null && !formatter.formatCellValue(row.getCell(14)).trim().isEmpty()) {\n                            targetPhases.add(4);\n                        }\n                        if (formatter.formatCellValue(row.getCell(15)) != null && !formatter.formatCellValue(row.getCell(15)).trim().isEmpty()) {\n                            targetPhases.add(5);\n                        }\n                        if (formatter.formatCellValue(row.getCell(16)) != null && !formatter.formatCellValue(row.getCell(16)).trim().isEmpty()) {\n                            targetPhases.add(6);\n                        }\n                        if (formatter.formatCellValue(row.getCell(17)) != null && !formatter.formatCellValue(row.getCell(17)).trim().isEmpty()) {\n                            targetPhases.add(7);\n                        }\n                        if (formatter.formatCellValue(row.getCell(18)) != null && !formatter.formatCellValue(row.getCell(18)).trim().isEmpty()) {\n                            targetPhases.add(8);\n                        }\n                        if (formatter.formatCellValue(row.getCell(19)) != null && !formatter.formatCellValue(row.getCell(19)).trim().isEmpty()) {\n                            targetPhases.add(9);\n                        }\n                        if (formatter.formatCellValue(row.getCell(20)) != null && !formatter.formatCellValue(row.getCell(20)).trim().isEmpty()) {\n                            targetPhases.add(10);\n                        }\n                        dh.setTargetPhases(targetPhases);\n                    }\n// 기존에 다른 셀들을 읽은 후, depositPhase1 셀을 추가로 읽습니다.\n                    Cell depositPhase1Cell = row.getCell(11);\n                    if (depositPhase1Cell != null) {\n                        String depositPhase1Value = formatter.formatCellValue(depositPhase1Cell).trim();\n                        dh.setDepositPhase1(depositPhase1Value);\n                        logger.info(\"Row {} depositPhase1 값: {}\", i, depositPhase1Value);\n                    } else {\n                        logger.info(\"Row {} depositPhase1 셀이 비어 있습니다.\", i);\n                    }\n                    // 저장 및 재계산 호출\n                    depositHistoryService.createDepositHistory(dh);\n                    logger.info(\"행 {} 처리 완료.\", i);\n\n                } catch (Exception e) {\n                    logger.error(\"행 {} 처리 중 예외 발생: {}\", i, e.getMessage());\n                    // 문제 발생한 행은 건너뛰고 계속 진행\n                }\n\n                // 10건마다 또는 마지막 행에서 진행률 전송\n                if ((i - startRow + 1) % 10 == 0 || i == lastRow) {\n                    try {\n                        String progressMsg = (i - startRow + 1) + \"/\" + totalRows;\n                        emitter.send(SseEmitter.event().name(\"progress\").data(progressMsg));\n                        logger.info(\"진행 상황: {}\", progressMsg);\n                    } catch (Exception ex) {\n                        logger.warn(\"행 {}에서 진행 상황 전송 중 오류: {}\", i, ex.getMessage());\n                    }\n                }\n            }\n\n            emitter.send(SseEmitter.event().name(\"complete\").data(\"Deposit excel processing complete.\"));\n            emitter.complete();\n        } catch (IOException e) {\n            logger.error(\"엑셀 파일 처리 중 IOException 발생: {}\", e.getMessage());\n            try {\n                emitter.send(SseEmitter.event().name(\"error\").data(e.getMessage()));\n            } catch (Exception ex) {\n                logger.error(\"에러 이벤트 전송 중 예외 발생: {}\", ex.getMessage());\n            }\n            emitter.completeWithError(e);\n        }\n    }\n\n    @Transactional\n    public void fillDepFormat(File tempFile, List<DepositHistory> depositHistories) throws IOException {\n        // 데이터 포매터 및 날짜 포맷터 준비\n        DataFormatter formatter = new DataFormatter(Locale.getDefault());\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault());\n\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n            int startRow = 1; // 0번 행은 헤더\n\n            for (int i = 0; i < depositHistories.size(); i++) {\n                DepositHistory dh = depositHistories.get(i);\n                Row row = sheet.getRow(startRow + i);\n                if (row == null) {\n                    row = sheet.createRow(startRow + i);\n                }\n                int col = 0;\n                Cell cell;\n\n                // Column 0: DepositHistory ID\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getId() != null ? dh.getId() : 0);\n                col++;\n\n                // Column 1: 거래일시\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getTransactionDateTime() != null ? dh.getTransactionDateTime().format(dtf) : \"\");\n                col++;\n\n                // Column 2: 적요\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDescription() != null ? dh.getDescription() : \"\");\n                col++;\n\n                // Column 3: 기재내용\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDetails() != null ? dh.getDetails() : \"\");\n                col++;\n\n                // Column 4: 계약자\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getContractor() != null ? dh.getContractor() : \"\");\n                col++;\n\n                // Column 5: 찾으신금액\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getWithdrawnAmount() != null ? dh.getWithdrawnAmount() : 0);\n                col++;\n\n                // Column 6: 맡기신금액\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositAmount() != null ? dh.getDepositAmount() : 0);\n                col++;\n\n                // Column 7: 거래후 잔액\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getBalanceAfter() != null ? dh.getBalanceAfter() : 0);\n                col++;\n\n                // Column 8: 취급점\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getBranch() != null ? dh.getBranch() : \"\");\n                col++;\n\n                // Column 9: 계좌\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getAccount() != null ? dh.getAccount() : \"\");\n                col++;\n\n                col++;\n\n                // Column 10: depositPhase1\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase1() != null ? dh.getDepositPhase1() : \"\");\n                col++;\n\n\n                // Column 11: depositPhase2\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase2() != null ? dh.getDepositPhase2() : \"\");\n                col++;\n\n                // Column 12: depositPhase3\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase3() != null ? dh.getDepositPhase3() : \"\");\n                col++;\n\n                // Column 13: depositPhase4\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase4() != null ? dh.getDepositPhase4() : \"\");\n                col++;\n\n                // Column 14: depositPhase5\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase5() != null ? dh.getDepositPhase5() : \"\");\n                col++;\n\n                // Column 15: depositPhase6\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase6() != null ? dh.getDepositPhase6() : \"\");\n                col++;\n\n                // Column 16: depositPhase7\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase7() != null ? dh.getDepositPhase7() : \"\");\n                col++;\n\n                // Column 17: depositPhase8\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase8() != null ? dh.getDepositPhase8() : \"\");\n                col++;\n\n                // Column 18: depositPhase9\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase9() != null ? dh.getDepositPhase9() : \"\");\n                col++;\n\n                // Column 19: depositPhase10\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getDepositPhase10() != null ? dh.getDepositPhase10() : \"\");\n                col++;\n\n                // Column 20: selfRec\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getSelfRecord() != null ? dh.getSelfRecord() : \"\");\n                col++;\n\n                // Column 21: loanRecord\n                cell = row.getCell(col);\n                if (cell == null) { cell = row.createCell(col); }\n                cell.setCellValue(dh.getLoanRecord() != null ? dh.getLoanRecord() : \"\");\n                col++;\n\n            } // for end\n\n            workbook.setForceFormulaRecalculation(true);\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                workbook.write(fos);\n            }\n        }\n    }\n\n\n\n}\n",
            "DepositHistoryService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.DepositHistory;\nimport com.audora.lotting_be.repository.CustomerRepository;\nimport com.audora.lotting_be.repository.DepositHistoryRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class DepositHistoryService {\n\n    private static final Logger logger = LoggerFactory.getLogger(DepositHistoryService.class);\n\n    @Autowired\n    private DepositHistoryRepository depositHistoryRepository;\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private CustomerService customerService;\n\n    /**\n     * 모든 DepositHistory 엔티티를 반환하는 메서드 (신규 추가)\n     */\n    public List<DepositHistory> getAllDepositHistories() {\n        return depositHistoryRepository.findAll();\n    }\n\n    @Transactional\n    public DepositHistory createDepositHistory(DepositHistory depositHistory) {\n        logger.info(\"createDepositHistory 시작. 고객 ID: {}\",\n                depositHistory.getCustomer() != null ? depositHistory.getCustomer().getId() : \"null\");\n\n        if (depositHistory.getCustomer() == null || depositHistory.getCustomer().getId() == null) {\n            throw new IllegalArgumentException(\"입금내역 생성 시 고객 ID 정보가 필요합니다.\");\n        }\n        Customer customer = customerRepository.findById(depositHistory.getCustomer().getId())\n                .orElseThrow(() -> new IllegalArgumentException(\"해당 고객을 찾을 수 없습니다.\"));\n        depositHistory.setCustomer(customer);\n\n        DepositHistory saved = depositHistoryRepository.save(depositHistory);\n\n        try {\n            // 재계산 유도 전 depositPhase1이 기록용(예상치 못한 값)인지 확인\n                        if(!customer.getId().equals(1)){\n                if (depositHistory.getDepositPhase1() == null || depositHistory.getDepositPhase1().equals(\"\") ||\n                        (\"0\".equals(depositHistory.getDepositPhase1()) ||\n                                \"1\".equals(depositHistory.getDepositPhase1()) ||\n                                \"2\".equals(depositHistory.getDepositPhase1()))) {\n                    logger.info(\"createDepositHistory: 재계산 시작 for 고객 id: {}\", customer.getId());\n                    customerService.recalculateEverything(customer);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"createDepositHistory 중 재계산 실패, 고객 id {}: {}\", customer.getId(), e.getMessage());\n            // 필요시 추가 처리\n        }\n        saved = depositHistoryRepository.findById(saved.getId()).orElse(saved);\n        logger.info(\"createDepositHistory 완료, 저장된 DepositHistory id: {}\", saved.getId());\n        return saved;\n    }\n\n    @Transactional\n    public DepositHistory updateDepositHistory(Long id, DepositHistory updatedDepositHistory) {\n        logger.info(\"updateDepositHistory 시작. 대상 DepositHistory id: {}\", id);\n        DepositHistory existing = depositHistoryRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"입금내역을 찾을 수 없습니다.\"));\n        Customer customer = existing.getCustomer();\n\n        if (updatedDepositHistory.getCustomer() != null && updatedDepositHistory.getCustomer().getId() != null) {\n            if (!customer.getId().equals(updatedDepositHistory.getCustomer().getId())) {\n                throw new IllegalArgumentException(\"해당 입금내역의 고객 ID가 일치하지 않습니다.\");\n            }\n        }\n\n        // 필드 업데이트 (depositPhase1~10은 기록용 값 유지)\n        existing.setTransactionDateTime(updatedDepositHistory.getTransactionDateTime());\n        existing.setDescription(updatedDepositHistory.getDescription());\n        existing.setDetails(updatedDepositHistory.getDetails());\n        existing.setContractor(updatedDepositHistory.getContractor());\n        existing.setWithdrawnAmount(updatedDepositHistory.getWithdrawnAmount());\n        existing.setDepositAmount(updatedDepositHistory.getDepositAmount());\n        existing.setBranch(updatedDepositHistory.getBranch());\n        existing.setAccount(updatedDepositHistory.getAccount());\n        existing.setLoanStatus(updatedDepositHistory.getLoanStatus());\n        existing.setLoanDate(updatedDepositHistory.getLoanDate());\n        existing.setRemarks(updatedDepositHistory.getRemarks());\n        existing.setLoanDetails(updatedDepositHistory.getLoanDetails());\n        existing.setTargetPhases(updatedDepositHistory.getTargetPhases());\n\n        DepositHistory saved = depositHistoryRepository.save(existing);\n\n        try {\n            // 재계산: depositPhase1이 허용된 값일 때만 처리\n            if (existing.getDepositPhase1() == null ||\n                    (\"0\".equals(existing.getDepositPhase1()) ||\n                            \"1\".equals(existing.getDepositPhase1()) ||\n                            \"2\".equals(existing.getDepositPhase1()))) {\n                logger.info(\"updateDepositHistory: 재계산 시작 for 고객 id: {}\", customer.getId());\n                customerService.recalculateEverything(customer);\n            }\n        } catch (Exception e) {\n            logger.error(\"updateDepositHistory 중 재계산 실패, 고객 id {}: {}\", customer.getId(), e.getMessage());\n        }\n        saved = depositHistoryRepository.findById(saved.getId()).orElse(saved);\n        logger.info(\"updateDepositHistory 완료, 업데이트된 DepositHistory id: {}\", saved.getId());\n        return saved;\n    }\n\n    @Transactional\n    public void deleteDepositHistory(Long id) {\n        logger.info(\"deleteDepositHistory 시작. 대상 DepositHistory id: {}\", id);\n        DepositHistory dh = depositHistoryRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"입금내역을 찾을 수 없습니다.\"));\n        Customer customer = dh.getCustomer();\n\n        if (customer.getDepositHistories() != null) {\n            customer.getDepositHistories().remove(dh);\n        }\n        depositHistoryRepository.delete(dh);\n\n        try {\n            // 삭제 후 고객의 depositHistories 컬렉션을 DB에서 새로 조회하여 최신 상태로 갱신\n            customer.setDepositHistories(\n                    depositHistoryRepository.findAll().stream()\n                            .filter(history -> history.getCustomer().getId().equals(customer.getId()))\n                            .collect(Collectors.toList())\n            );\n            // 재계산: depositPhase1이 허용된 값(\"0\", \"1\", \"2\")일 때만 처리 (대출 기록도 depositPhase1가 null이면 재계산)\n            if (dh.getDepositPhase1() == null ||\n                    (\"0\".equals(dh.getDepositPhase1()) ||\n                            \"1\".equals(dh.getDepositPhase1()) ||\n                            \"2\".equals(dh.getDepositPhase1()))) {\n                logger.info(\"deleteDepositHistory: 재계산 시작 for 고객 id: {}\", customer.getId());\n                customerService.recalculateEverything(customer);\n            }\n        } catch (Exception e) {\n            logger.error(\"deleteDepositHistory 중 재계산 실패, 고객 id {}: {}\", customer.getId(), e.getMessage());\n        }\n        logger.info(\"deleteDepositHistory 완료. 대상 DepositHistory id: {}\", id);\n    }\n\n}\n",
            "ExcelService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.customer.Status;\nimport com.audora.lotting_be.model.customer.minor.Agenda;\nimport com.audora.lotting_be.model.customer.Attachments;\nimport com.audora.lotting_be.model.customer.minor.Cancel;\nimport com.audora.lotting_be.model.customer.minor.CustomerData;\nimport com.audora.lotting_be.model.customer.minor.Dahim;\nimport com.audora.lotting_be.model.customer.minor.Deposit;\nimport com.audora.lotting_be.model.customer.minor.Financial;\nimport com.audora.lotting_be.model.customer.minor.Firstemp;\nimport com.audora.lotting_be.model.customer.minor.LegalAddress;\nimport com.audora.lotting_be.model.customer.minor.Loan;\nimport com.audora.lotting_be.model.customer.minor.Meetingattend;\nimport com.audora.lotting_be.model.customer.minor.MGM;\nimport com.audora.lotting_be.model.customer.minor.Postreceive;\nimport com.audora.lotting_be.model.customer.minor.Responsible;\nimport com.audora.lotting_be.model.customer.minor.Secondemp;\nimport com.audora.lotting_be.model.customer.Phase;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellType;\nimport org.apache.poi.ss.usermodel.DataFormatter;\nimport org.apache.poi.ss.usermodel.DateUtil;\nimport org.apache.poi.ss.usermodel.FormulaEvaluator;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.*;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\nimport java.util.List;\nimport java.util.Locale;\n\n@Service\npublic class ExcelService {\n\n    @Autowired\n    private CustomerService customerService;\n\n    public void fillRegFormat(File tempFile, List<Customer> customers, SseEmitter emitter) throws IOException {\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n            int rowIndex = 2;\n            int total = customers.size();\n\n            for (int i = 0; i < total; i++) {\n                Customer customer = customers.get(i);\n\n                // 고객 id가 1이면 건너뛰기\n                if (customer.getId() == 1) {\n                    continue;\n                }\n                System.out.println(customer.getId());\n\n                // 해당 행 가져오기(없으면 생성)\n                Row row = sheet.getRow(rowIndex);\n                if (row == null) {\n                    row = sheet.createRow(rowIndex);\n                }\n\n                //고객정보 기입시작 code spread start\n                // ── 기본 정보 ──\n                // Column A (0): 관리번호\n                Cell cellA = row.getCell(0);\n                if (cellA == null) cellA = row.createCell(0);\n                cellA.setCellValue(customer.getId());\n\n                // Column B (1): 분류(회원)\n                Cell cellB = row.getCell(1);\n                if (cellB == null) cellB = row.createCell(1);\n                cellB.setCellValue(customer.getCustomertype() != null ? customer.getCustomertype() : \"\");\n\n                // Column C (2): 타입\n                Cell cellC = row.getCell(2);\n                if (cellC == null) cellC = row.createCell(2);\n                cellC.setCellValue(customer.getType() != null ? customer.getType() : \"\");\n\n                // Column D (3): 군\n                Cell cellD = row.getCell(3);\n                if (cellD == null) cellD = row.createCell(3);\n                cellD.setCellValue(customer.getGroupname() != null ? customer.getGroupname() : \"\");\n\n                // Column E (4): 순번\n                Cell cellE = row.getCell(4);\n                if (cellE == null) cellE = row.createCell(4);\n                cellE.setCellValue(customer.getTurn() != null ? customer.getTurn() : \"\");\n\n                // Column F (5): 7차면제\n                Cell cellF = row.getCell(5);\n                if (cellF == null) cellF = row.createCell(5);\n                cellF.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getExemption7())) ? \"o\" : \"\");\n\n                // Column G (6): 임시동호\n                Cell cellG = row.getCell(6);\n                if (cellG == null) cellG = row.createCell(6);\n                cellG.setCellValue(customer.getTemptype() != null ? customer.getTemptype() : \"\");\n\n                // Column H (7): 가입차순\n                Cell cellH = row.getCell(7);\n                if (cellH == null) cellH = row.createCell(7);\n                cellH.setCellValue(customer.getBatch() != null ? customer.getBatch() : \"\");\n\n                // Column I (8): 신탁사제출\n                Cell cellI = row.getCell(8);\n                if (cellI == null) cellI = row.createCell(8);\n                cellI.setCellValue((customer.getFinancial() != null && customer.getFinancial().getTrustcompanydate() != null)\n                        ? customer.getFinancial().getTrustcompanydate().toString() : \"\");\n\n                // Column J (9): 가입일자\n                Cell cellJ = row.getCell(9);\n                if (cellJ == null) cellJ = row.createCell(9);\n                cellJ.setCellValue(customer.getRegisterdate() != null ? customer.getRegisterdate().toString() : \"\");\n\n                // Column K (10): 가입가\n                Cell cellK = row.getCell(10);\n                if (cellK == null) cellK = row.createCell(10);\n                cellK.setCellValue(customer.getRegisterprice() != null ? customer.getRegisterprice() : 0);\n\n                // Column L (11): 지산A동계약서\n                Cell cellL = row.getCell(11);\n                if (cellL == null) cellL = row.createCell(11);\n                cellL.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getContract())) ? \"1\" : \"\");\n\n                // Column M (12): 동의서\n                Cell cellM = row.getCell(12);\n                if (cellM == null) cellM = row.createCell(12);\n                cellM.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getAgreement())) ? \"1\" : \"\");\n\n                // Column N (13): 성명\n                Cell cellN = row.getCell(13);\n                if (cellN == null) cellN = row.createCell(13);\n                cellN.setCellValue((customer.getCustomerData() != null && customer.getCustomerData().getName() != null)\n                        ? customer.getCustomerData().getName() : \"\");\n\n                // Column O (14): 주민번호 (resnumfront-resnumback)\n                Cell cellO = row.getCell(14);\n                if (cellO == null) cellO = row.createCell(14);\n                if (customer.getCustomerData() != null\n                        && customer.getCustomerData().getResnumfront() != null\n                        && customer.getCustomerData().getResnumback() != null) {\n                    cellO.setCellValue(customer.getCustomerData().getResnumfront() + \"-\" + customer.getCustomerData().getResnumback());\n                } else {\n                    cellO.setCellValue(\"\");\n                }\n\n                // Column P (15): 휴대전화\n                Cell cellP = row.getCell(15);\n                if (cellP == null) cellP = row.createCell(15);\n                cellP.setCellValue((customer.getCustomerData() != null && customer.getCustomerData().getPhone() != null)\n                        ? customer.getCustomerData().getPhone() : \"\");\n\n                // Column Q (16): 법정주소 우편번호\n                Cell cellQ2 = row.getCell(16);\n                if (cellQ2 == null) cellQ2 = row.createCell(16);\n                cellQ2.setCellValue((customer.getLegalAddress() != null && customer.getLegalAddress().getPostnumber() != null)\n                        ? customer.getLegalAddress().getPostnumber() : \"\");\n\n                // ── 법정주소 도/군 분리 ──\n                String legalPostFull = (customer.getLegalAddress() != null && customer.getLegalAddress().getPost() != null)\n                        ? customer.getLegalAddress().getPost() : \"\";\n                String[] legalParts = legalPostFull.split(\"\\\\s+\");\n                String legalDo = legalParts.length >= 1 ? legalParts[0] : \"\";\n                String legalGun = legalParts.length >= 2 ? legalParts[1] : \"\";\n                // Column R (17): 법정주소 - 도\n                Cell cellR = row.getCell(17);\n                if (cellR == null) cellR = row.createCell(17);\n                cellR.setCellValue(legalDo);\n                // Column S (18): 법정주소 - 군\n                Cell cellS = row.getCell(18);\n                if (cellS == null) cellS = row.createCell(18);\n                cellS.setCellValue(legalGun);\n\n                // Column T (19): 법정주소 상세주소\n                Cell cellT = row.getCell(19);\n                if (cellT == null) cellT = row.createCell(19);\n                cellT.setCellValue((customer.getLegalAddress() != null && customer.getLegalAddress().getDetailaddress() != null)\n                        ? customer.getLegalAddress().getDetailaddress() : \"\");\n\n                // Column U (20): 금융기관 은행명\n                Cell cellU = row.getCell(20);\n                if (cellU == null) cellU = row.createCell(20);\n                cellU.setCellValue((customer.getFinancial() != null && customer.getFinancial().getBankname() != null)\n                        ? customer.getFinancial().getBankname() : \"\");\n\n                // Column V (21): 금융기관 계좌번호\n                Cell cellV = row.getCell(21);\n                if (cellV == null) cellV = row.createCell(21);\n                cellV.setCellValue((customer.getFinancial() != null && customer.getFinancial().getAccountnum() != null)\n                        ? customer.getFinancial().getAccountnum() : \"\");\n\n                // Column W (22): 금융기관 예금주\n                Cell cellW = row.getCell(22);\n                if (cellW == null) cellW = row.createCell(22);\n                cellW.setCellValue((customer.getFinancial() != null && customer.getFinancial().getAccountholder() != null)\n                        ? customer.getFinancial().getAccountholder() : \"\");\n\n                // Column X (23): 금융기관 신탁사\n                Cell cellX = row.getCell(23);\n                if (cellX == null) cellX = row.createCell(23);\n                cellX.setCellValue((customer.getFinancial() != null && customer.getFinancial().getTrustcompany() != null)\n                        ? customer.getFinancial().getTrustcompany() : \"\");\n\n                // Column Y (24): 예약금 납입일자\n                Cell cellY = row.getCell(24);\n                if (cellY == null) cellY = row.createCell(24);\n                cellY.setCellValue((customer.getDeposits() != null && customer.getDeposits().getDepositdate() != null)\n                        ? customer.getDeposits().getDepositdate().toString() : \"\");\n\n                // Column Z (25): 예약금 금액\n                Cell cellZ = row.getCell(25);\n                if (cellZ == null) cellZ = row.createCell(25);\n                cellZ.setCellValue((customer.getDeposits() != null && customer.getDeposits().getDepositammount() != null)\n                        ? customer.getDeposits().getDepositammount() : 0);\n\n                // ── Phase 데이터 ──\n                // Phase 1 (인덱스 0)\n                // Column AA (26): 1차 완납일자\n                Cell cellAA = row.getCell(26);\n                if (cellAA == null) cellAA = row.createCell(26);\n                cellAA.setCellValue((customer.getPhases() != null && customer.getPhases().size() > 0\n                        && customer.getPhases().get(0).getFullpaiddate() != null)\n                        ? customer.getPhases().get(0).getFullpaiddate().toString() : \"\");\n                // Column AB (27): 1차 부담금\n                Cell cellAB = row.getCell(27);\n                if (cellAB == null) cellAB = row.createCell(27);\n                cellAB.setCellValue((customer.getPhases() != null && customer.getPhases().size() > 0\n                        && customer.getPhases().get(0).getCharge() != null)\n                        ? customer.getPhases().get(0).getCharge() : 0);\n                // Column AC (28): 1차 업무대행비\n                Cell cellAC = row.getCell(28);\n                if (cellAC == null) cellAC = row.createCell(28);\n                cellAC.setCellValue((customer.getPhases() != null && customer.getPhases().size() > 0\n                        && customer.getPhases().get(0).getService() != null)\n                        ? customer.getPhases().get(0).getService() : 0);\n                // Column AD (29): 1차 이동\n                Cell cellAD = row.getCell(29);\n                if (cellAD == null) cellAD = row.createCell(29);\n                cellAD.setCellValue((customer.getPhases() != null && customer.getPhases().size() > 0\n                        && customer.getPhases().get(0).getMove() != null)\n                        ? customer.getPhases().get(0).getMove() : \"\");\n                // Column AE (30): 1차 합\n                Cell cellAE = row.getCell(30);\n                if (cellAE == null) cellAE = row.createCell(30);\n                cellAE.setCellValue((customer.getPhases() != null && customer.getPhases().size() > 0\n                        && customer.getPhases().get(0).getFeesum() != null)\n                        ? customer.getPhases().get(0).getFeesum() : 0);\n\n                // Phase 2 (인덱스 1) – 예정일자 조건 처리\n                // Column AF (31): 2차 예정일자\n                Cell cellAF = row.getCell(31);\n                if (cellAF == null) cellAF = row.createCell(31);\n                if (customer.getPhases() != null && customer.getPhases().size() > 1) {\n                    Phase phase2 = customer.getPhases().get(1);\n                    if (phase2.getPlanneddate() != null && !phase2.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellAF.setCellValue(phase2.getPlanneddate().toString());\n                    } else {\n                        cellAF.setCellValue(phase2.getPlanneddateString() != null ? phase2.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellAF.setCellValue(\"\");\n                }\n                // Column AG (32): 2차 완납일자\n                Cell cellAG = row.getCell(32);\n                if (cellAG == null) cellAG = row.createCell(32);\n                if (customer.getPhases() != null && customer.getPhases().size() > 1) {\n                    Phase phase2 = customer.getPhases().get(1);\n                    cellAG.setCellValue(phase2.getFullpaiddate() != null ? phase2.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellAG.setCellValue(\"\");\n                }\n                // Column AH (33): 2차 부담금\n                Cell cellAH = row.getCell(33);\n                if (cellAH == null) cellAH = row.createCell(33);\n                if (customer.getPhases() != null && customer.getPhases().size() > 1) {\n                    Phase phase2 = customer.getPhases().get(1);\n                    cellAH.setCellValue(phase2.getCharge() != null ? phase2.getCharge() : 0);\n                } else {\n                    cellAH.setCellValue(0);\n                }\n                // Column AI (34): 2차 할인액\n                Cell cellAI = row.getCell(34);\n                if (cellAI == null) cellAI = row.createCell(34);\n                if (customer.getPhases() != null && customer.getPhases().size() > 1) {\n                    Phase phase2 = customer.getPhases().get(1);\n                    cellAI.setCellValue(phase2.getDiscount() != null ? Math.abs(phase2.getDiscount()) : 0);\n                } else {\n                    cellAI.setCellValue(0);\n                }\n                // Column AJ (35): 2차 업무대행비\n                Cell cellAJ = row.getCell(35);\n                if (cellAJ == null) cellAJ = row.createCell(35);\n                if (customer.getPhases() != null && customer.getPhases().size() > 1) {\n                    Phase phase2 = customer.getPhases().get(1);\n                    cellAJ.setCellValue(phase2.getService() != null ? phase2.getService() : 0);\n                } else {\n                    cellAJ.setCellValue(0);\n                }\n                // Column AK (36): 2차 이동\n                Cell cellAK = row.getCell(36);\n                if (cellAK == null) cellAK = row.createCell(36);\n                if (customer.getPhases() != null && customer.getPhases().size() > 1) {\n                    Phase phase2 = customer.getPhases().get(1);\n                    cellAK.setCellValue(phase2.getMove() != null ? phase2.getMove() : \"\");\n                } else {\n                    cellAK.setCellValue(\"\");\n                }\n                // Column AL (37): 2차 합\n                Cell cellAL = row.getCell(37);\n                if (cellAL == null) cellAL = row.createCell(37);\n                if (customer.getPhases() != null && customer.getPhases().size() > 1) {\n                    Phase phase2 = customer.getPhases().get(1);\n                    cellAL.setCellValue(phase2.getFeesum() != null ? phase2.getFeesum() : 0);\n                } else {\n                    cellAL.setCellValue(0);\n                }\n\n                // Phase 3 (인덱스 2) – 예정일자 조건 처리\n                // Column AM (38): 3차 예정일자\n                Cell cellAM = row.getCell(38);\n                if (cellAM == null) cellAM = row.createCell(38);\n                if (customer.getPhases() != null && customer.getPhases().size() > 2) {\n                    Phase phase3 = customer.getPhases().get(2);\n                    if (phase3.getPlanneddate() != null && !phase3.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellAM.setCellValue(phase3.getPlanneddate().toString());\n                    } else {\n                        cellAM.setCellValue(phase3.getPlanneddateString() != null ? phase3.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellAM.setCellValue(\"\");\n                }\n                // Column AN (39): 3차 완납일자\n                Cell cellAN = row.getCell(39);\n                if (cellAN == null) cellAN = row.createCell(39);\n                if (customer.getPhases() != null && customer.getPhases().size() > 2) {\n                    Phase phase3 = customer.getPhases().get(2);\n                    cellAN.setCellValue(phase3.getFullpaiddate() != null ? phase3.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellAN.setCellValue(\"\");\n                }\n                // Column AO (40): 3차 부담금\n                Cell cellAO = row.getCell(40);\n                if (cellAO == null) cellAO = row.createCell(40);\n                if (customer.getPhases() != null && customer.getPhases().size() > 2) {\n                    Phase phase3 = customer.getPhases().get(2);\n                    cellAO.setCellValue(phase3.getCharge() != null ? phase3.getCharge() : 0);\n                } else {\n                    cellAO.setCellValue(0);\n                }\n                // Column AP (41): 3차 할인액\n                Cell cellAP = row.getCell(41);\n                if (cellAP == null) cellAP = row.createCell(41);\n                if (customer.getPhases() != null && customer.getPhases().size() > 2) {\n                    Phase phase3 = customer.getPhases().get(2);\n                    cellAP.setCellValue(phase3.getDiscount() != null ? Math.abs(phase3.getDiscount()) : 0);\n                } else {\n                    cellAP.setCellValue(0);\n                }\n                // Column AQ (42): 3차 업무대행비\n                Cell cellAQ = row.getCell(42);\n                if (cellAQ == null) cellAQ = row.createCell(42);\n                if (customer.getPhases() != null && customer.getPhases().size() > 2) {\n                    Phase phase3 = customer.getPhases().get(2);\n                    cellAQ.setCellValue(phase3.getService() != null ? phase3.getService() : 0);\n                } else {\n                    cellAQ.setCellValue(0);\n                }\n                // Column AR (43): 3차 이동\n                Cell cellAR = row.getCell(43);\n                if (cellAR == null) cellAR = row.createCell(43);\n                if (customer.getPhases() != null && customer.getPhases().size() > 2) {\n                    Phase phase3 = customer.getPhases().get(2);\n                    cellAR.setCellValue(phase3.getMove() != null ? phase3.getMove() : \"\");\n                } else {\n                    cellAR.setCellValue(\"\");\n                }\n                // Column AS (44): 3차 합\n                Cell cellAS = row.getCell(44);\n                if (cellAS == null) cellAS = row.createCell(44);\n                if (customer.getPhases() != null && customer.getPhases().size() > 2) {\n                    Phase phase3 = customer.getPhases().get(2);\n                    cellAS.setCellValue(phase3.getFeesum() != null ? phase3.getFeesum() : 0);\n                } else {\n                    cellAS.setCellValue(0);\n                }\n\n                // Phase 4 (인덱스 3) – 예정일자 조건 처리\n                // Column AT (45): 4차 예정일자\n                Cell cellAT = row.getCell(45);\n                if (cellAT == null) cellAT = row.createCell(45);\n                if (customer.getPhases() != null && customer.getPhases().size() > 3) {\n                    Phase phase4 = customer.getPhases().get(3);\n                    if (phase4.getPlanneddate() != null && !phase4.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellAT.setCellValue(phase4.getPlanneddate().toString());\n                    } else {\n                        cellAT.setCellValue(phase4.getPlanneddateString() != null ? phase4.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellAT.setCellValue(\"\");\n                }\n                // Column AU (46): 4차 완납일자\n                Cell cellAU = row.getCell(46);\n                if (cellAU == null) cellAU = row.createCell(46);\n                if (customer.getPhases() != null && customer.getPhases().size() > 3) {\n                    Phase phase4 = customer.getPhases().get(3);\n                    cellAU.setCellValue(phase4.getFullpaiddate() != null ? phase4.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellAU.setCellValue(\"\");\n                }\n                // Column AV (47): 4차 부담금\n                Cell cellAV = row.getCell(47);\n                if (cellAV == null) cellAV = row.createCell(47);\n                if (customer.getPhases() != null && customer.getPhases().size() > 3) {\n                    Phase phase4 = customer.getPhases().get(3);\n                    cellAV.setCellValue(phase4.getCharge() != null ? phase4.getCharge() : 0);\n                } else {\n                    cellAV.setCellValue(0);\n                }\n                // Column AW (48): 4차 할인액\n                Cell cellAW = row.getCell(48);\n                if (cellAW == null) cellAW = row.createCell(48);\n                if (customer.getPhases() != null && customer.getPhases().size() > 3) {\n                    Phase phase4 = customer.getPhases().get(3);\n                    cellAW.setCellValue(phase4.getDiscount() != null ? Math.abs(phase4.getDiscount()) : 0);\n                } else {\n                    cellAW.setCellValue(0);\n                }\n                // Column AX (49): 4차 업무대행비\n                Cell cellAX = row.getCell(49);\n                if (cellAX == null) cellAX = row.createCell(49);\n                if (customer.getPhases() != null && customer.getPhases().size() > 3) {\n                    Phase phase4 = customer.getPhases().get(3);\n                    cellAX.setCellValue(phase4.getService() != null ? phase4.getService() : 0);\n                } else {\n                    cellAX.setCellValue(0);\n                }\n                // Column AY (50): 4차 이동\n                Cell cellAY = row.getCell(50);\n                if (cellAY == null) cellAY = row.createCell(50);\n                if (customer.getPhases() != null && customer.getPhases().size() > 3) {\n                    Phase phase4 = customer.getPhases().get(3);\n                    cellAY.setCellValue(phase4.getMove() != null ? phase4.getMove() : \"\");\n                } else {\n                    cellAY.setCellValue(\"\");\n                }\n                // Column AZ (51): 4차 합\n                Cell cellAZ = row.getCell(51);\n                if (cellAZ == null) cellAZ = row.createCell(51);\n                if (customer.getPhases() != null && customer.getPhases().size() > 3) {\n                    Phase phase4 = customer.getPhases().get(3);\n                    cellAZ.setCellValue(phase4.getFeesum() != null ? phase4.getFeesum() : 0);\n                } else {\n                    cellAZ.setCellValue(0);\n                }\n\n                // Phase 5 (인덱스 4) – 예정일자 조건 처리\n                // Column BA (52): 5차 예정일자\n                Cell cellBA = row.getCell(52);\n                if (cellBA == null) cellBA = row.createCell(52);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    if (phase5.getPlanneddate() != null && !phase5.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellBA.setCellValue(phase5.getPlanneddate().toString());\n                    } else {\n                        cellBA.setCellValue(phase5.getPlanneddateString() != null ? phase5.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellBA.setCellValue(\"\");\n                }\n                // Column BB (53): 5차 완납일자\n                Cell cellBB = row.getCell(53);\n                if (cellBB == null) cellBB = row.createCell(53);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    cellBB.setCellValue(phase5.getFullpaiddate() != null ? phase5.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellBB.setCellValue(\"\");\n                }\n                // Column BC (54): 5차 부담금\n                Cell cellBC = row.getCell(54);\n                if (cellBC == null) cellBC = row.createCell(54);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    cellBC.setCellValue(phase5.getCharge() != null ? phase5.getCharge() : 0);\n                } else {\n                    cellBC.setCellValue(0);\n                }\n                // Column BD (55): 5차 할인액\n                Cell cellBD = row.getCell(55);\n                if (cellBD == null) cellBD = row.createCell(55);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    cellBD.setCellValue(phase5.getDiscount() != null ? Math.abs(phase5.getDiscount()) : 0);\n                } else {\n                    cellBD.setCellValue(0);\n                }\n                // Column BE (56): 5차 면제금액\n                Cell cellBE = row.getCell(56);\n                if (cellBE == null) cellBE = row.createCell(56);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    cellBE.setCellValue(phase5.getExemption() != null ? Math.abs(phase5.getExemption()) : 0);\n                } else {\n                    cellBE.setCellValue(0);\n                }\n                // Column BF (57): 5차 업무대행비\n                Cell cellBF = row.getCell(57);\n                if (cellBF == null) cellBF = row.createCell(57);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    cellBF.setCellValue(phase5.getService() != null ? phase5.getService() : 0);\n                } else {\n                    cellBF.setCellValue(0);\n                }\n                // Column BG (58): 5차 이동\n                Cell cellBG = row.getCell(58);\n                if (cellBG == null) cellBG = row.createCell(58);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    cellBG.setCellValue(phase5.getMove() != null ? phase5.getMove() : \"\");\n                } else {\n                    cellBG.setCellValue(\"\");\n                }\n                // Column BH (59): 5차 합\n                Cell cellBH = row.getCell(59);\n                if (cellBH == null) cellBH = row.createCell(59);\n                if (customer.getPhases() != null && customer.getPhases().size() > 4) {\n                    Phase phase5 = customer.getPhases().get(4);\n                    cellBH.setCellValue(phase5.getFeesum() != null ? phase5.getFeesum() : 0);\n                } else {\n                    cellBH.setCellValue(0);\n                }\n\n                // Phase 6 (인덱스 5) – 예정일자 조건 처리\n                // Column BI (60): 6차 예정일자\n                Cell cellBI = row.getCell(60);\n                if (cellBI == null) cellBI = row.createCell(60);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    if (phase6.getPlanneddate() != null && !phase6.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellBI.setCellValue(phase6.getPlanneddate().toString());\n                    } else {\n                        cellBI.setCellValue(phase6.getPlanneddateString() != null ? phase6.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellBI.setCellValue(\"\");\n                }\n                // Column BJ (61): 6차 완납일자\n                Cell cellBJ = row.getCell(61);\n                if (cellBJ == null) cellBJ = row.createCell(61);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    cellBJ.setCellValue(phase6.getFullpaiddate() != null ? phase6.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellBJ.setCellValue(\"\");\n                }\n                // Column BK (62): 6차 부담금\n                Cell cellBK = row.getCell(62);\n                if (cellBK == null) cellBK = row.createCell(62);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    cellBK.setCellValue(phase6.getCharge() != null ? phase6.getCharge() : 0);\n                } else {\n                    cellBK.setCellValue(0);\n                }\n                // Column BL (63): 6차 할인액\n                Cell cellBL = row.getCell(63);\n                if (cellBL == null) cellBL = row.createCell(63);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    cellBL.setCellValue(phase6.getDiscount() != null ? Math.abs(phase6.getDiscount()) : 0);\n                } else {\n                    cellBL.setCellValue(0);\n                }\n                // Column BM (64): 6차 면제금액\n                Cell cellBM = row.getCell(64);\n                if (cellBM == null) cellBM = row.createCell(64);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    cellBM.setCellValue(phase6.getExemption() != null ? Math.abs(phase6.getExemption()) : 0);\n                } else {\n                    cellBM.setCellValue(0);\n                }\n                // Column BN (65): 6차 업무대행비\n                Cell cellBN = row.getCell(65);\n                if (cellBN == null) cellBN = row.createCell(65);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    cellBN.setCellValue(phase6.getService() != null ? phase6.getService() : 0);\n                } else {\n                    cellBN.setCellValue(0);\n                }\n                // Column BO (66): 6차 이동\n                Cell cellBO = row.getCell(66);\n                if (cellBO == null) cellBO = row.createCell(66);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    cellBO.setCellValue(phase6.getMove() != null ? phase6.getMove() : \"\");\n                } else {\n                    cellBO.setCellValue(\"\");\n                }\n                // Column BP (67): 6차 합\n                Cell cellBP = row.getCell(67);\n                if (cellBP == null) cellBP = row.createCell(67);\n                if (customer.getPhases() != null && customer.getPhases().size() > 5) {\n                    Phase phase6 = customer.getPhases().get(5);\n                    cellBP.setCellValue(phase6.getFeesum() != null ? phase6.getFeesum() : 0);\n                } else {\n                    cellBP.setCellValue(0);\n                }\n\n                // Phase 7 (인덱스 6) – 예정일자 조건 처리\n                // Column BQ (68): 7차 예정일자\n                Cell cellBQ = row.getCell(68);\n                if (cellBQ == null) cellBQ = row.createCell(68);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    if (phase7.getPlanneddate() != null && !phase7.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellBQ.setCellValue(phase7.getPlanneddate().toString());\n                    } else {\n                        cellBQ.setCellValue(phase7.getPlanneddateString() != null ? phase7.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellBQ.setCellValue(\"\");\n                }\n                // Column BR (69): 7차 완납일자\n                Cell cellBR = row.getCell(69);\n                if (cellBR == null) cellBR = row.createCell(69);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    cellBR.setCellValue(phase7.getFullpaiddate() != null ? phase7.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellBR.setCellValue(\"\");\n                }\n                // Column BS (70): 7차 부담금\n                Cell cellBS = row.getCell(70);\n                if (cellBS == null) cellBS = row.createCell(70);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    cellBS.setCellValue(phase7.getCharge() != null ? phase7.getCharge() : 0);\n                } else {\n                    cellBS.setCellValue(0);\n                }\n                // Column BT (71): 7차 할인액\n                Cell cellBT = row.getCell(71);\n                if (cellBT == null) cellBT = row.createCell(71);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    cellBT.setCellValue(phase7.getDiscount() != null ? Math.abs(phase7.getDiscount()) : 0);\n                } else {\n                    cellBT.setCellValue(0);\n                }\n                // Column BU (72): 7차 면제금액\n                Cell cellBU = row.getCell(72);\n                if (cellBU == null) cellBU = row.createCell(72);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    cellBU.setCellValue(phase7.getExemption() != null ? Math.abs(phase7.getExemption()) : 0);\n                } else {\n                    cellBU.setCellValue(0);\n                }\n                // Column BV (73): 7차 업무대행비\n                Cell cellBV = row.getCell(73);\n                if (cellBV == null) cellBV = row.createCell(73);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    cellBV.setCellValue(phase7.getService() != null ? phase7.getService() : 0);\n                } else {\n                    cellBV.setCellValue(0);\n                }\n                // Column BW (74): 7차 이동\n                Cell cellBW = row.getCell(74);\n                if (cellBW == null) cellBW = row.createCell(74);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    cellBW.setCellValue(phase7.getMove() != null ? phase7.getMove() : \"\");\n                } else {\n                    cellBW.setCellValue(\"\");\n                }\n                // Column BX (75): 7차 합\n                Cell cellBX = row.getCell(75);\n                if (cellBX == null) cellBX = row.createCell(75);\n                if (customer.getPhases() != null && customer.getPhases().size() > 6) {\n                    Phase phase7 = customer.getPhases().get(6);\n                    cellBX.setCellValue(phase7.getFeesum() != null ? phase7.getFeesum() : 0);\n                } else {\n                    cellBX.setCellValue(0);\n                }\n\n                // Phase 8 (인덱스 7) – 예정일자 조건 처리\n                // Column BY (76): 8차 예정일자\n                Cell cellBY = row.getCell(76);\n                if (cellBY == null) cellBY = row.createCell(76);\n                if (customer.getPhases() != null && customer.getPhases().size() > 7) {\n                    Phase phase8 = customer.getPhases().get(7);\n                    if (phase8.getPlanneddate() != null && !phase8.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellBY.setCellValue(phase8.getPlanneddate().toString());\n                    } else {\n                        cellBY.setCellValue(phase8.getPlanneddateString() != null ? phase8.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellBY.setCellValue(\"\");\n                }\n                // Column BZ (77): 8차 완납일자\n                Cell cellBZ = row.getCell(77);\n                if (cellBZ == null) cellBZ = row.createCell(77);\n                if (customer.getPhases() != null && customer.getPhases().size() > 7) {\n                    Phase phase8 = customer.getPhases().get(7);\n                    cellBZ.setCellValue(phase8.getFullpaiddate() != null ? phase8.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellBZ.setCellValue(\"\");\n                }\n                // Column CA (78): 8차 부담금\n                Cell cellCA = row.getCell(78);\n                if (cellCA == null) cellCA = row.createCell(78);\n                if (customer.getPhases() != null && customer.getPhases().size() > 7) {\n                    Phase phase8 = customer.getPhases().get(7);\n                    cellCA.setCellValue(phase8.getCharge() != null ? phase8.getCharge() : 0);\n                } else {\n                    cellCA.setCellValue(0);\n                }\n                // Column CB (79): 8차 할인액\n                Cell cellCB = row.getCell(79);\n                if (cellCB == null) cellCB = row.createCell(79);\n                if (customer.getPhases() != null && customer.getPhases().size() > 7) {\n                    Phase phase8 = customer.getPhases().get(7);\n                    cellCB.setCellValue(phase8.getDiscount() != null ? Math.abs(phase8.getDiscount()) : 0);\n                } else {\n                    cellCB.setCellValue(0);\n                }\n                // Column CC (80): 8차 업무대행비\n                Cell cellCC = row.getCell(80);\n                if (cellCC == null) cellCC = row.createCell(80);\n                if (customer.getPhases() != null && customer.getPhases().size() > 7) {\n                    Phase phase8 = customer.getPhases().get(7);\n                    cellCC.setCellValue(phase8.getService() != null ? phase8.getService() : 0);\n                } else {\n                    cellCC.setCellValue(0);\n                }\n                // Column CD (81): 8차 이동\n                Cell cellCD = row.getCell(81);\n                if (cellCD == null) cellCD = row.createCell(81);\n                if (customer.getPhases() != null && customer.getPhases().size() > 7) {\n                    Phase phase8 = customer.getPhases().get(7);\n                    cellCD.setCellValue(phase8.getMove() != null ? phase8.getMove() : \"\");\n                } else {\n                    cellCD.setCellValue(\"\");\n                }\n                // Column CE (82): 8차 합\n                Cell cellCE = row.getCell(82);\n                if (cellCE == null) cellCE = row.createCell(82);\n                if (customer.getPhases() != null && customer.getPhases().size() > 7) {\n                    Phase phase8 = customer.getPhases().get(7);\n                    cellCE.setCellValue(phase8.getFeesum() != null ? phase8.getFeesum() : 0);\n                } else {\n                    cellCE.setCellValue(0);\n                }\n\n                // Phase 9 (인덱스 8) – 예정일자 조건 처리\n                // Column CF (83): 9차 예정일자\n                Cell cellCF = row.getCell(83);\n                if (cellCF == null) cellCF = row.createCell(83);\n                if (customer.getPhases() != null && customer.getPhases().size() > 8) {\n                    Phase phase9 = customer.getPhases().get(8);\n                    if (phase9.getPlanneddate() != null && !phase9.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellCF.setCellValue(phase9.getPlanneddate().toString());\n                    } else {\n                        cellCF.setCellValue(phase9.getPlanneddateString() != null ? phase9.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellCF.setCellValue(\"\");\n                }\n                // Column CG (84): 9차 완납일자\n                Cell cellCG = row.getCell(84);\n                if (cellCG == null) cellCG = row.createCell(84);\n                if (customer.getPhases() != null && customer.getPhases().size() > 8) {\n                    Phase phase9 = customer.getPhases().get(8);\n                    cellCG.setCellValue(phase9.getFullpaiddate() != null ? phase9.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellCG.setCellValue(\"\");\n                }\n                // Column CH (85): 9차 부담금\n                Cell cellCH = row.getCell(85);\n                if (cellCH == null) cellCH = row.createCell(85);\n                if (customer.getPhases() != null && customer.getPhases().size() > 8) {\n                    Phase phase9 = customer.getPhases().get(8);\n                    cellCH.setCellValue(phase9.getCharge() != null ? phase9.getCharge() : 0);\n                } else {\n                    cellCH.setCellValue(0);\n                }\n                // Column CI (86): 9차 할인액\n                Cell cellCI = row.getCell(86);\n                if (cellCI == null) cellCI = row.createCell(86);\n                if (customer.getPhases() != null && customer.getPhases().size() > 8) {\n                    Phase phase9 = customer.getPhases().get(8);\n                    cellCI.setCellValue(phase9.getDiscount() != null ? Math.abs(phase9.getDiscount()) : 0);\n                } else {\n                    cellCI.setCellValue(0);\n                }\n                // Column CJ (87): 9차 업무대행비\n                Cell cellCJ = row.getCell(87);\n                if (cellCJ == null) cellCJ = row.createCell(87);\n                if (customer.getPhases() != null && customer.getPhases().size() > 8) {\n                    Phase phase9 = customer.getPhases().get(8);\n                    cellCJ.setCellValue(phase9.getService() != null ? phase9.getService() : 0);\n                } else {\n                    cellCJ.setCellValue(0);\n                }\n                // Column CK (88): 9차 이동\n                Cell cellCK = row.getCell(88);\n                if (cellCK == null) cellCK = row.createCell(88);\n                if (customer.getPhases() != null && customer.getPhases().size() > 8) {\n                    Phase phase9 = customer.getPhases().get(8);\n                    cellCK.setCellValue(phase9.getMove() != null ? phase9.getMove() : \"\");\n                } else {\n                    cellCK.setCellValue(\"\");\n                }\n                // Column CL (89): 9차 합\n                Cell cellCL = row.getCell(89);\n                if (cellCL == null) cellCL = row.createCell(89);\n                if (customer.getPhases() != null && customer.getPhases().size() > 8) {\n                    Phase phase9 = customer.getPhases().get(8);\n                    cellCL.setCellValue(phase9.getFeesum() != null ? phase9.getFeesum() : 0);\n                } else {\n                    cellCL.setCellValue(0);\n                }\n\n                // Phase 10 (인덱스 9) – 예정일자 조건 처리\n                // Column CM (90): 10차 예정일자\n                Cell cellCM = row.getCell(90);\n                if (cellCM == null) cellCM = row.createCell(90);\n                if (customer.getPhases() != null && customer.getPhases().size() > 9) {\n                    Phase phase10 = customer.getPhases().get(9);\n                    if (phase10.getPlanneddate() != null && !phase10.getPlanneddate().equals(LocalDate.of(2100, 1, 1))) {\n                        cellCM.setCellValue(phase10.getPlanneddate().toString());\n                    } else {\n                        cellCM.setCellValue(phase10.getPlanneddateString() != null ? phase10.getPlanneddateString() : \"\");\n                    }\n                } else {\n                    cellCM.setCellValue(\"\");\n                }\n                // Column CN (91): 10차 완납일자\n                Cell cellCN = row.getCell(91);\n                if (cellCN == null) cellCN = row.createCell(91);\n                if (customer.getPhases() != null && customer.getPhases().size() > 9) {\n                    Phase phase10 = customer.getPhases().get(9);\n                    cellCN.setCellValue(phase10.getFullpaiddate() != null ? phase10.getFullpaiddate().toString() : \"\");\n                } else {\n                    cellCN.setCellValue(\"\");\n                }\n                // Column CO (92): 10차 부담금\n                Cell cellCO = row.getCell(92);\n                if (cellCO == null) cellCO = row.createCell(92);\n                if (customer.getPhases() != null && customer.getPhases().size() > 9) {\n                    Phase phase10 = customer.getPhases().get(9);\n                    cellCO.setCellValue(phase10.getCharge() != null ? phase10.getCharge() : 0);\n                } else {\n                    cellCO.setCellValue(0);\n                }\n                // Column CP (93): 10차 할인액\n                Cell cellCP = row.getCell(93);\n                if (cellCP == null) cellCP = row.createCell(93);\n                if (customer.getPhases() != null && customer.getPhases().size() > 9) {\n                    Phase phase10 = customer.getPhases().get(9);\n                    cellCP.setCellValue(phase10.getDiscount() != null ? Math.abs(phase10.getDiscount()) : 0);\n                } else {\n                    cellCP.setCellValue(0);\n                }\n                // Column CQ (94): 10차 업무대행비\n                Cell cellCQ = row.getCell(94);\n                if (cellCQ == null) cellCQ = row.createCell(94);\n                if (customer.getPhases() != null && customer.getPhases().size() > 9) {\n                    Phase phase10 = customer.getPhases().get(9);\n                    cellCQ.setCellValue(phase10.getService() != null ? phase10.getService() : 0);\n                } else {\n                    cellCQ.setCellValue(0);\n                }\n                // Column CR (95): 10차 이동\n                Cell cellCR = row.getCell(95);\n                if (cellCR == null) cellCR = row.createCell(95);\n                if (customer.getPhases() != null && customer.getPhases().size() > 9) {\n                    Phase phase10 = customer.getPhases().get(9);\n                    cellCR.setCellValue(phase10.getMove() != null ? phase10.getMove() : \"\");\n                } else {\n                    cellCR.setCellValue(\"\");\n                }\n                // Column CS (96): 10차 합\n                Cell cellCS = row.getCell(96);\n                if (cellCS == null) cellCS = row.createCell(96);\n                if (customer.getPhases() != null && customer.getPhases().size() > 9) {\n                    Phase phase10 = customer.getPhases().get(9);\n                    cellCS.setCellValue(phase10.getFeesum() != null ? phase10.getFeesum() : 0);\n                } else {\n                    cellCS.setCellValue(0);\n                }\n\n                // ── 최종 섹션 ──\n                // Column DA (104): 총 면제금액\n                Cell cellDA = row.getCell(104);\n                if (cellDA == null) cellDA = row.createCell(104);\n                cellDA.setCellValue((customer.getStatus() != null && customer.getStatus().getExemptionsum() != null)\n                        ? customer.getStatus().getExemptionsum() : 0);\n\n                // Column DB (105): 해약 해지일자\n                Cell cellDB = row.getCell(105);\n                if (cellDB == null) cellDB = row.createCell(105);\n                cellDB.setCellValue((customer.getCancel() != null && customer.getCancel().getCanceldate() != null)\n                        ? customer.getCancel().getCanceldate().toString() : \"\");\n\n                // Column DC (106): 해약 환급일자\n                Cell cellDC = row.getCell(106);\n                if (cellDC == null) cellDC = row.createCell(106);\n                cellDC.setCellValue((customer.getCancel() != null && customer.getCancel().getRefunddate() != null)\n                        ? customer.getCancel().getRefunddate().toString() : \"\");\n\n                // Column DD (107): 해약 환급금\n                Cell cellDD = row.getCell(107);\n                if (cellDD == null) cellDD = row.createCell(107);\n                cellDD.setCellValue((customer.getCancel() != null && customer.getCancel().getRefundamount() != null)\n                        ? customer.getCancel().getRefundamount() : 0);\n\n                // Column DE (108): 납입총액\n                Cell cellDE = row.getCell(108);\n                if (cellDE == null) cellDE = row.createCell(108);\n                cellDE.setCellValue((customer.getStatus() != null && customer.getStatus().getAmmountsum() != null)\n                        ? customer.getStatus().getAmmountsum() : 0);\n\n                // Column DF (109): 건너뛰기\n                Cell cellDF = row.getCell(109);\n                if (cellDF == null) cellDF = row.createCell(109);\n                cellDF.setCellValue(\"\");\n\n                // Column DG (110): 담당 총괄\n                Cell cellDG = row.getCell(110);\n                if (cellDG == null) cellDG = row.createCell(110);\n                cellDG.setCellValue((customer.getResponsible() != null && customer.getResponsible().getGeneralmanagement() != null)\n                        ? customer.getResponsible().getGeneralmanagement() : \"\");\n\n                // Column DH (111): 담당 본부\n                Cell cellDH = row.getCell(111);\n                if (cellDH == null) cellDH = row.createCell(111);\n                cellDH.setCellValue((customer.getResponsible() != null && customer.getResponsible().getDivision() != null)\n                        ? customer.getResponsible().getDivision() : \"\");\n\n                // Column DI (112): 담당 팀\n                Cell cellDI = row.getCell(112);\n                if (cellDI == null) cellDI = row.createCell(112);\n                cellDI.setCellValue((customer.getResponsible() != null && customer.getResponsible().getTeam() != null)\n                        ? customer.getResponsible().getTeam() : \"\");\n\n                // Column DJ (113): 담당 성명\n                Cell cellDJ = row.getCell(113);\n                if (cellDJ == null) cellDJ = row.createCell(113);\n                cellDJ.setCellValue((customer.getResponsible() != null && customer.getResponsible().getManagername() != null)\n                        ? customer.getResponsible().getManagername() : \"\");\n\n                // Column DK (114): 담당 수수료지급\n                Cell cellDK = row.getCell(114);\n                if (cellDK == null) cellDK = row.createCell(114);\n                cellDK.setCellValue((customer.getResponsible() != null && customer.getResponsible().getFeepaid() != null)\n                        ? customer.getResponsible().getFeepaid() : \"\");\n\n                // Column DL (115): 다힘 시상\n                Cell cellDL = row.getCell(115);\n                if (cellDL == null) cellDL = row.createCell(115);\n                cellDL.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimsisang() != null)\n                        ? customer.getDahim().getDahimsisang() : \"\");\n\n                // Column DM (116): 다힘 일자\n                Cell cellDM = row.getCell(116);\n                if (cellDM == null) cellDM = row.createCell(116);\n                cellDM.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimdate() != null)\n                        ? customer.getDahim().getDahimdate().toString() : \"\");\n\n                // Column DN (117): 다힘 6/30선지급\n                Cell cellDN = row.getCell(117);\n                if (cellDN == null) cellDN = row.createCell(117);\n                cellDN.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimprepaid() != null)\n                        ? customer.getDahim().getDahimprepaid() : \"\");\n\n                // Column DO (118): 다힘 1회차청구\n                Cell cellDO = row.getCell(118);\n                if (cellDO == null) cellDO = row.createCell(118);\n                cellDO.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimfirst() != null)\n                        ? customer.getDahim().getDahimfirst() : \"\");\n\n                // Column DP (119): 다힘 (1회차)금액\n                Cell cellDP = row.getCell(119);\n                if (cellDP == null) cellDP = row.createCell(119);\n                cellDP.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimfirstpay() != null)\n                        ? customer.getDahim().getDahimfirstpay() : \"\");\n\n                // Column DQ (120): 다힘 일자2 – 날짜형 우선, 없으면 문자열\n                Cell cellDQ = row.getCell(120);\n                if (cellDQ == null) cellDQ = row.createCell(120);\n                LocalDate dateDQ = getUnderlyingDate(cellDQ);\n                if (dateDQ != null) {\n                    cellDQ.setCellValue(dateDQ.toString());\n                } else {\n                    cellDQ.setCellValue(cellDQ.getStringCellValue());\n                }\n\n                // Column DR (121): 다힘 출처\n                Cell cellDR = row.getCell(121);\n                if (cellDR == null) cellDR = row.createCell(121);\n                cellDR.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimsource() != null)\n                        ? customer.getDahim().getDahimsource() : \"\");\n\n                // Column DS (122): 다힘 2회차청구\n                Cell cellDS = row.getCell(122);\n                if (cellDS == null) cellDS = row.createCell(122);\n                cellDS.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimsecond() != null)\n                        ? customer.getDahim().getDahimsecond() : \"\");\n\n                // Column DT (123): 다힘 (2회차)금액\n                Cell cellDT = row.getCell(123);\n                if (cellDT == null) cellDT = row.createCell(123);\n                cellDT.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimsecondpay() != null)\n                        ? customer.getDahim().getDahimsecondpay() : \"\");\n\n                // Column DU (124): 다힘 일자3 – 날짜형 우선, 없으면 문자열\n                Cell cellDU = row.getCell(124);\n                if (cellDU == null) cellDU = row.createCell(124);\n                LocalDate dateDU = getUnderlyingDate(cellDU);\n                if (dateDU != null) {\n                    cellDU.setCellValue(dateDU.toString());\n                } else {\n                    cellDU.setCellValue(cellDU.getStringCellValue());\n                }\n\n                // Column DV (125): 다힘 합계\n                Cell cellDV = row.getCell(125);\n                if (cellDV == null) cellDV = row.createCell(125);\n                cellDV.setCellValue((customer.getDahim() != null && customer.getDahim().getDahimsum() != null)\n                        ? customer.getDahim().getDahimsum() : \"\");\n\n                // Column DW (126): MGM 수수료 (문자 그대로)\n                Cell cellDW = row.getCell(126);\n                if (cellDW == null) {\n                    cellDW = row.createCell(126);\n                }\n                String mgmfeeStr = (customer.getMgm() != null && customer.getMgm().getMgmfee() != null)\n                        ? customer.getMgm().getMgmfee() : \"\";\n                cellDW.setCellValue(mgmfeeStr);\n\n                // Column DX (127): MGM 업체명\n                Cell cellDX = row.getCell(127);\n                if (cellDX == null) cellDX = row.createCell(127);\n                cellDX.setCellValue((customer.getMgm() != null && customer.getMgm().getMgmcompanyname() != null)\n                        ? customer.getMgm().getMgmcompanyname() : \"\");\n\n                // Column DY (128): MGM 이름\n                Cell cellDY = row.getCell(128);\n                if (cellDY == null) cellDY = row.createCell(128);\n                cellDY.setCellValue((customer.getMgm() != null && customer.getMgm().getMgmname() != null)\n                        ? customer.getMgm().getMgmname() : \"\");\n\n                // Column DZ (129): MGM 기관\n                Cell cellDZ = row.getCell(129);\n                if (cellDZ == null) cellDZ = row.createCell(129);\n                cellDZ.setCellValue((customer.getMgm() != null && customer.getMgm().getMgminstitution() != null)\n                        ? customer.getMgm().getMgminstitution() : \"\");\n\n                // Column EA (130): MGM 계좌\n                Cell cellEA = row.getCell(130);\n                if (cellEA == null) cellEA = row.createCell(130);\n                cellEA.setCellValue((customer.getMgm() != null && customer.getMgm().getMgmaccount() != null)\n                        ? customer.getMgm().getMgmaccount() : \"\");\n\n                // Column EB (131): 1차(직원) 차순\n                Cell cellEB = row.getCell(131);\n                if (cellEB == null) cellEB = row.createCell(131);\n                cellEB.setCellValue((customer.getFirstemp() != null && customer.getFirstemp().getFirstemptimes() != null)\n                        ? customer.getFirstemp().getFirstemptimes() : \"\");\n\n                // Column EC (132): 1차 지급일자\n                Cell cellEC = row.getCell(132);\n                if (cellEC == null) cellEC = row.createCell(132);\n                cellEC.setCellValue((customer.getFirstemp() != null && customer.getFirstemp().getFirstempdate() != null)\n                        ? customer.getFirstemp().getFirstempdate().toString() : \"\");\n\n                // Column ED (133): 2차(직원) 차순\n                Cell cellED = row.getCell(133);\n                if (cellED == null) cellED = row.createCell(133);\n                cellED.setCellValue((customer.getSecondemp() != null && customer.getSecondemp().getSecondemptimes() != null)\n                        ? customer.getSecondemp().getSecondemptimes() : \"\");\n\n                // Column EE (134): 2차 지급일자\n                Cell cellEE = row.getCell(134);\n                if (cellEE == null) cellEE = row.createCell(134);\n                cellEE.setCellValue((customer.getSecondemp() != null && customer.getSecondemp().getSecondempdate() != null)\n                        ? customer.getSecondemp().getSecondempdate().toString() : \"\");\n\n                // Column EF (135): 부속서류 인감증명서\n                Cell cellEF = row.getCell(135);\n                if (cellEF == null) cellEF = row.createCell(135);\n                cellEF.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getSealcertificateprovided())) ? \"o\" : \"\");\n\n                // Column EG (136): 부속서류 본인서명확인서\n                Cell cellEG = row.getCell(136);\n                if (cellEG == null) cellEG = row.createCell(136);\n                cellEG.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getSelfsignatureconfirmationprovided())) ? \"o\" : \"\");\n\n                // Column EH (137): 부속서류 신분증\n                Cell cellEH = row.getCell(137);\n                if (cellEH == null) cellEH = row.createCell(137);\n                cellEH.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getIdcopyprovided())) ? \"o\" : \"\");\n\n                // Column EI (138): 부속서류 확약서\n                Cell cellEI = row.getCell(138);\n                if (cellEI == null) cellEI = row.createCell(138);\n                cellEI.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getCommitmentletterprovided())) ? \"o\" : \"\");\n\n                // Column EJ (139): 부속서류 창준위용\n                Cell cellEJ = row.getCell(139);\n                if (cellEJ == null) cellEJ = row.createCell(139);\n                cellEJ.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getForfounding())) ? \"o\" : \"\");\n\n                // Column EK (140): 부속서류 무상옵션\n                Cell cellEK = row.getCell(140);\n                if (cellEK == null) cellEK = row.createCell(140);\n                cellEK.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getFreeoption())) ? \"o\" : \"\");\n\n                // Column EL (141): 부속서류 선호도조사\n                Cell cellEL = row.getCell(141);\n                if (cellEL == null) cellEL = row.createCell(141);\n                cellEL.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getPreferenceattachment())) ? \"o\" : \"\");\n\n                // Column EM (142): 부속서류 총회동의서\n                Cell cellEM = row.getCell(142);\n                if (cellEM == null) cellEM = row.createCell(142);\n                cellEM.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getPrizeattachment())) ? \"o\" : \"\");\n\n                // Column EN (143): 부속서류 사은품 지급일자\n                Cell cellEN = row.getCell(143);\n                if (cellEN == null) cellEN = row.createCell(143);\n                cellEN.setCellValue((customer.getAttachments() != null\n                        && customer.getAttachments().getPrizedate() != null)\n                        ? customer.getAttachments().getPrizedate().toString() : \"\");\n\n                // Column EO (144): 이메일\n                Cell cellEO = row.getCell(144);\n                if (cellEO == null) cellEO = row.createCell(144);\n                cellEO.setCellValue((customer.getCustomerData() != null\n                        && customer.getCustomerData().getEmail() != null)\n                        ? customer.getCustomerData().getEmail() : \"\");\n\n                // Column EP (145): 우편물수령주소 우편번호 (이미 처리됨)\n\n                // Column EQ (146) & ER (147) – 우편물수령주소 도/군는 이미 분리하여 처리함\n                // Column ES (148): 우편물수령주소 상세주소\n                Cell cellES = row.getCell(148);\n                if (cellES == null) cellES = row.createCell(148);\n                cellES.setCellValue((customer.getPostreceive() != null\n                        && customer.getPostreceive().getDetailaddressreceive() != null)\n                        ? customer.getPostreceive().getDetailaddressreceive() : \"\");\n\n                // Column ET (149): 비고\n                Cell cellET = row.getCell(149);\n                if (cellET == null) cellET = row.createCell(149);\n                cellET.setCellValue(customer.getAdditional() != null ? customer.getAdditional() : \"\");\n\n                // Column EU (150): 가입경로\n                Cell cellEU = row.getCell(150);\n                if (cellEU == null) cellEU = row.createCell(150);\n                cellEU.setCellValue(customer.getRegisterpath() != null ? customer.getRegisterpath() : \"\");\n\n                // Column EV (151): 총회참석 서면\n                Cell cellEV = row.getCell(151);\n                if (cellEV == null) cellEV = row.createCell(151);\n                cellEV.setCellValue((customer.getMeetingattend() != null\n                        && customer.getMeetingattend().getFtofattend() != null)\n                        ? customer.getMeetingattend().getFtofattend() : \"\");\n\n                // Column EW (152): 총회참석 직접\n                Cell cellEW = row.getCell(152);\n                if (cellEW == null) cellEW = row.createCell(152);\n                cellEW.setCellValue((customer.getMeetingattend() != null\n                        && customer.getMeetingattend().getSelfattend() != null)\n                        ? customer.getMeetingattend().getSelfattend() : \"\");\n\n                // Column EX (153): 총회참석 대리\n                Cell cellEX = row.getCell(153);\n                if (cellEX == null) cellEX = row.createCell(153);\n                cellEX.setCellValue((customer.getMeetingattend() != null\n                        && customer.getMeetingattend().getBehalfattend() != null)\n                        ? customer.getMeetingattend().getBehalfattend() : \"\");\n\n                // Column EY (154): 특이사항\n                Cell cellEY = row.getCell(154);\n                if (cellEY == null) cellEY = row.createCell(154);\n                cellEY.setCellValue(customer.getSpecialnote() != null ? customer.getSpecialnote() : \"\");\n\n                // Column EZ (155): 투표기기\n                Cell cellEZ = row.getCell(155);\n                if (cellEZ == null) cellEZ = row.createCell(155);\n                cellEZ.setCellValue(customer.getVotemachine() != null ? customer.getVotemachine() : \"\");\n\n                // Column FA (156): 안건 제1호\n                Cell cellFA = row.getCell(156);\n                if (cellFA == null) cellFA = row.createCell(156);\n                cellFA.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda1() != null)\n                        ? customer.getAgenda().getAgenda1() : \"\");\n\n                // Column FB (157): 안건 제2-1호\n                Cell cellFB = row.getCell(157);\n                if (cellFB == null) cellFB = row.createCell(157);\n                cellFB.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda2_1() != null)\n                        ? customer.getAgenda().getAgenda2_1() : \"\");\n\n                // Column FC (158): 안건 제2-2호\n                Cell cellFC = row.getCell(158);\n                if (cellFC == null) cellFC = row.createCell(158);\n                cellFC.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda2_2() != null)\n                        ? customer.getAgenda().getAgenda2_2() : \"\");\n\n                // Column FD (159): 안건 제2-3호\n                Cell cellFD = row.getCell(159);\n                if (cellFD == null) cellFD = row.createCell(159);\n                cellFD.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda2_3() != null)\n                        ? customer.getAgenda().getAgenda2_3() : \"\");\n\n                // Column FE (160): 안건 제2-4호\n                Cell cellFE = row.getCell(160);\n                if (cellFE == null) cellFE = row.createCell(160);\n                cellFE.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda2_4() != null)\n                        ? customer.getAgenda().getAgenda2_4() : \"\");\n\n                // Column FF (161): 안건 제3호\n                Cell cellFF = row.getCell(161);\n                if (cellFF == null) cellFF = row.createCell(161);\n                cellFF.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda3() != null)\n                        ? customer.getAgenda().getAgenda3() : \"\");\n\n                // Column FG (162): 안건 제4호\n                Cell cellFG = row.getCell(162);\n                if (cellFG == null) cellFG = row.createCell(162);\n                cellFG.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda4() != null)\n                        ? customer.getAgenda().getAgenda4() : \"\");\n\n                // Column FH (163): 안건 제5호\n                Cell cellFH = row.getCell(163);\n                if (cellFH == null) cellFH = row.createCell(163);\n                cellFH.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda5() != null)\n                        ? customer.getAgenda().getAgenda5() : \"\");\n\n                // Column FI (164): 안건 제6호\n                Cell cellFI = row.getCell(164);\n                if (cellFI == null) cellFI = row.createCell(164);\n                cellFI.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda6() != null)\n                        ? customer.getAgenda().getAgenda6() : \"\");\n\n                // Column FJ (165): 안건 제7호\n                Cell cellFJ = row.getCell(165);\n                if (cellFJ == null) cellFJ = row.createCell(165);\n                cellFJ.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda7() != null)\n                        ? customer.getAgenda().getAgenda7() : \"\");\n\n                // Column FK (166): 안건 제8호\n                Cell cellFK = row.getCell(166);\n                if (cellFK == null) cellFK = row.createCell(166);\n                cellFK.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda8() != null)\n                        ? customer.getAgenda().getAgenda8() : \"\");\n\n                // Column FL (167): 안건 제9호\n                Cell cellFL = row.getCell(167);\n                if (cellFL == null) cellFL = row.createCell(167);\n                cellFL.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda9() != null)\n                        ? customer.getAgenda().getAgenda9() : \"\");\n\n                // Column FM (168): 안건 제10호\n                Cell cellFM = row.getCell(168);\n                if (cellFM == null) cellFM = row.createCell(168);\n                cellFM.setCellValue((customer.getAgenda() != null && customer.getAgenda().getAgenda10() != null)\n                        ? customer.getAgenda().getAgenda10() : \"\");\n\n                // Column FN (169): 부속서류 사은품명\n                Cell cellFN = row.getCell(169);\n                if (cellFN == null) cellFN = row.createCell(169);\n                cellFN.setCellValue((customer.getAttachments() != null && customer.getAttachments().getPrizename() != null)\n                        ? customer.getAttachments().getPrizename() : \"\");\n\n                // Column FO (170): 부속서류 출자금 (flag \"o\")\n                Cell cellFO = row.getCell(170);\n                if (cellFO == null) cellFO = row.createCell(170);\n                cellFO.setCellValue((customer.getAttachments() != null\n                        && Boolean.TRUE.equals(customer.getAttachments().getInvestmentfile())) ? \"o\" : \"\");\n                //엑셀에 고객정보 기입끝 : code spread complete\n\n                rowIndex++;\n\n                // 진행 상황 업데이트 (예: \"현재 처리된 고객번호 / 전체 고객 수\")\n                try {\n                    emitter.send(SseEmitter.event().name(\"progress\").data((i + 1) + \"/\" + total));\n                } catch (Exception ex) {\n                    // 진행 상황 전송 실패시 무시\n                }\n            }\n\n            workbook.setForceFormulaRecalculation(true);\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                workbook.write(fos);\n            }\n        }\n    }\n\n    public void processExcelFileWithProgress(MultipartFile file, SseEmitter emitter) throws IOException {\n        DataFormatter formatter = new DataFormatter(Locale.getDefault());\n        // 날짜 파싱 포맷 (예: \"yy-M-d\")\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yy-M-d\");\n\n        try (InputStream is = file.getInputStream();\n             XSSFWorkbook workbook = new XSSFWorkbook(is)) {\n\n            FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n            // 예제에서는 4번째 행(인덱스 3)부터 고객 데이터가 시작된다고 가정합니다.\n            int startRow = 2;\n            int lastRow = sheet.getLastRowNum();\n            // 3) A열이 비어있는 행을 만나면 중단, 그 직전까지를 \"유효한 마지막 행\"으로 설정\n            int realLastRow = startRow;\n            for (int i = startRow; i <= lastRow; i++) {\n                Row row = sheet.getRow(i);\n                if (row == null) {\n                    // row 자체가 비어 있으면 중단\n                    break;\n                }\n\n                // A열(0번 칼럼)\n                Cell cellA = row.getCell(0);\n                String valA = (cellA != null) ? formatter.formatCellValue(cellA).trim() : \"\";\n\n                if (valA.isEmpty()) {\n                    // A열이 공백이라면 여기서 데이터가 끝났다고 판단\n                    break;\n                }\n                // 그렇지 않으면 유효한 데이터 행이므로 업데이트\n                realLastRow = i;\n            }\n            // realLastRow가 최종 유효 행\n            // 따라서 totalCustomers = (realLastRow - startRow + 1)\n            int totalCustomers = realLastRow >= startRow ? (realLastRow - startRow + 1) : 0;\n\n            // 각 행(고객)에 대해 처리\n            for (int i = startRow; i <= realLastRow; i++) {\n                org.apache.poi.ss.usermodel.Row row = sheet.getRow(i);\n                if (row == null) {\n                    // 비어있는 행은 건너뜁니다.\n                    continue;\n                }\n                // 각 행을 Customer 객체로 파싱 (필요한 모든 컬럼 매핑 구현)\n                Customer customer = parseCustomerFromRow(row, dtf, formatter, evaluator);\n                // DB에 저장 (여기서는 createCustomer 내부에서 Phase 등 추가 로직이 수행될 수 있음)\n                customerService.createCustomer(customer, false);\n\n                // 진행 상황 전송: 처리한 고객 수/전체 고객 수\n                int current = i - startRow + 1;\n                emitter.send(SseEmitter.event().name(\"progress\").data(current + \"/\" + totalCustomers));\n            }\n        }\n    }\n\n    /**\n     * 엑셀의 한 행(Row)을 읽어 Customer 객체로 매핑하는 예시 메서드\n     * 실제 구현에서는 모든 필요한 컬럼에 대해 값을 매핑하세요.\n     *\n     * @param row       엑셀의 한 행\n     * @param dtf       날짜 파싱 포맷\n     * @param formatter DataFormatter\n     * @return 매핑된 Customer 객체\n     */\n    private Customer parseCustomerFromRow(org.apache.poi.ss.usermodel.Row row, DateTimeFormatter dtf, DataFormatter formatter,FormulaEvaluator evaluator) {\n        Customer customer = new Customer();\n        // 하위 임베디드 객체 초기화\n        customer.setCustomerData(new CustomerData());\n        customer.setLegalAddress(new LegalAddress());\n        customer.setFinancial(new Financial());\n        customer.setDeposits(new Deposit());\n        customer.setAttachments(new Attachments());\n        customer.setCancel(new Cancel());\n        customer.setLoan(new Loan());\n        customer.setResponsible(new Responsible());\n        customer.setDahim(new Dahim());\n        customer.setMgm(new MGM());\n        customer.setFirstemp(new Firstemp());\n        customer.setSecondemp(new Secondemp());\n        customer.setMeetingattend(new Meetingattend());\n        customer.setAgenda(new Agenda());\n        customer.setPostreceive(new Postreceive());\n        Status status = new Status();\n        status.setCustomer(customer);\n        customer.setStatus(status);\n\n        // 예시 매핑\n        // Column A (인덱스 0): 관리번호\n        String colAcode = formatter.formatCellValue(row.getCell(0));\n        if (!colAcode.isEmpty()) {\n            try {\n                customer.setId(Integer.parseInt(colAcode.replaceAll(\"[^0-9]+\", \"\")));\n            } catch (NumberFormatException e) {\n                // 필요시 로그 처리\n            }\n        }\n\n        //엑셀파일 해부시작 excel spread start\n        // --- 첫 번째 섹션: A ~ CS (인덱스 0 ~ 96) ---\n        String colA = formatter.formatCellValue(row.getCell(0), evaluator);\n        System.out.println(\"Column A (관리번호): \" + colA);\n        if (!colA.isEmpty()) {\n            customer.setId(Integer.parseInt(colA.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colB = formatter.formatCellValue(row.getCell(1), evaluator);\n        System.out.println(\"Column B (분류(회원)): \" + colB);\n        customer.setCustomertype(colB);\n        String colC = formatter.formatCellValue(row.getCell(2), evaluator);\n        System.out.println(\"Column C (타입): \" + colC);\n        customer.setType(colC);\n        String colD = formatter.formatCellValue(row.getCell(3), evaluator);\n        System.out.println(\"Column D (군): \" + colD);\n        customer.setGroupname(colD);\n        String colE = formatter.formatCellValue(row.getCell(4), evaluator);\n        System.out.println(\"Column E (순번): \" + colE);\n        customer.setTurn(colE);\n        String colF = formatter.formatCellValue(row.getCell(5), evaluator);\n        System.out.println(\"Column F (7차면제): \" + colF);\n        customer.getAttachments().setExemption7(\"o\".equalsIgnoreCase(colF));\n        String colG = formatter.formatCellValue(row.getCell(6), evaluator);\n        System.out.println(\"Column G (임시동호): \" + colG);\n        customer.setTemptype(colG);\n        String colH = formatter.formatCellValue(row.getCell(7), evaluator);\n        System.out.println(\"Column H (가입차순): \" + colH);\n        customer.setBatch(colH);\n\n        String colI = formatter.formatCellValue(row.getCell(8), evaluator);\n        System.out.println(\"Column I (신탁사제출): \" + colI);\n        if (!colI.isEmpty()) {\n            customer.getFinancial().setTrustcompanydate(parseDate(colI, dtf));\n        }\n\n\n        String colJ = formatter.formatCellValue(row.getCell(9), evaluator);\n        System.out.println(\"Column J (가입일자): \" + colJ);\n        if (!colJ.isEmpty()) {\n            customer.setRegisterdate(parseDate(colJ, dtf));\n        }\n        String colK = formatter.formatCellValue(row.getCell(10), evaluator);\n        System.out.println(\"Column K (가입가): \" + colK);\n        if (!colK.isEmpty()) {\n            customer.setRegisterprice(Long.parseLong(colK.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colL = formatter.formatCellValue(row.getCell(11), evaluator);\n        System.out.println(\"Column L (지산A동계약서): \" + colL);\n        customer.getAttachments().setContract(\"1\".equals(colL));\n        String colM = formatter.formatCellValue(row.getCell(12), evaluator);\n        System.out.println(\"Column M (동의서): \" + colM);\n        customer.getAttachments().setAgreement(\"1\".equals(colM));\n        String colN = formatter.formatCellValue(row.getCell(13), evaluator);\n        System.out.println(\"Column N (성명): \" + colN);\n        customer.getCustomerData().setName(colN);\n        String colO = formatter.formatCellValue(row.getCell(14), evaluator);\n        System.out.println(\"Column O (주민번호): \" + colO);\n        if (colO.contains(\"-\")) {\n            String[] parts = colO.split(\"-\");\n            if (parts.length == 2) {\n                customer.getCustomerData().setResnumfront(Integer.parseInt(parts[0].replaceAll(\"[^0-9]+\", \"\")));\n                customer.getCustomerData().setResnumback(Integer.parseInt(parts[1].replaceAll(\"[^0-9]+\", \"\")));\n            }\n        }\n        String colP = formatter.formatCellValue(row.getCell(15), evaluator).replaceAll(\"[^0-9]\", \"\");\n        System.out.println(\"Column P (휴대전화): \" + colP);\n        customer.getCustomerData().setPhone(colP);\n        String colQ = formatter.formatCellValue(row.getCell(16), evaluator);\n        System.out.println(\"Column Q (법정주소 우편번호): \" + colQ);\n        customer.getLegalAddress().setPostnumber(colQ);\n        String colR = formatter.formatCellValue(row.getCell(17), evaluator);\n        String colS = formatter.formatCellValue(row.getCell(18), evaluator);\n        System.out.println(\"Column R (법정주소 도): \" + colR);\n        System.out.println(\"Column S (법정주소 군): \" + colS);\n        customer.getLegalAddress().setPost(colR + \" \" + colS);\n        String colT = formatter.formatCellValue(row.getCell(19), evaluator);\n        System.out.println(\"Column T (법정주소 상세주소): \" + colT);\n        customer.getLegalAddress().setDetailaddress(colT);\n        String colU = formatter.formatCellValue(row.getCell(20), evaluator);\n        System.out.println(\"Column U (금융기관 은행명): \" + colU);\n        customer.getFinancial().setBankname(colU);\n        String colV = formatter.formatCellValue(row.getCell(21), evaluator);\n        System.out.println(\"Column V (금융기관 계좌번호): \" + colV);\n        customer.getFinancial().setAccountnum(colV);\n        String colW = formatter.formatCellValue(row.getCell(22), evaluator);\n        System.out.println(\"Column W (금융기관 예금주): \" + colW);\n        customer.getFinancial().setAccountholder(colW);\n        String colX = formatter.formatCellValue(row.getCell(23), evaluator);\n        System.out.println(\"Column X (금융기관 신탁사): \" + colX);\n        customer.getFinancial().setTrustcompany(colX);\n        String colY = formatter.formatCellValue(row.getCell(24), evaluator);\n        System.out.println(\"Column Y (예약금 납입일자): \" + colY);\n        if (!colY.isEmpty()) {\n            customer.getDeposits().setDepositdate(parseDate(colY, dtf));\n        }\n        String colZ = formatter.formatCellValue(row.getCell(25), evaluator);\n        System.out.println(\"Column Z (예약금 금액): \" + colZ);\n        if (!colZ.isEmpty()) {\n            customer.getDeposits().setDepositammount(Long.parseLong(colZ.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAA = formatter.formatCellValue(row.getCell(26), evaluator);\n        System.out.println(\"Column AA (1차 완납일자): \" + colAA);\n        Phase phase1 = new Phase();\n        if (!colAA.isEmpty()) {\n            phase1.setFullpaiddate(parseDate(colAA, dtf));\n        }\n        String colAB = formatter.formatCellValue(row.getCell(27), evaluator);\n        System.out.println(\"Column AB (1차 부담금): \" + colAB);\n        if (!colAB.isEmpty()) {\n            phase1.setCharge(Long.parseLong(colAB.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAC = formatter.formatCellValue(row.getCell(28), evaluator);\n        System.out.println(\"Column AC (1차 업무대행비): \" + colAC);\n        if (!colAC.isEmpty()) {\n            phase1.setService(Long.parseLong(colAC.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAD = formatter.formatCellValue(row.getCell(29), evaluator);\n        System.out.println(\"Column AD (1차 이동): \" + colAD);\n        phase1.setMove(colAD);\n\n        String colAE_final = formatter.formatCellValue(row.getCell(30), evaluator).trim();\n        System.out.println(\"Column AE (1차 합): \" + colAE_final);\n        long aeValue = 0L;\n        if (!colAE_final.isEmpty()) {\n            try {\n                aeValue = Long.parseLong(colAE_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                aeValue = 0L;\n            }\n        } else {\n            aeValue = 0L;\n        }\n        phase1.setFeesum(aeValue);\n        phase1.setPhaseNumber(1);\n        phase1.setCustomer(customer);\n        customer.setPhases(new java.util.ArrayList<>());\n        customer.getPhases().add(phase1);\n\n        // --- 각 차수의 예정일자(planneddateString) 처리 ---\n        // Phase 2 (2차 예정일자: 인덱스 31)\n        String colAF = formatter.formatCellValue(row.getCell(31), evaluator);\n        System.out.println(\"Column AF (2차 예정일자): \" + colAF);\n        Phase phase2 = new Phase();\n        phase2.setPhaseNumber(2);\n        phase2.setPlanneddateString(colAF);\n        if (colAF != null && !colAF.trim().isEmpty()) {\n            phase2.setPlanneddate(parsePlannedDate(colAF));\n        }\n        String colAG = formatter.formatCellValue(row.getCell(32), evaluator);\n        System.out.println(\"Column AG (2차 완납일자): \" + colAG);\n        if (!colAG.isEmpty()) {\n            phase2.setFullpaiddate(parseDate(colAG, dtf));\n        }\n        String colAH = formatter.formatCellValue(row.getCell(33), evaluator);\n        System.out.println(\"Column AH (2차 부담금): \" + colAH);\n        if (!colAH.isEmpty()) {\n            phase2.setCharge(Long.parseLong(colAH.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAI = formatter.formatCellValue(row.getCell(34), evaluator);\n        System.out.println(\"Column AI (2차 할인액): \" + colAI);\n        if (!colAI.isEmpty()) {\n            phase2.setDiscount(Math.abs(Long.parseLong(colAI.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colAJ = formatter.formatCellValue(row.getCell(35), evaluator);\n        System.out.println(\"Column AJ (2차 업무대행비): \" + colAJ);\n        if (!colAJ.isEmpty()) {\n            phase2.setService(Long.parseLong(colAJ.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAK = formatter.formatCellValue(row.getCell(36), evaluator);\n        System.out.println(\"Column AK (2차 이동): \" + colAK);\n        phase2.setMove(colAK);\n// AL: 2차 합 (예: index 37)\n        String colAL_final = formatter.formatCellValue(row.getCell(37), evaluator).trim();\n        System.out.println(\"Column AL (2차 합): \" + colAL_final);\n        long alValue = 0L;\n        if (!colAL_final.isEmpty()) {\n            try {\n                alValue = Long.parseLong(colAL_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                alValue = 0L;\n            }\n        } else {\n            alValue = 0L;\n        }\n        phase2.setFeesum(alValue);\n        phase2.setCustomer(customer);\n        customer.getPhases().add(phase2);\n\n        // Phase 3 (3차 예정일자: 인덱스 38)\n        String colAM = formatter.formatCellValue(row.getCell(38), evaluator);\n        System.out.println(\"Column AM (3차 예정일자): \" + colAM);\n        Phase phase3 = new Phase();\n        phase3.setPhaseNumber(3);\n        phase3.setPlanneddateString(colAM);\n        if (colAM != null && !colAM.trim().isEmpty()) {\n            phase3.setPlanneddate(parsePlannedDate(colAM));\n        }\n        String colAN = formatter.formatCellValue(row.getCell(39), evaluator);\n        System.out.println(\"Column AN (3차 완납일자): \" + colAN);\n        if (!colAN.isEmpty()) {\n            phase3.setFullpaiddate(parseDate(colAN, dtf));\n        }\n        String colAO = formatter.formatCellValue(row.getCell(40), evaluator);\n        System.out.println(\"Column AO (3차 부담금): \" + colAO);\n        if (!colAO.isEmpty()) {\n            phase3.setCharge(Long.parseLong(colAO.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAP = formatter.formatCellValue(row.getCell(41), evaluator);\n        System.out.println(\"Column AP (3차 할인액): \" + colAP);\n        if (!colAP.isEmpty()) {\n            phase3.setDiscount(Math.abs(Long.parseLong(colAP.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colAQ = formatter.formatCellValue(row.getCell(42), evaluator);\n        System.out.println(\"Column AQ (3차 업무대행비): \" + colAQ);\n        if (!colAQ.isEmpty()) {\n            phase3.setService(Long.parseLong(colAQ.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAR = formatter.formatCellValue(row.getCell(43), evaluator);\n        System.out.println(\"Column AR (3차 이동): \" + colAR);\n        phase3.setMove(colAR);\n// AS: 3차 합 (예: index 44)\n        String colAS_final = formatter.formatCellValue(row.getCell(44), evaluator).trim();\n        System.out.println(\"Column AS (3차 합): \" + colAS_final);\n        long asValue = 0L;\n        if (!colAS_final.isEmpty()) {\n            try {\n                asValue = Long.parseLong(colAS_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                asValue = 0L;\n            }\n        } else {\n            asValue = 0L;\n        }\n        phase3.setFeesum(asValue);\n        phase3.setCustomer(customer);\n        customer.getPhases().add(phase3);\n\n        // Phase 4 (4차 예정일자: 인덱스 45)\n        String colAT = formatter.formatCellValue(row.getCell(45), evaluator);\n        System.out.println(\"Column AT (4차 예정일자): \" + colAT);\n        Phase phase4 = new Phase();\n        phase4.setPhaseNumber(4);\n        phase4.setPlanneddateString(colAT);\n        if (colAT != null && !colAT.trim().isEmpty()) {\n            phase4.setPlanneddate(parsePlannedDate(colAT));\n        }\n        String colAU = formatter.formatCellValue(row.getCell(46), evaluator);\n        System.out.println(\"Column AU (4차 완납일자): \" + colAU);\n        if (!colAU.isEmpty()) {\n            phase4.setFullpaiddate(parseDate(colAU, dtf));\n        }\n        String colAV = formatter.formatCellValue(row.getCell(47), evaluator);\n        System.out.println(\"Column AV (4차 부담금): \" + colAV);\n        if (!colAV.isEmpty()) {\n            phase4.setCharge(Long.parseLong(colAV.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAW = formatter.formatCellValue(row.getCell(48), evaluator);\n        System.out.println(\"Column AW (4차 할인액): \" + colAW);\n        if (!colAW.isEmpty()) {\n            phase4.setDiscount(Math.abs(Long.parseLong(colAW.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colAX = formatter.formatCellValue(row.getCell(49), evaluator);\n        System.out.println(\"Column AX (4차 업무대행비): \" + colAX);\n        if (!colAX.isEmpty()) {\n            phase4.setService(Long.parseLong(colAX.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colAY = formatter.formatCellValue(row.getCell(50), evaluator);\n        System.out.println(\"Column AY (4차 이동): \" + colAY);\n        phase4.setMove(colAY);\n// AZ: 4차 합 (예: index 51)\n        String colAZ_final = formatter.formatCellValue(row.getCell(51), evaluator).trim();\n        System.out.println(\"Column AZ (4차 합): \" + colAZ_final);\n        long azValue = 0L;\n        if (!colAZ_final.isEmpty()) {\n            try {\n                azValue = Long.parseLong(colAZ_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                azValue = 0L;\n            }\n        } else {\n            azValue = 0L;\n        }\n        phase4.setFeesum(azValue);\n        phase4.setCustomer(customer);\n        customer.getPhases().add(phase4);\n\n        // Phase 5 (5차 예정일자: 인덱스 52)\n        String colBA = formatter.formatCellValue(row.getCell(52), evaluator);\n        System.out.println(\"Column BA (5차 예정일자): \" + colBA);\n        Phase phase5 = new Phase();\n        phase5.setPhaseNumber(5);\n        phase5.setPlanneddateString(colBA);\n        if (colBA != null && !colBA.trim().isEmpty()) {\n            phase5.setPlanneddate(parsePlannedDate(colBA));\n        }\n        String colBB = formatter.formatCellValue(row.getCell(53), evaluator);\n        System.out.println(\"Column BB (5차 완납일자): \" + colBB);\n        if (!colBB.isEmpty()) {\n            phase5.setFullpaiddate(parseDate(colBB, dtf));\n        }\n        String colBC = formatter.formatCellValue(row.getCell(54), evaluator);\n        System.out.println(\"Column BC (5차 부담금): \" + colBC);\n        if (!colBC.isEmpty()) {\n            phase5.setCharge(Long.parseLong(colBC.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colBD = formatter.formatCellValue(row.getCell(55), evaluator);\n        System.out.println(\"Column BD (5차 할인액): \" + colBD);\n        if (!colBD.isEmpty()) {\n            phase5.setDiscount(Math.abs(Long.parseLong(colBD.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colBE = formatter.formatCellValue(row.getCell(56), evaluator);\n        System.out.println(\"Column BE (5차 면제금액): \" + colBE);\n        if (!colBE.isEmpty()) {\n            phase5.setExemption(Math.abs(Long.parseLong(colBE.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colBF = formatter.formatCellValue(row.getCell(57), evaluator);\n        System.out.println(\"Column BF (5차 업무대행비): \" + colBF);\n        if (!colBF.isEmpty()) {\n            phase5.setService(Long.parseLong(colBF.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colBG = formatter.formatCellValue(row.getCell(58), evaluator);\n        System.out.println(\"Column BG (5차 이동): \" + colBG);\n        phase5.setMove(colBG);\n// BH: 5차 합 (예: index 59)\n        String colBH_final = formatter.formatCellValue(row.getCell(59), evaluator).trim();\n        System.out.println(\"Column BH (5차 합): \" + colBH_final);\n        long bhValue = 0L;\n        if (!colBH_final.isEmpty()) {\n            try {\n                bhValue = Long.parseLong(colBH_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                bhValue = 0L;\n            }\n        } else {\n            bhValue = 0L;\n        }\n        phase5.setFeesum(bhValue);\n        phase5.setCustomer(customer);\n        customer.getPhases().add(phase5);\n\n        // Phase 6 (6차 예정일자: 인덱스 60)\n        String colBI = formatter.formatCellValue(row.getCell(60), evaluator);\n        System.out.println(\"Column BI (6차 예정일자): \" + colBI);\n        Phase phase6 = new Phase();\n        phase6.setPhaseNumber(6);\n        phase6.setPlanneddateString(colBI);\n        if (colBI != null && !colBI.trim().isEmpty()) {\n            phase6.setPlanneddate(parsePlannedDate(colBI));\n        }\n        String colBJ = formatter.formatCellValue(row.getCell(61), evaluator);\n        System.out.println(\"Column BJ (6차 완납일자): \" + colBJ);\n        if (!colBJ.isEmpty()) {\n            phase6.setFullpaiddate(parseDate(colBJ, dtf));\n        }\n        String colBK = formatter.formatCellValue(row.getCell(62), evaluator);\n        System.out.println(\"Column BK (6차 부담금): \" + colBK);\n        if (!colBK.isEmpty()) {\n            phase6.setCharge(Long.parseLong(colBK.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colBL = formatter.formatCellValue(row.getCell(63), evaluator);\n        System.out.println(\"Column BL (6차 할인액): \" + colBL);\n        if (!colBL.isEmpty()) {\n            phase6.setDiscount(Math.abs(Long.parseLong(colBL.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colBM = formatter.formatCellValue(row.getCell(64), evaluator);\n        System.out.println(\"Column BM (6차 면제금액): \" + colBM);\n        if (!colBM.isEmpty()) {\n            phase6.setExemption(Math.abs(Long.parseLong(colBM.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colBN = formatter.formatCellValue(row.getCell(65), evaluator);\n        System.out.println(\"Column BN (6차 업무대행비): \" + colBN);\n        if (!colBN.isEmpty()) {\n            phase6.setService(Long.parseLong(colBN.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colBO = formatter.formatCellValue(row.getCell(66), evaluator);\n        System.out.println(\"Column BO (6차 이동): \" + colBO);\n        phase6.setMove(colBO);\n// BP: 6차 합 (예: index 67)\n        String colBP_final = formatter.formatCellValue(row.getCell(67), evaluator).trim();\n        System.out.println(\"Column BP (6차 합): \" + colBP_final);\n        long bpValue = 0L;\n        if (!colBP_final.isEmpty()) {\n            try {\n                bpValue = Long.parseLong(colBP_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                bpValue = 0L;\n            }\n        } else {\n            bpValue = 0L;\n        }\n        phase6.setFeesum(bpValue);\n        phase6.setCustomer(customer);\n        customer.getPhases().add(phase6);\n\n        // Phase 7 (7차 예정일자: 인덱스 68)\n        String colBQ = formatter.formatCellValue(row.getCell(68), evaluator);\n        System.out.println(\"Column BQ (7차 예정일자): \" + colBQ);\n        Phase phase7 = new Phase();\n        phase7.setPhaseNumber(7);\n        phase7.setPlanneddateString(colBQ);\n        if (colBQ != null && !colBQ.trim().isEmpty()) {\n            phase7.setPlanneddate(parsePlannedDate(colBQ));\n        }\n        String colBR = formatter.formatCellValue(row.getCell(69), evaluator);\n        System.out.println(\"Column BR (7차 완납일자): \" + colBR);\n        if (!colBR.isEmpty()) {\n            phase7.setFullpaiddate(parseDate(colBR, dtf));\n        }\n        String colBS = formatter.formatCellValue(row.getCell(70), evaluator);\n        System.out.println(\"Column BS (7차 부담금): \" + colBS);\n        if (!colBS.isEmpty()) {\n            phase7.setCharge(Long.parseLong(colBS.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colBT = formatter.formatCellValue(row.getCell(71), evaluator);\n        System.out.println(\"Column BT (7차 할인액): \" + colBT);\n        if (!colBT.isEmpty()) {\n            phase7.setDiscount(Math.abs(Long.parseLong(colBT.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colBU = formatter.formatCellValue(row.getCell(72), evaluator);\n        System.out.println(\"Column BU (7차 면제금액): \" + colBU);\n        if (!colBU.isEmpty()) {\n            phase7.setExemption(Math.abs(Long.parseLong(colBU.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colBV = formatter.formatCellValue(row.getCell(73), evaluator);\n        System.out.println(\"Column BV (7차 업무대행비): \" + colBV);\n        if (!colBV.isEmpty()) {\n            phase7.setService(Long.parseLong(colBV.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colBW = formatter.formatCellValue(row.getCell(74), evaluator);\n        System.out.println(\"Column BW (7차 이동): \" + colBW);\n        phase7.setMove(colBW);\n// BX: 7차 합 (예: index 75)\n        String colBX_final = formatter.formatCellValue(row.getCell(75), evaluator).trim();\n        System.out.println(\"Column BX (7차 합): \" + colBX_final);\n        long bxValue = 0L;\n        if (!colBX_final.isEmpty()) {\n            try {\n                bxValue = Long.parseLong(colBX_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                bxValue = 0L;\n            }\n        } else {\n            bxValue = 0L;\n        }\n        phase7.setFeesum(bxValue);\n        phase7.setCustomer(customer);\n        customer.getPhases().add(phase7);\n\n        // Phase 8 (8차 예정일자: 인덱스 76)\n        String colBY = formatter.formatCellValue(row.getCell(76), evaluator);\n        System.out.println(\"Column BY (8차 예정일자): \" + colBY);\n        Phase phase8 = new Phase();\n        phase8.setPhaseNumber(8);\n        phase8.setPlanneddateString(colBY);\n        if (colBY != null && !colBY.trim().isEmpty()) {\n            phase8.setPlanneddate(parsePlannedDate(colBY));\n        }\n        String colBZ = formatter.formatCellValue(row.getCell(77), evaluator);\n        System.out.println(\"Column BZ (8차 완납일자): \" + colBZ);\n        if (!colBZ.isEmpty()) {\n            phase8.setFullpaiddate(parseDate(colBZ, dtf));\n        }\n        String colCA = formatter.formatCellValue(row.getCell(78), evaluator);\n        System.out.println(\"Column CA (8차 부담금): \" + colCA);\n        if (!colCA.isEmpty()) {\n            phase8.setCharge(Long.parseLong(colCA.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colCB = formatter.formatCellValue(row.getCell(79), evaluator);\n        System.out.println(\"Column CB (8차 할인액): \" + colCB);\n        if (!colCB.isEmpty()) {\n            phase8.setDiscount(Math.abs(Long.parseLong(colCB.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colCC = formatter.formatCellValue(row.getCell(80), evaluator);\n        System.out.println(\"Column CC (8차 업무대행비): \" + colCC);\n        if (!colCC.isEmpty()) {\n            phase8.setService(Long.parseLong(colCC.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colCD = formatter.formatCellValue(row.getCell(81), evaluator);\n        System.out.println(\"Column CD (8차 이동): \" + colCD);\n        phase8.setMove(colCD);\n// CE: 8차 합 (예: index 82)\n        String colCE_final = formatter.formatCellValue(row.getCell(82), evaluator).trim();\n        System.out.println(\"Column CE (8차 합): \" + colCE_final);\n        long ceValue = 0L;\n        if (!colCE_final.isEmpty()) {\n            try {\n                ceValue = Long.parseLong(colCE_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                ceValue = 0L;\n            }\n        } else {\n            ceValue = 0L;\n        }\n        phase8.setFeesum(ceValue);\n        phase8.setCustomer(customer);\n        customer.getPhases().add(phase8);\n\n        // Phase 9 (9차 예정일자: 인덱스 83)\n        String colCF = formatter.formatCellValue(row.getCell(83), evaluator);\n        System.out.println(\"Column CF (9차 예정일자): \" + colCF);\n        Phase phase9 = new Phase();\n        phase9.setPhaseNumber(9);\n        phase9.setPlanneddateString(colCF);\n        if (colCF != null && !colCF.trim().isEmpty()) {\n            phase9.setPlanneddate(parsePlannedDate(colCF));\n        }\n        String colCG = formatter.formatCellValue(row.getCell(84), evaluator);\n        System.out.println(\"Column CG (9차 완납일자): \" + colCG);\n        if (!colCG.isEmpty()) {\n            phase9.setFullpaiddate(parseDate(colCG, dtf));\n        }\n        String colCH = formatter.formatCellValue(row.getCell(85), evaluator);\n        System.out.println(\"Column CH (9차 부담금): \" + colCH);\n        if (!colCH.isEmpty()) {\n            phase9.setCharge(Long.parseLong(colCH.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colCI = formatter.formatCellValue(row.getCell(86), evaluator);\n        System.out.println(\"Column CI (9차 할인액): \" + colCI);\n        if (!colCI.isEmpty()) {\n            phase9.setDiscount(Math.abs(Long.parseLong(colCI.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colCJ = formatter.formatCellValue(row.getCell(87), evaluator);\n        System.out.println(\"Column CJ (9차 업무대행비): \" + colCJ);\n        if (!colCJ.isEmpty()) {\n            phase9.setService(Long.parseLong(colCJ.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colCK = formatter.formatCellValue(row.getCell(88), evaluator);\n        System.out.println(\"Column CK (9차 이동): \" + colCK);\n        phase9.setMove(colCK);\n// CL: 9차 합 (예: index 89)\n        String colCL_final = formatter.formatCellValue(row.getCell(89), evaluator).trim();\n        System.out.println(\"Column CL (9차 합): \" + colCL_final);\n        long clValue = 0L;\n        if (!colCL_final.isEmpty()) {\n            try {\n                clValue = Long.parseLong(colCL_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                clValue = 0L;\n            }\n        } else {\n            clValue = 0L;\n        }\n        phase9.setFeesum(clValue);\n        phase9.setCustomer(customer);\n        customer.getPhases().add(phase9);\n\n        // Phase 10 (10차 예정일자: 인덱스 90)\n        String colCM = formatter.formatCellValue(row.getCell(90), evaluator);\n        System.out.println(\"Column CM (10차 예정일자): \" + colCM);\n        Phase phase10 = new Phase();\n        phase10.setPhaseNumber(10);\n        phase10.setPlanneddateString(colCM);\n        if (colCM != null && !colCM.trim().isEmpty()) {\n            phase10.setPlanneddate(parsePlannedDate(colCM));\n        }\n        String colCN = formatter.formatCellValue(row.getCell(91), evaluator);\n        System.out.println(\"Column CN (10차 완납일자): \" + colCN);\n        if (!colCN.isEmpty()) {\n            phase10.setFullpaiddate(parseDate(colCN, dtf));\n        }\n        String colCO = formatter.formatCellValue(row.getCell(92), evaluator);\n        System.out.println(\"Column CO (10차 부담금): \" + colCO);\n        if (!colCO.isEmpty()) {\n            phase10.setCharge(Long.parseLong(colCO.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colCP = formatter.formatCellValue(row.getCell(93), evaluator);\n        System.out.println(\"Column CP (10차 할인액): \" + colCP);\n        if (!colCP.isEmpty()) {\n            phase10.setDiscount(Math.abs(Long.parseLong(colCP.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        String colCQ = formatter.formatCellValue(row.getCell(94), evaluator);\n        System.out.println(\"Column CQ (10차 업무대행비): \" + colCQ);\n        if (!colCQ.isEmpty()) {\n            phase10.setService(Long.parseLong(colCQ.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n        String colCR = formatter.formatCellValue(row.getCell(95), evaluator);\n        System.out.println(\"Column CR (10차 이동): \" + colCR);\n        phase10.setMove(colCR);\n// CS: 10차 합 (예: index 96)\n        String colCS_final = formatter.formatCellValue(row.getCell(96), evaluator).trim();\n        System.out.println(\"Column CS (10차 합): \" + colCS_final);\n        long csValue = 0L;\n        if (!colCS_final.isEmpty()) {\n            try {\n                csValue = Long.parseLong(colCS_final.replaceAll(\"[^0-9-]+\", \"\"));\n            } catch (NumberFormatException e) {\n                csValue = 0L;\n            }\n        } else {\n            csValue = 0L;\n        }\n        phase10.setFeesum(csValue);\n        phase10.setCustomer(customer);\n        customer.getPhases().add(phase10);\n\n\n        // -------------------------------------------------------------\n        // (추가) 인덱스 98, 99번 열의 합을 Loan.loanammount 로 저장\n        // -------------------------------------------------------------\n        String col98Str = formatter.formatCellValue(row.getCell(98), evaluator).trim();\n        String col99Str = formatter.formatCellValue(row.getCell(99), evaluator).trim();\n\n        long col98Val = parseLongOrZero(col98Str);\n        long col99Val = parseLongOrZero(col99Str);\n\n        long loanAmmountSum = col98Val + col99Val;\n        customer.getLoan().setLoanammount(loanAmmountSum);\n\n        // -------------------------------------------------------------\n        // (추가) 인덱스 101번 열을 Loan.selfammount 로 저장\n        // -------------------------------------------------------------\n        String col101Str = formatter.formatCellValue(row.getCell(101), evaluator).trim();\n        long selfAmmount = parseLongOrZero(col101Str);\n        customer.getLoan().setSelfammount(selfAmmount);\n\n        // -------------------------------------------------------------\n        // (추가) 인덱스 102번 열을 Loan.loanselfsum, Loan.loanselfcurrent,\n        //        Status.loanExceedAmount 에 모두 저장\n        // -------------------------------------------------------------\n        String col102Str = formatter.formatCellValue(row.getCell(102), evaluator).trim();\n        long col102Val = parseLongOrZero(col102Str);\n\n        customer.getLoan().setLoanselfsum(col102Val);\n        customer.getLoan().setLoanselfcurrent(col102Val);\n        customer.getStatus().setLoanExceedAmount(col102Val);\n\n\n        // --- 최종 섹션: DA ~ FO (0-based 인덱스 104 ~ 170) ---\n        String colDA_final = formatter.formatCellValue(row.getCell(104), evaluator);\n        System.out.println(\"Column DA (총 면제금액): \" + colDA_final);\n        if (!colDA_final.isEmpty()) {\n            customer.getStatus().setExemptionsum(Long.parseLong(colDA_final.replaceAll(\"[^0-9-]+\", \"\")));\n        }\n// DB: 해약 해지일자 (0-based index 105)\n        String colDB_final = formatter.formatCellValue(row.getCell(105), evaluator).trim();\n        System.out.println(\"Column DB (해약 해지일자): \" + colDB_final);\n        LocalDate cancelDate = null;\n        if (!colDB_final.isEmpty() && !colDB_final.equalsIgnoreCase(\"x\")) {\n            try {\n                cancelDate = LocalDate.parse(colDB_final, dtf);\n            } catch (Exception e) {\n                // 날짜 파싱 실패 시 null 처리\n                cancelDate = null;\n            }\n        }\n        customer.getCancel().setCanceldate(cancelDate);\n\n// DC: 해약 환급일자 (0-based index 106)\n        String colDC_final = formatter.formatCellValue(row.getCell(106), evaluator).trim();\n        System.out.println(\"Column DC (해약 환급일자): \" + colDC_final);\n        LocalDate refundDate = null;\n        if (!colDC_final.isEmpty() && !colDC_final.equalsIgnoreCase(\"x\")) {\n            try {\n                refundDate = LocalDate.parse(colDC_final, dtf);\n            } catch (Exception e) {\n                refundDate = null;\n            }\n        }\n        customer.getCancel().setRefunddate(refundDate);\n\n// DD: 해약 환급금 (0-based index 107)\n// '-' 또는 숫자형이 아닌 값이면 0으로 처리\n        String colDD_final = formatter.formatCellValue(row.getCell(107), evaluator).trim();\n        System.out.println(\"Column DD (해약 환급금): \" + colDD_final);\n        int refundAmount = 0;\n        if (!colDD_final.isEmpty() && !colDD_final.equals(\"-\")) {\n            try {\n                refundAmount = Integer.parseInt(colDD_final.replaceAll(\"[^0-9]+\", \"\"));\n            } catch (Exception e) {\n                refundAmount = 0;\n            }\n        }\n        customer.getCancel().setRefundamount(refundAmount);\n\n        String colDE_final = formatter.formatCellValue(row.getCell(108), evaluator).trim();\n        System.out.println(\"Column DE (납입총액): \" + colDE_final);\n        long amountSum = 0L;\n        if (!colDE_final.isEmpty()) {\n            String numeric = colDE_final.replaceAll(\"[^0-9-]+\", \"\");\n            try {\n                amountSum = Long.parseLong(numeric);\n            } catch (NumberFormatException e) {\n                amountSum = 0L;\n            }\n        }\n        customer.getStatus().setAmmountsum(amountSum);\n        System.out.println(\"Column DF (건너뛰기)\");\n        String colDG_final = formatter.formatCellValue(row.getCell(110), evaluator);\n        System.out.println(\"Column DG (담당 총괄): \" + colDG_final);\n        customer.getResponsible().setGeneralmanagement(colDG_final);\n        String colDH_final = formatter.formatCellValue(row.getCell(111), evaluator);\n        System.out.println(\"Column DH (담당 본부): \" + colDH_final);\n        customer.getResponsible().setDivision(colDH_final);\n        String colDI_final = formatter.formatCellValue(row.getCell(112), evaluator);\n        System.out.println(\"Column DI (담당 팀): \" + colDI_final);\n        customer.getResponsible().setTeam(colDI_final);\n        String colDJ_final = formatter.formatCellValue(row.getCell(113), evaluator);\n        System.out.println(\"Column DJ (담당 성명): \" + colDJ_final);\n        customer.getResponsible().setManagername(colDJ_final);\n        String colDK_final = formatter.formatCellValue(row.getCell(114), evaluator);\n        System.out.println(\"Column DK (담당 수수료지급): \" + colDK_final);\n        customer.getResponsible().setFeepaid(colDK_final);\n        String colDL_final = formatter.formatCellValue(row.getCell(115), evaluator);\n        System.out.println(\"Column DL (다힘 시상): \" + colDL_final);\n        customer.getDahim().setDahimsisang(colDL_final);\n        String colDM_final = formatter.formatCellValue(row.getCell(116), evaluator);\n        System.out.println(\"Column DM (다힘 일자): \" + colDM_final);\n        if (!colDM_final.isEmpty()) {\n            customer.getDahim().setDahimdate(parseDate(colDM_final, dtf));\n        }\n        String colDN_final = formatter.formatCellValue(row.getCell(117), evaluator);\n        System.out.println(\"Column DN (다힘 6/30선지급): \" + colDN_final);\n        customer.getDahim().setDahimprepaid(colDN_final);\n        String colDO_final = formatter.formatCellValue(row.getCell(118), evaluator);\n        System.out.println(\"Column DO (다힘 1회차청구): \" + colDO_final);\n        customer.getDahim().setDahimfirst(colDO_final);\n        String colDP_final = formatter.formatCellValue(row.getCell(119), evaluator);\n        System.out.println(\"Column DP (다힘 (1회차)금액): \" + colDP_final);\n        if (!colDP_final.isEmpty()) {\n            customer.getDahim().setDahimfirstpay(String.valueOf(Long.parseLong(colDP_final.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        Cell cellDQ = row.getCell(120);\n        LocalDate dateDQ = getUnderlyingDate(cellDQ);\n        if (dateDQ != null) {\n            System.out.println(\"Column DQ (다힘 일자2, raw): \" + dateDQ);\n            customer.getDahim().setDahimdate2(dateDQ);\n        } else {\n            String colDQ_final = formatter.formatCellValue(cellDQ, evaluator);\n            System.out.println(\"Column DQ (다힘 일자2, fallback): \" + colDQ_final);\n            if (!colDQ_final.isEmpty()) {\n                customer.getDahim().setDahimdate2(parseDate(colDQ_final, dtf));\n            }\n        }\n        String colDR_final = formatter.formatCellValue(row.getCell(121), evaluator);\n        System.out.println(\"Column DR (다힘 출처): \" + colDR_final);\n        customer.getDahim().setDahimsource(colDR_final);\n        String colDS_final = formatter.formatCellValue(row.getCell(122), evaluator);\n        System.out.println(\"Column DS (다힘 2회차청구): \" + colDS_final);\n        customer.getDahim().setDahimsecond(colDS_final);\n        String colDT_final = formatter.formatCellValue(row.getCell(123), evaluator);\n        System.out.println(\"Column DT (다힘 (2회차)금액): \" + colDT_final);\n        if (!colDT_final.isEmpty()) {\n            customer.getDahim().setDahimsecondpay(String.valueOf(Long.parseLong(colDT_final.replaceAll(\"[^0-9-]+\", \"\"))));\n        }\n        Cell cellDU = row.getCell(124);\n        LocalDate dateDU = getUnderlyingDate(cellDU);\n        if (dateDU != null) {\n            System.out.println(\"Column DU (다힘 일자3, raw): \" + dateDU);\n            customer.getDahim().setDahimdate3(dateDU);\n        } else {\n            String colDU_final = formatter.formatCellValue(cellDU, evaluator);\n            System.out.println(\"Column DU (다힘 일자3, fallback): \" + colDU_final);\n            if (!colDU_final.isEmpty()) {\n                customer.getDahim().setDahimdate3(parseDate(colDU_final, dtf));\n            }\n        }\n        String colDV_final = formatter.formatCellValue(row.getCell(125), evaluator);\n        System.out.println(\"Column DV (다힘 합계): \" + colDV_final);\n        customer.getDahim().setDahimsum(colDV_final);\n\n        String colDW_final = formatter.formatCellValue(row.getCell(126), evaluator).trim();\n        System.out.println(\"Column DW (MGM 수수료): \" + colDW_final);\n// 빈 문자열이면 \"\"로, 아니면 그대로 저장 (필요에 따라 추가 전처리 가능)\n        customer.getMgm().setMgmfee(colDW_final.isEmpty() ? \"\" : colDW_final);\n        String colDX_final = formatter.formatCellValue(row.getCell(127), evaluator);\n        System.out.println(\"Column DX (MGM 업체명): \" + colDX_final);\n        customer.getMgm().setMgmcompanyname(colDX_final);\n        String colDY_final = formatter.formatCellValue(row.getCell(128), evaluator);\n        System.out.println(\"Column DY (MGM 이름): \" + colDY_final);\n        customer.getMgm().setMgmname(colDY_final);\n        String colDZ_final = formatter.formatCellValue(row.getCell(129), evaluator);\n        System.out.println(\"Column DZ (MGM 기관): \" + colDZ_final);\n        customer.getMgm().setMgminstitution(colDZ_final);\n        String colEA_final = formatter.formatCellValue(row.getCell(130), evaluator);\n        System.out.println(\"Column EA (MGM 계좌): \" + colEA_final);\n        customer.getMgm().setMgmaccount(colEA_final);\n        // EB: 0-based 131\n        String colEB_final = formatter.formatCellValue(row.getCell(131), evaluator);\n        System.out.println(\"Column EB (1차(직원) 차순): \" + colEB_final);\n        customer.getFirstemp().setFirstemptimes(colEB_final);\n        // EC: 0-based 132, 특별 처리 (1차 지급일자)\n        Cell cellEC = row.getCell(132);\n        LocalDate dateEC = getUnderlyingDate(cellEC);\n        if (dateEC != null) {\n            System.out.println(\"Column EC (1차 지급일자, raw): \" + dateEC);\n            customer.getFirstemp().setFirstempdate(dateEC);\n        } else {\n            String colEC_final = formatter.formatCellValue(cellEC, evaluator);\n            System.out.println(\"Column EC (1차 지급일자, fallback): \" + colEC_final);\n            if (!colEC_final.isEmpty()) {\n                customer.getFirstemp().setFirstempdate(parseDate(colEC_final, dtf));\n            }\n        }\n        // ED: 0-based 133 (2차(직원) 차순)\n        String colED_final = formatter.formatCellValue(row.getCell(133), evaluator);\n        System.out.println(\"Column ED (2차(직원) 차순): \" + colED_final);\n        customer.getSecondemp().setSecondemptimes(colED_final);\n        // EE: 0-based 134, 특별 처리 (2차 지급일자)\n        Cell cellEE = row.getCell(134);\n        LocalDate dateEE = getUnderlyingDate(cellEE);\n        if (dateEE != null) {\n            System.out.println(\"Column EE (2차 지급일자, raw): \" + dateEE);\n            customer.getSecondemp().setSecondempdate(dateEE);\n        } else {\n            String colEE_final = formatter.formatCellValue(cellEE, evaluator);\n            System.out.println(\"Column EE (2차 지급일자, fallback): \" + colEE_final);\n            if (!colEE_final.isEmpty()) {\n                customer.getSecondemp().setSecondempdate(parseDate(colEE_final, dtf));\n            }\n        }\n        // EF: 0-based 135\n        String colEF_final = formatter.formatCellValue(row.getCell(135), evaluator);\n        System.out.println(\"Column EF (부속서류 인감증명서): \" + colEF_final);\n        customer.getAttachments().setSealcertificateprovided(\"o\".equalsIgnoreCase(colEF_final));\n        // EG: 0-based 136\n        String colEG_final = formatter.formatCellValue(row.getCell(136), evaluator);\n        System.out.println(\"Column EG (부속서류 본인서명확인서): \" + colEG_final);\n        customer.getAttachments().setSelfsignatureconfirmationprovided(\"o\".equalsIgnoreCase(colEG_final));\n        // EH: 0-based 137\n        String colEH_final = formatter.formatCellValue(row.getCell(137), evaluator);\n        System.out.println(\"Column EH (부속서류 신분증): \" + colEH_final);\n        customer.getAttachments().setIdcopyprovided(\"o\".equalsIgnoreCase(colEH_final));\n        // EI: 0-based 138\n        String colEI_final = formatter.formatCellValue(row.getCell(138), evaluator);\n        System.out.println(\"Column EI (부속서류 확약서): \" + colEI_final);\n        customer.getAttachments().setCommitmentletterprovided(\"o\".equalsIgnoreCase(colEI_final));\n        // EJ: 0-based 139\n        String colEJ_final = formatter.formatCellValue(row.getCell(139), evaluator);\n        System.out.println(\"Column EJ (부속서류 창준위용): \" + colEJ_final);\n        customer.getAttachments().setForfounding(\"o\".equalsIgnoreCase(colEJ_final));\n        // EK: 0-based 140\n        String colEK_final = formatter.formatCellValue(row.getCell(140), evaluator);\n        System.out.println(\"Column EK (부속서류 무상옵션): \" + colEK_final);\n        customer.getAttachments().setFreeoption(\"o\".equalsIgnoreCase(colEK_final));\n        // EL: 0-based 141\n        String colEL_final = formatter.formatCellValue(row.getCell(141), evaluator);\n        System.out.println(\"Column EL (부속서류 선호도조사): \" + colEL_final);\n        customer.getAttachments().setPreferenceattachment(\"o\".equalsIgnoreCase(colEL_final));\n        // EM: 0-based 142\n        String colEM_final = formatter.formatCellValue(row.getCell(142), evaluator);\n        System.out.println(\"Column EM (부속서류 총회동의서): \" + colEM_final);\n        customer.getAttachments().setPrizeattachment(\"o\".equalsIgnoreCase(colEM_final));\n        // EN: 0-based 143, 특별 처리 (부속서류 사은품 지급일자)\n        Cell cellEN = row.getCell(143);\n        LocalDate dateEN = getUnderlyingDate(cellEN);\n        if (dateEN != null) {\n            System.out.println(\"Column EN (부속서류 사은품 지급일자, raw): \" + dateEN);\n            customer.getAttachments().setPrizedate(dateEN);\n            customer.getAttachments().setPrizeattachment(true);\n        } else {\n            String colEN_final = formatter.formatCellValue(cellEN, evaluator);\n            System.out.println(\"Column EN (부속서류 사은품 지급일자, fallback): \" + colEN_final);\n            if (!colEN_final.isEmpty()) {\n                customer.getAttachments().setPrizedate(parseDate(colEN_final, dtf));\n                customer.getAttachments().setPrizeattachment(true);\n            } else {\n                customer.getAttachments().setPrizeattachment(false);\n            }\n        }\n        // EO: 0-based 144\n        String colEO_final = formatter.formatCellValue(row.getCell(144), evaluator);\n        System.out.println(\"Column EO (이메일): \" + colEO_final);\n        customer.getCustomerData().setEmail(colEO_final);\n        // EP: 0-based 145\n        String colEP_final = formatter.formatCellValue(row.getCell(145), evaluator);\n        System.out.println(\"Column EP (우편물수령주소 우편번호): \" + colEP_final);\n        customer.getPostreceive().setPostnumberreceive(colEP_final);\n        // EQ: 0-based 146, ER: 0-based 147\n        String colEQ_final = formatter.formatCellValue(row.getCell(146), evaluator);\n        String colER_final = formatter.formatCellValue(row.getCell(147), evaluator);\n        System.out.println(\"Column EQ (우편물수령주소 도): \" + colEQ_final);\n        System.out.println(\"Column ER (우편물수령주소 군): \" + colER_final);\n        customer.getPostreceive().setPostreceive(colEQ_final + \" \" + colER_final);\n        // ES: 0-based 148\n        String colES_final = formatter.formatCellValue(row.getCell(148), evaluator);\n        System.out.println(\"Column ES (우편물수령주소 상세주소): \" + colES_final);\n        customer.getPostreceive().setDetailaddressreceive(colES_final);\n        // ET: 0-based 149\n        String colET_final = formatter.formatCellValue(row.getCell(149), evaluator);\n        System.out.println(\"Column ET (비고): \" + colET_final);\n        customer.setAdditional(colET_final);\n        // EU: 0-based 150\n        String colEU_final = formatter.formatCellValue(row.getCell(150), evaluator);\n        System.out.println(\"Column EU (가입경로): \" + colEU_final);\n        customer.setRegisterpath(colEU_final);\n        // EV: 0-based 151\n        String colEV_final = formatter.formatCellValue(row.getCell(151), evaluator);\n        System.out.println(\"Column EV (총회참석 서면): \" + colEV_final);\n        customer.getMeetingattend().setFtofattend(colEV_final);\n        // EW: 0-based 152\n        String colEW_final = formatter.formatCellValue(row.getCell(152), evaluator);\n        System.out.println(\"Column EW (총회참석 직접): \" + colEW_final);\n        customer.getMeetingattend().setSelfattend(colEW_final);\n        // EX: 0-based 153\n        String colEX_final = formatter.formatCellValue(row.getCell(153), evaluator);\n        System.out.println(\"Column EX (총회참석 대리): \" + colEX_final);\n        customer.getMeetingattend().setBehalfattend(colEX_final);\n        // EY: 0-based 154\n        String colEY_final = formatter.formatCellValue(row.getCell(154), evaluator);\n        System.out.println(\"Column EY (특이사항): \" + colEY_final);\n        customer.setSpecialnote(colEY_final);\n        // EZ: 0-based 155\n        String colEZ_final = formatter.formatCellValue(row.getCell(155), evaluator);\n        System.out.println(\"Column EZ (투표기기): \" + colEZ_final);\n        customer.setVotemachine(colEZ_final);\n        // FA: 0-based 156\n        String colFA_final = formatter.formatCellValue(row.getCell(156), evaluator);\n        System.out.println(\"Column FA (안건 제1호): \" + colFA_final);\n        customer.getAgenda().setAgenda1(colFA_final);\n        // FB: 0-based 157\n        String colFB_final = formatter.formatCellValue(row.getCell(157), evaluator);\n        System.out.println(\"Column FB (안건 제2-1호): \" + colFB_final);\n        customer.getAgenda().setAgenda2_1(colFB_final);\n        // FC: 0-based 158\n        String colFC_final = formatter.formatCellValue(row.getCell(158), evaluator);\n        System.out.println(\"Column FC (안건 제2-2호): \" + colFC_final);\n        customer.getAgenda().setAgenda2_2(colFC_final);\n        // FD: 0-based 159\n        String colFD_final = formatter.formatCellValue(row.getCell(159), evaluator);\n        System.out.println(\"Column FD (안건 제2-3호): \" + colFD_final);\n        customer.getAgenda().setAgenda2_3(colFD_final);\n        // FE: 0-based 160\n        String colFE_final = formatter.formatCellValue(row.getCell(160), evaluator);\n        System.out.println(\"Column FE (안건 제2-4호): \" + colFE_final);\n        customer.getAgenda().setAgenda2_4(colFE_final);\n        // FF: 0-based 161\n        String colFF_final = formatter.formatCellValue(row.getCell(161), evaluator);\n        System.out.println(\"Column FF (안건 제3호): \" + colFF_final);\n        customer.getAgenda().setAgenda3(colFF_final);\n        // FG: 0-based 162\n        String colFG_final = formatter.formatCellValue(row.getCell(162), evaluator);\n        System.out.println(\"Column FG (안건 제4호): \" + colFG_final);\n        customer.getAgenda().setAgenda4(colFG_final);\n        // FH: 0-based 163\n        String colFH_final = formatter.formatCellValue(row.getCell(163), evaluator);\n        System.out.println(\"Column FH (안건 제5호): \" + colFH_final);\n        customer.getAgenda().setAgenda5(colFH_final);\n        // FI: 0-based 164\n        String colFI_final = formatter.formatCellValue(row.getCell(164), evaluator);\n        System.out.println(\"Column FI (안건 제6호): \" + colFI_final);\n        customer.getAgenda().setAgenda6(colFI_final);\n        // FJ: 0-based 165\n        String colFJ_final = formatter.formatCellValue(row.getCell(165), evaluator);\n        System.out.println(\"Column FJ (안건 제7호): \" + colFJ_final);\n        customer.getAgenda().setAgenda7(colFJ_final);\n        // FK: 0-based 166\n        String colFK_final = formatter.formatCellValue(row.getCell(166), evaluator);\n        System.out.println(\"Column FK (안건 제8호): \" + colFK_final);\n        customer.getAgenda().setAgenda8(colFK_final);\n        // FL: 0-based 167\n        String colFL_final = formatter.formatCellValue(row.getCell(167), evaluator);\n        System.out.println(\"Column FL (안건 제9호): \" + colFL_final);\n        customer.getAgenda().setAgenda9(colFL_final);\n        // FM: 0-based 168\n        String colFM_final = formatter.formatCellValue(row.getCell(168), evaluator);\n        System.out.println(\"Column FM (안건 제10호): \" + colFM_final);\n        customer.getAgenda().setAgenda10(colFM_final);\n        // FN: 0-based 169\n        String colFN_final = formatter.formatCellValue(row.getCell(169), evaluator);\n        System.out.println(\"Column FN (부속서류 사은품명): \" + colFN_final);\n        customer.getAttachments().setPrizename(colFN_final);\n        // FO: 0-based 170\n        String colFO_final = formatter.formatCellValue(row.getCell(170), evaluator);\n        System.out.println(\"Column FO (부속서류 출자금): \" + colFO_final);\n        customer.getAttachments().setInvestmentfile(\"o\".equalsIgnoreCase(colFO_final));\n        //excel spread complete\n        // --- 매핑 끝 ---\n        return customer;\n    }\n\n\n    // 날짜 파싱 헬퍼: \"yy-M-d\" 형식을 우선 사용, 실패하면 \"yyyy\" 형식으로 파싱\n    private LocalDate parseDate(String s, DateTimeFormatter dtf) {\n        String text = s.replace(\"\\\"\", \"\").trim();\n        if (text.isEmpty()) {\n            return null;\n        }\n        try {\n            return LocalDate.parse(text, dtf);\n        } catch (DateTimeParseException e) {\n            try {\n                DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern(\"yyyy\");\n                return LocalDate.parse(text, dtf2);\n            } catch (DateTimeParseException ex) {\n                // 날짜 형식이 아니면 null 반환하여 아무 값도 넣지 않음.\n                return null;\n            }\n        }\n    }\n\n    // planneddateString 처리 헬퍼:\n    // 만약 s가 공란이면 null, 아니면 \"yy-M-d\" 형식으로 파싱 시도; 실패하면 2100-01-01 리턴.\n    private LocalDate parsePlannedDate(String s) {\n        if (s == null || s.trim().isEmpty()) {\n            return null;\n        }\n        String cleaned = s.replaceAll(\"\\\"\", \"\").trim();\n        try {\n            DateTimeFormatter plannedDtf = DateTimeFormatter.ofPattern(\"yy-M-d\");\n            return LocalDate.parse(cleaned, plannedDtf);\n        } catch (Exception e) {\n            return LocalDate.of(2100, 1, 1);\n        }\n    }\n\n    // 셀에서 원본 날짜값(YYYY-MM-DD)을 추출하는 헬퍼\n    private LocalDate getUnderlyingDate(Cell cell) {\n        if (cell != null && cell.getCellType() == CellType.NUMERIC && DateUtil.isCellDateFormatted(cell)) {\n            return cell.getDateCellValue().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n        }\n        return null;\n    }\n\n    // --- fillFormat1 메서드 (원본 로직 유지) ---\n    public void fillFormat1(File tempFile, Customer customer) throws IOException {\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n\n            getCell(sheet, 28, 49).setCellValue(customer.getId());\n            getCell(sheet, 33, 54).setCellValue(customer.getType() != null ? customer.getType() : \"\");\n            getCell(sheet, 33, 60).setCellValue(customer.getGroupname() != null ? customer.getGroupname() : \"\");\n            getCell(sheet, 36, 54).setCellValue(customer.getTurn() != null ? customer.getTurn() : \"\");\n            if (customer.getCustomerData() != null) {\n                getCell(sheet, 63, 7).setCellValue(customer.getCustomerData().getName() != null ? customer.getCustomerData().getName() : \"\");\n            }\n            if (customer.getLegalAddress() != null) {\n                String address = \"\";\n                if (customer.getLegalAddress().getPost() != null) {\n                    address += customer.getLegalAddress().getPost();\n                }\n                if (customer.getLegalAddress().getDetailaddress() != null) {\n                    address += customer.getLegalAddress().getDetailaddress();\n                }\n                getCell(sheet, 65, 7).setCellValue(address);\n            }\n            if (customer.getCustomerData() != null) {\n                getCell(sheet, 67, 7).setCellValue(customer.getCustomerData().getEmail() != null ? customer.getCustomerData().getEmail() : \"\");\n            }\n            getCell(sheet, 69, 23).setCellValue(customer.getCustomerData() != null ? customer.getCustomerData().getPhone() : \"\");\n            if (customer.getRegisterprice() != null) {\n                getCell(sheet, 73, 23).setCellValue(customer.getRegisterprice());\n            }\n            if (customer.getFinancial() != null) {\n                getCell(sheet, 81, 2).setCellValue(customer.getFinancial().getBankname() != null ? customer.getFinancial().getBankname() : \"\");\n                getCell(sheet, 81, 11).setCellValue(customer.getFinancial().getAccountnum() != null ? customer.getFinancial().getAccountnum() : \"\");\n                getCell(sheet, 81, 22).setCellValue(customer.getFinancial().getTrustcompany() != null ? customer.getFinancial().getTrustcompany() : \"\");\n            }\n            if (customer.getRegisterdate() != null) {\n                getCell(sheet, 96, 13).setCellValue(customer.getRegisterdate().toString());\n            }\n            if (customer.getPhases() != null && !customer.getPhases().isEmpty()) {\n                getCell(sheet, 65, 52).setCellValue(customer.getPhases().get(0).getCharge() != null ? customer.getPhases().get(0).getCharge() : 0);\n            }\n            if (customer.getStatus() != null && customer.getStatus().getAmmountsum() != null) {\n                getCell(sheet, 81, 52).setCellValue(customer.getStatus().getAmmountsum());\n            }\n            workbook.setForceFormulaRecalculation(true);\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                workbook.write(fos);\n            }\n        }\n    }\n\n    // --- fillFormat2 메서드 (원본 로직 유지) ---\n    public void fillFormat2(File tempFile, Customer customer) throws IOException {\n        try (FileInputStream fis = new FileInputStream(tempFile);\n             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {\n\n            XSSFSheet sheet = workbook.getSheetAt(0);\n\n            if (customer.getCustomerData() != null && customer.getCustomerData().getName() != null) {\n                getCell(sheet, 8, 6).setCellValue(customer.getCustomerData().getName());\n            }\n            LocalDate rd = customer.getRegisterdate();\n            if (rd != null) {\n                getCell(sheet, 48, 11).setCellValue(rd.toString());\n            }\n            if (customer.getCustomerData() != null && customer.getCustomerData().getName() != null) {\n                getCell(sheet, 63, 11).setCellValue(customer.getCustomerData().getName());\n            }\n            if (customer.getCustomerData() != null && customer.getCustomerData().getResnumfront() != null) {\n                getCell(sheet, 65, 11).setCellValue(customer.getCustomerData().getResnumfront());\n            }\n            if (customer.getCustomerData() != null && customer.getCustomerData().getPhone() != null) {\n                getCell(sheet, 67, 11).setCellValue(customer.getCustomerData().getPhone());\n            }\n            String address = \"\";\n            if (customer.getLegalAddress() != null) {\n                if (customer.getLegalAddress().getPost() != null) {\n                    address += customer.getLegalAddress().getPost();\n                }\n                if (customer.getLegalAddress().getDetailaddress() != null) {\n                    address += customer.getLegalAddress().getDetailaddress();\n                }\n            }\n            getCell(sheet, 69, 11).setCellValue(address);\n            if (customer.getCustomerData() != null && customer.getCustomerData().getResnumfront() != null && customer.getCustomerData().getResnumback() != null) {\n                String rrn = customer.getCustomerData().getResnumfront() + \"-\" + customer.getCustomerData().getResnumback();\n                getCell(sheet, 150, 12).setCellValue(rrn);\n            }\n            workbook.setForceFormulaRecalculation(true);\n            try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n                workbook.write(fos);\n            }\n        }\n    }\n\n    // getCell 헬퍼 (fillFormat1, fillFormat2에서 사용)\n    private Cell getCell(XSSFSheet sheet, int rowIndex, int colIndex) {\n        Row row = sheet.getRow(rowIndex);\n        if (row == null) {\n            row = sheet.createRow(rowIndex);\n        }\n        Cell cell = row.getCell(colIndex);\n        if (cell == null) {\n            cell = row.createCell(colIndex);\n        }\n        return cell;\n    }\n\n    private long parseLongOrZero(String numericStr) {\n        if (numericStr == null || numericStr.isEmpty()) {\n            return 0L;\n        }\n        try {\n            // 숫자 이외 문자 제거\n            String cleaned = numericStr.replaceAll(\"[^0-9\\\\-]\", \"\");\n            return Long.parseLong(cleaned);\n        } catch (NumberFormatException e) {\n            return 0L;\n        }\n    }\n}\n",
            "FeeService.java": "// FeeService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.Fee.Fee;\nimport com.audora.lotting_be.model.Fee.FeePerPhase;\nimport com.audora.lotting_be.repository.FeeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class FeeService {\n\n    @Autowired\n    private FeeRepository feeRepository;\n\n    /**\n     * 새로운 Fee와 연관된 FeePerPhase 생성\n     *\n     * @param fee 생성할 Fee 객체\n     * @return 생성된 Fee 객체\n     */\n    public Fee createFee(Fee fee) {\n        // 양방향 관계 설정\n        if (fee.getFeePerPhases() != null) {\n            for (FeePerPhase phase : fee.getFeePerPhases()) {\n                phase.setFee(fee);\n            }\n        }\n        return feeRepository.save(fee);\n    }\n\n    /**\n     * ID로 Fee 조회\n     *\n     * @param id Fee의 ID\n     * @return Fee 객체 (존재할 경우), 없을 경우 null\n     */\n    public Fee getFeeById(Long id) {\n        return feeRepository.findById(id).orElse(null);\n    }\n\n    /**\n     * 모든 Fee 조회\n     *\n     * @return 모든 Fee의 리스트\n     */\n    public List<Fee> getAllFees() {\n        return feeRepository.findAll();\n    }\n}\n",
            "PhaseService.java": "package com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Phase;\nimport com.audora.lotting_be.repository.PhaseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PhaseService {\n\n    @Autowired\n    private PhaseRepository phaseRepository;\n\n    // 특정 고객 ID로 Phase 리스트를 조회하는 메서드\n    public List<Phase> getPhasesByCustomerId(Integer customerId) {\n        return phaseRepository.findByCustomerId(customerId);\n    }\n\n    public Optional<Phase> getPhaseById(Long id) {\n        return phaseRepository.findById(id);\n    }\n\n    public Phase savePhase(Phase phase) {\n        return phaseRepository.save(phase);\n    }\n}\n",
            "RefundService.java": "// src/main/java/com/audora/lotting_be/service/RefundService.java\npackage com.audora.lotting_be.service;\n\nimport com.audora.lotting_be.model.customer.Customer;\nimport com.audora.lotting_be.model.refund.CancelledCustomerRefund;\nimport com.audora.lotting_be.repository.CancelledCustomerRefundRepository;\nimport org.apache.poi.ss.usermodel.DataFormatter;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.InputStream;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class RefundService {\n\n    @Autowired\n    private CancelledCustomerRefundRepository refundRepository;\n\n    public void createRefundRecord(Customer customer, Map<String, Object> cancelInfo) {\n        if (refundRepository.existsByCustomerId(customer.getId())) {\n            return; // 이미 기록이 있으면 추가하지 않음\n        }\n        CancelledCustomerRefund refund = new CancelledCustomerRefund();\n        refund.setCustomerId(customer.getId());\n\n        // 고객 기본 정보\n        if (customer.getCustomerData() != null) {\n            refund.setName(customer.getCustomerData().getName());\n            if (customer.getCustomerData().getResnumfront() != null && customer.getCustomerData().getResnumback() != null) {\n                refund.setResidentNumber(customer.getCustomerData().getResnumfront() + \"-\" + customer.getCustomerData().getResnumback());\n            }\n        }\n        refund.setSource(customer.getRegisterpath());\n\n        // 납입 정보 (예: 예약금)\n        if (customer.getDeposits() != null) {\n            refund.setPaymentDate(customer.getDeposits().getDepositdate());\n            refund.setPaymentAmount(customer.getDeposits().getDepositammount());\n        }\n\n        // 해지/환불 정보 – Customer.cancel 에 값이 있다면 사용\n        if (customer.getCancel() != null) {\n            refund.setCancelDate(customer.getCancel().getCanceldate());\n            refund.setRefundDate(customer.getCancel().getRefunddate());\n            if (customer.getCancel().getRefundamount() != null) {\n                refund.setRefundAmount(customer.getCancel().getRefundamount().longValue());\n            }\n        }\n\n        // 금융 정보\n        if (customer.getFinancial() != null) {\n            refund.setInstitution(customer.getFinancial().getBankname());\n            refund.setAccountNumber(customer.getFinancial().getAccountnum());\n        }\n\n        // 입금자 (대개 고객 성명)\n        if (customer.getCustomerData() != null) {\n            refund.setDepositor(customer.getCustomerData().getName());\n        }\n\n        // 담당자 정보\n        if (customer.getResponsible() != null) {\n            refund.setManagerGeneral(customer.getResponsible().getGeneralmanagement());\n            refund.setManagerDivision(customer.getResponsible().getDivision());\n            refund.setManagerTeam(customer.getResponsible().getTeam());\n            refund.setManagerName(customer.getResponsible().getManagername());\n        }\n\n        // 추가 해지정보 (cancelInfo)\n        if (cancelInfo != null) {\n            refund.setReason((String) cancelInfo.get(\"reason\"));\n            refund.setRemarks((String) cancelInfo.get(\"remarks\"));\n            refund.setSource((String) cancelInfo.get(\"source\"));\n        }\n\n        refundRepository.save(refund);\n    }\n\n    /**\n     * 엑셀 파일을 받아 환불정보를 DB에 저장하고, SSE로 진행 상황을 전달하는 메서드\n     * 엑셀 파일은 xlsx 포맷이며, 각 행의 열은 다음과 같이 매핑됩니다.\n     *\n     * A: 성명\n     * B: 주민번호\n     * C: 출처\n     * D: 납입금일자\n     * E: 납입금액\n     * F: 건너뛰기\n     * G: 해약일자\n     * H: 환급일자\n     * I: 환급금\n     * J: 기관\n     * K: 계좌번호\n     * L: 입금자\n     * M: 담당 총괄\n     * N: 담당 본부\n     * O: 담당 팀\n     * P: 담당 성명\n     * Q: 건너뛰기\n     * R: 사유\n     * S: 비고\n     */\n    public SseEmitter uploadRefundExcelFileWithProgress(MultipartFile file, SseEmitter emitter) {\n        SseEmitter sseEmitter = new SseEmitter(3000000L); // 최대 3000초 타임아웃\n        CompletableFuture.runAsync(() -> {\n            try {\n                processRefundExcelFile(file, sseEmitter);\n                sseEmitter.send(SseEmitter.event().name(\"complete\").data(\"Refund excel processing complete.\"));\n                sseEmitter.complete();\n            } catch (Exception e) {\n                try {\n                    sseEmitter.send(SseEmitter.event().name(\"error\").data(e.getMessage()));\n                } catch (Exception ex) {\n                    // 로깅 등 추가 처리 가능\n                }\n                sseEmitter.completeWithError(e);\n            }\n        });\n        return sseEmitter;\n    }\n\n    private void processRefundExcelFile(MultipartFile file, SseEmitter emitter) throws Exception {\n        DataFormatter formatter = new DataFormatter(Locale.getDefault());\n        // 날짜 형식은 \"yyyy-MM-dd\"로 가정 (엑셀 파일에 맞게 수정 가능)\n        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\", Locale.getDefault());\n\n        try (InputStream is = file.getInputStream();\n             Workbook workbook = new XSSFWorkbook(is)) {\n\n            Sheet sheet = workbook.getSheetAt(0);\n            int startRow = 1; // 첫 행은 헤더\n            int lastRow = sheet.getLastRowNum();\n            int totalRows = lastRow - startRow + 1;\n            int processed = 0;\n\n            for (int i = startRow; i <= lastRow; i++) {\n                Row row = sheet.getRow(i);\n                if (row == null) continue;\n\n                CancelledCustomerRefund refund = new CancelledCustomerRefund();\n\n                // A: 성명\n                refund.setName(formatter.formatCellValue(row.getCell(0)));\n\n                // B: 주민번호\n                refund.setResidentNumber(formatter.formatCellValue(row.getCell(1)));\n\n                // C: 출처\n                refund.setSource(formatter.formatCellValue(row.getCell(2)));\n\n                // D: 납입금일자\n                String paymentDateStr = formatter.formatCellValue(row.getCell(3));\n                if (!paymentDateStr.isEmpty()) {\n                    refund.setPaymentDate(LocalDate.parse(paymentDateStr, dateFormatter));\n                }\n\n                // E: 납입금액\n                String paymentAmountStr = formatter.formatCellValue(row.getCell(4));\n                if (!paymentAmountStr.isEmpty()) {\n                    try {\n                        refund.setPaymentAmount(Long.parseLong(paymentAmountStr.replaceAll(\"[^0-9]\", \"\")));\n                    } catch (NumberFormatException nfe) {\n                        refund.setPaymentAmount(0L);\n                    }\n                }\n\n                // F: 건너뛰기 (셀 5 건너뜀)\n\n                // G: 해약일자\n                String cancelDateStr = formatter.formatCellValue(row.getCell(6));\n                if (!cancelDateStr.isEmpty()) {\n                    refund.setCancelDate(LocalDate.parse(cancelDateStr, dateFormatter));\n                }\n\n                // H: 환급일자\n                String refundDateStr = formatter.formatCellValue(row.getCell(7));\n                if (!refundDateStr.isEmpty()) {\n                    refund.setRefundDate(LocalDate.parse(refundDateStr, dateFormatter));\n                }\n\n                // I: 환급금\n                String refundAmountStr = formatter.formatCellValue(row.getCell(8));\n                if (!refundAmountStr.isEmpty()) {\n                    try {\n                        refund.setRefundAmount(Long.parseLong(refundAmountStr.replaceAll(\"[^0-9]\", \"\")));\n                    } catch (NumberFormatException nfe) {\n                        refund.setRefundAmount(0L);\n                    }\n                }\n\n                // J: 기관\n                refund.setInstitution(formatter.formatCellValue(row.getCell(9)));\n\n                // K: 계좌번호\n                refund.setAccountNumber(formatter.formatCellValue(row.getCell(10)));\n\n                // L: 입금자\n                refund.setDepositor(formatter.formatCellValue(row.getCell(11)));\n\n                // M: 담당 총괄\n                refund.setManagerGeneral(formatter.formatCellValue(row.getCell(12)));\n\n                // N: 담당 본부\n                refund.setManagerDivision(formatter.formatCellValue(row.getCell(13)));\n\n                // O: 담당 팀\n                refund.setManagerTeam(formatter.formatCellValue(row.getCell(14)));\n\n                // P: 담당 성명\n                refund.setManagerName(formatter.formatCellValue(row.getCell(15)));\n\n                // Q: 건너뛰기 (셀 16 건너뜀)\n\n                // R: 사유\n                refund.setReason(formatter.formatCellValue(row.getCell(17)));\n\n                // S: 비고\n                refund.setRemarks(formatter.formatCellValue(row.getCell(18)));\n\n                // 저장\n                refundRepository.save(refund);\n                processed++;\n\n                // 진행 상황 전송 (10건마다 혹은 마지막 행)\n                if (processed % 10 == 0 || i == lastRow) {\n                    emitter.send(SseEmitter.event().name(\"progress\").data(processed + \"/\" + totalRows));\n                }\n            }\n        }\n    }\n}\n"
        }
    },
    "util": {
        "__files__": {
            "FileCache.java": "package com.audora.lotting_be.util;\n\nimport java.io.File;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class FileCache {\n    private static final Map<String, File> cache = new ConcurrentHashMap<>();\n\n    public static void put(String fileId, File file) {\n        cache.put(fileId, file);\n    }\n\n    public static File get(String fileId) {\n        return cache.get(fileId);\n    }\n\n    public static void remove(String fileId) {\n        cache.remove(fileId);\n    }\n}\n"
        }
    }
}